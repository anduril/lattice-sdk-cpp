// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: anduril/entityhistory/v1/entity_history_api.pub.proto

#include "anduril/entityhistory/v1/entity_history_api.pub.pb.h"
#include "anduril/entityhistory/v1/entity_history_api.pub.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace anduril {
namespace entityhistory {
namespace v1 {

static const char* EntityHistoryAPI_method_names[] = {
  "/anduril.entityhistory.v1.EntityHistoryAPI/ListHistory",
};

std::unique_ptr< EntityHistoryAPI::Stub> EntityHistoryAPI::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EntityHistoryAPI::Stub> stub(new EntityHistoryAPI::Stub(channel, options));
  return stub;
}

EntityHistoryAPI::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ListHistory_(EntityHistoryAPI_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EntityHistoryAPI::Stub::ListHistory(::grpc::ClientContext* context, const ::anduril::entityhistory::v1::ListHistoryRequest& request, ::anduril::entityhistory::v1::ListHistoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::anduril::entityhistory::v1::ListHistoryRequest, ::anduril::entityhistory::v1::ListHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListHistory_, context, request, response);
}

void EntityHistoryAPI::Stub::async::ListHistory(::grpc::ClientContext* context, const ::anduril::entityhistory::v1::ListHistoryRequest* request, ::anduril::entityhistory::v1::ListHistoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::anduril::entityhistory::v1::ListHistoryRequest, ::anduril::entityhistory::v1::ListHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListHistory_, context, request, response, std::move(f));
}

void EntityHistoryAPI::Stub::async::ListHistory(::grpc::ClientContext* context, const ::anduril::entityhistory::v1::ListHistoryRequest* request, ::anduril::entityhistory::v1::ListHistoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListHistory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::anduril::entityhistory::v1::ListHistoryResponse>* EntityHistoryAPI::Stub::PrepareAsyncListHistoryRaw(::grpc::ClientContext* context, const ::anduril::entityhistory::v1::ListHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::anduril::entityhistory::v1::ListHistoryResponse, ::anduril::entityhistory::v1::ListHistoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListHistory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::anduril::entityhistory::v1::ListHistoryResponse>* EntityHistoryAPI::Stub::AsyncListHistoryRaw(::grpc::ClientContext* context, const ::anduril::entityhistory::v1::ListHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListHistoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

EntityHistoryAPI::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EntityHistoryAPI_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EntityHistoryAPI::Service, ::anduril::entityhistory::v1::ListHistoryRequest, ::anduril::entityhistory::v1::ListHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EntityHistoryAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::anduril::entityhistory::v1::ListHistoryRequest* req,
             ::anduril::entityhistory::v1::ListHistoryResponse* resp) {
               return service->ListHistory(ctx, req, resp);
             }, this)));
}

EntityHistoryAPI::Service::~Service() {
}

::grpc::Status EntityHistoryAPI::Service::ListHistory(::grpc::ServerContext* context, const ::anduril::entityhistory::v1::ListHistoryRequest* request, ::anduril::entityhistory::v1::ListHistoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace anduril
}  // namespace entityhistory
}  // namespace v1

