// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: anduril/communicationsmanager/v1/communications_manager_api.pub.proto

#include "anduril/communicationsmanager/v1/communications_manager_api.pub.pb.h"
#include "anduril/communicationsmanager/v1/communications_manager_api.pub.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace anduril {
namespace communicationsmanager {
namespace v1 {

static const char* CommunicationsManagerAPI_method_names[] = {
  "/anduril.communicationsmanager.v1.CommunicationsManagerAPI/PutRule",
  "/anduril.communicationsmanager.v1.CommunicationsManagerAPI/StreamRules",
  "/anduril.communicationsmanager.v1.CommunicationsManagerAPI/DeleteRule",
  "/anduril.communicationsmanager.v1.CommunicationsManagerAPI/StreamIntegrations",
  "/anduril.communicationsmanager.v1.CommunicationsManagerAPI/GetIntegrations",
  "/anduril.communicationsmanager.v1.CommunicationsManagerAPI/IntegrationHealthUpdate",
};

std::unique_ptr< CommunicationsManagerAPI::Stub> CommunicationsManagerAPI::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CommunicationsManagerAPI::Stub> stub(new CommunicationsManagerAPI::Stub(channel, options));
  return stub;
}

CommunicationsManagerAPI::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_PutRule_(CommunicationsManagerAPI_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamRules_(CommunicationsManagerAPI_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_DeleteRule_(CommunicationsManagerAPI_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamIntegrations_(CommunicationsManagerAPI_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetIntegrations_(CommunicationsManagerAPI_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IntegrationHealthUpdate_(CommunicationsManagerAPI_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CommunicationsManagerAPI::Stub::PutRule(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::PutRuleRequest& request, ::anduril::communicationsmanager::v1::PutRuleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::anduril::communicationsmanager::v1::PutRuleRequest, ::anduril::communicationsmanager::v1::PutRuleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PutRule_, context, request, response);
}

void CommunicationsManagerAPI::Stub::async::PutRule(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::PutRuleRequest* request, ::anduril::communicationsmanager::v1::PutRuleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::anduril::communicationsmanager::v1::PutRuleRequest, ::anduril::communicationsmanager::v1::PutRuleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutRule_, context, request, response, std::move(f));
}

void CommunicationsManagerAPI::Stub::async::PutRule(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::PutRuleRequest* request, ::anduril::communicationsmanager::v1::PutRuleResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PutRule_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::anduril::communicationsmanager::v1::PutRuleResponse>* CommunicationsManagerAPI::Stub::PrepareAsyncPutRuleRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::PutRuleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::anduril::communicationsmanager::v1::PutRuleResponse, ::anduril::communicationsmanager::v1::PutRuleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PutRule_, context, request);
}

::grpc::ClientAsyncResponseReader< ::anduril::communicationsmanager::v1::PutRuleResponse>* CommunicationsManagerAPI::Stub::AsyncPutRuleRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::PutRuleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPutRuleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::anduril::communicationsmanager::v1::StreamRulesResponse>* CommunicationsManagerAPI::Stub::StreamRulesRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamRulesRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::anduril::communicationsmanager::v1::StreamRulesResponse>::Create(channel_.get(), rpcmethod_StreamRules_, context, request);
}

void CommunicationsManagerAPI::Stub::async::StreamRules(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamRulesRequest* request, ::grpc::ClientReadReactor< ::anduril::communicationsmanager::v1::StreamRulesResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::anduril::communicationsmanager::v1::StreamRulesResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamRules_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::anduril::communicationsmanager::v1::StreamRulesResponse>* CommunicationsManagerAPI::Stub::AsyncStreamRulesRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamRulesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::anduril::communicationsmanager::v1::StreamRulesResponse>::Create(channel_.get(), cq, rpcmethod_StreamRules_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::anduril::communicationsmanager::v1::StreamRulesResponse>* CommunicationsManagerAPI::Stub::PrepareAsyncStreamRulesRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamRulesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::anduril::communicationsmanager::v1::StreamRulesResponse>::Create(channel_.get(), cq, rpcmethod_StreamRules_, context, request, false, nullptr);
}

::grpc::Status CommunicationsManagerAPI::Stub::DeleteRule(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::DeleteRuleRequest& request, ::anduril::communicationsmanager::v1::DeleteRuleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::anduril::communicationsmanager::v1::DeleteRuleRequest, ::anduril::communicationsmanager::v1::DeleteRuleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteRule_, context, request, response);
}

void CommunicationsManagerAPI::Stub::async::DeleteRule(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::DeleteRuleRequest* request, ::anduril::communicationsmanager::v1::DeleteRuleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::anduril::communicationsmanager::v1::DeleteRuleRequest, ::anduril::communicationsmanager::v1::DeleteRuleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRule_, context, request, response, std::move(f));
}

void CommunicationsManagerAPI::Stub::async::DeleteRule(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::DeleteRuleRequest* request, ::anduril::communicationsmanager::v1::DeleteRuleResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRule_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::anduril::communicationsmanager::v1::DeleteRuleResponse>* CommunicationsManagerAPI::Stub::PrepareAsyncDeleteRuleRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::DeleteRuleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::anduril::communicationsmanager::v1::DeleteRuleResponse, ::anduril::communicationsmanager::v1::DeleteRuleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteRule_, context, request);
}

::grpc::ClientAsyncResponseReader< ::anduril::communicationsmanager::v1::DeleteRuleResponse>* CommunicationsManagerAPI::Stub::AsyncDeleteRuleRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::DeleteRuleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRuleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>* CommunicationsManagerAPI::Stub::StreamIntegrationsRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamIntegrationsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>::Create(channel_.get(), rpcmethod_StreamIntegrations_, context, request);
}

void CommunicationsManagerAPI::Stub::async::StreamIntegrations(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamIntegrationsRequest* request, ::grpc::ClientReadReactor< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamIntegrations_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>* CommunicationsManagerAPI::Stub::AsyncStreamIntegrationsRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamIntegrationsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>::Create(channel_.get(), cq, rpcmethod_StreamIntegrations_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>* CommunicationsManagerAPI::Stub::PrepareAsyncStreamIntegrationsRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamIntegrationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>::Create(channel_.get(), cq, rpcmethod_StreamIntegrations_, context, request, false, nullptr);
}

::grpc::Status CommunicationsManagerAPI::Stub::GetIntegrations(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::GetIntegrationsRequest& request, ::anduril::communicationsmanager::v1::GetIntegrationsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::anduril::communicationsmanager::v1::GetIntegrationsRequest, ::anduril::communicationsmanager::v1::GetIntegrationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetIntegrations_, context, request, response);
}

void CommunicationsManagerAPI::Stub::async::GetIntegrations(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::GetIntegrationsRequest* request, ::anduril::communicationsmanager::v1::GetIntegrationsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::anduril::communicationsmanager::v1::GetIntegrationsRequest, ::anduril::communicationsmanager::v1::GetIntegrationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIntegrations_, context, request, response, std::move(f));
}

void CommunicationsManagerAPI::Stub::async::GetIntegrations(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::GetIntegrationsRequest* request, ::anduril::communicationsmanager::v1::GetIntegrationsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIntegrations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::anduril::communicationsmanager::v1::GetIntegrationsResponse>* CommunicationsManagerAPI::Stub::PrepareAsyncGetIntegrationsRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::GetIntegrationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::anduril::communicationsmanager::v1::GetIntegrationsResponse, ::anduril::communicationsmanager::v1::GetIntegrationsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetIntegrations_, context, request);
}

::grpc::ClientAsyncResponseReader< ::anduril::communicationsmanager::v1::GetIntegrationsResponse>* CommunicationsManagerAPI::Stub::AsyncGetIntegrationsRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::GetIntegrationsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetIntegrationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CommunicationsManagerAPI::Stub::IntegrationHealthUpdate(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest& request, ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest, ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IntegrationHealthUpdate_, context, request, response);
}

void CommunicationsManagerAPI::Stub::async::IntegrationHealthUpdate(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest* request, ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest, ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IntegrationHealthUpdate_, context, request, response, std::move(f));
}

void CommunicationsManagerAPI::Stub::async::IntegrationHealthUpdate(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest* request, ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IntegrationHealthUpdate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse>* CommunicationsManagerAPI::Stub::PrepareAsyncIntegrationHealthUpdateRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse, ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IntegrationHealthUpdate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse>* CommunicationsManagerAPI::Stub::AsyncIntegrationHealthUpdateRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIntegrationHealthUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

CommunicationsManagerAPI::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CommunicationsManagerAPI_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CommunicationsManagerAPI::Service, ::anduril::communicationsmanager::v1::PutRuleRequest, ::anduril::communicationsmanager::v1::PutRuleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CommunicationsManagerAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::anduril::communicationsmanager::v1::PutRuleRequest* req,
             ::anduril::communicationsmanager::v1::PutRuleResponse* resp) {
               return service->PutRule(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CommunicationsManagerAPI_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< CommunicationsManagerAPI::Service, ::anduril::communicationsmanager::v1::StreamRulesRequest, ::anduril::communicationsmanager::v1::StreamRulesResponse>(
          [](CommunicationsManagerAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::anduril::communicationsmanager::v1::StreamRulesRequest* req,
             ::grpc::ServerWriter<::anduril::communicationsmanager::v1::StreamRulesResponse>* writer) {
               return service->StreamRules(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CommunicationsManagerAPI_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CommunicationsManagerAPI::Service, ::anduril::communicationsmanager::v1::DeleteRuleRequest, ::anduril::communicationsmanager::v1::DeleteRuleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CommunicationsManagerAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::anduril::communicationsmanager::v1::DeleteRuleRequest* req,
             ::anduril::communicationsmanager::v1::DeleteRuleResponse* resp) {
               return service->DeleteRule(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CommunicationsManagerAPI_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< CommunicationsManagerAPI::Service, ::anduril::communicationsmanager::v1::StreamIntegrationsRequest, ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>(
          [](CommunicationsManagerAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::anduril::communicationsmanager::v1::StreamIntegrationsRequest* req,
             ::grpc::ServerWriter<::anduril::communicationsmanager::v1::StreamIntegrationsResponse>* writer) {
               return service->StreamIntegrations(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CommunicationsManagerAPI_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CommunicationsManagerAPI::Service, ::anduril::communicationsmanager::v1::GetIntegrationsRequest, ::anduril::communicationsmanager::v1::GetIntegrationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CommunicationsManagerAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::anduril::communicationsmanager::v1::GetIntegrationsRequest* req,
             ::anduril::communicationsmanager::v1::GetIntegrationsResponse* resp) {
               return service->GetIntegrations(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CommunicationsManagerAPI_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CommunicationsManagerAPI::Service, ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest, ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CommunicationsManagerAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest* req,
             ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse* resp) {
               return service->IntegrationHealthUpdate(ctx, req, resp);
             }, this)));
}

CommunicationsManagerAPI::Service::~Service() {
}

::grpc::Status CommunicationsManagerAPI::Service::PutRule(::grpc::ServerContext* context, const ::anduril::communicationsmanager::v1::PutRuleRequest* request, ::anduril::communicationsmanager::v1::PutRuleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CommunicationsManagerAPI::Service::StreamRules(::grpc::ServerContext* context, const ::anduril::communicationsmanager::v1::StreamRulesRequest* request, ::grpc::ServerWriter< ::anduril::communicationsmanager::v1::StreamRulesResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CommunicationsManagerAPI::Service::DeleteRule(::grpc::ServerContext* context, const ::anduril::communicationsmanager::v1::DeleteRuleRequest* request, ::anduril::communicationsmanager::v1::DeleteRuleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CommunicationsManagerAPI::Service::StreamIntegrations(::grpc::ServerContext* context, const ::anduril::communicationsmanager::v1::StreamIntegrationsRequest* request, ::grpc::ServerWriter< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CommunicationsManagerAPI::Service::GetIntegrations(::grpc::ServerContext* context, const ::anduril::communicationsmanager::v1::GetIntegrationsRequest* request, ::anduril::communicationsmanager::v1::GetIntegrationsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CommunicationsManagerAPI::Service::IntegrationHealthUpdate(::grpc::ServerContext* context, const ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest* request, ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace anduril
}  // namespace communicationsmanager
}  // namespace v1

