// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: anduril/communicationsmanager/v1/communications_manager_api.pub.proto

#include "anduril/communicationsmanager/v1/communications_manager_api.pub.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace anduril {
namespace communicationsmanager {
namespace v1 {

inline constexpr StreamRulesRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rule_type_{},
        _rule_type_cached_byte_size_{0},
        preexisting_only_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR StreamRulesRequest::StreamRulesRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct StreamRulesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamRulesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamRulesRequestDefaultTypeInternal() {}
  union {
    StreamRulesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamRulesRequestDefaultTypeInternal _StreamRulesRequest_default_instance_;

inline constexpr PutRuleResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        distribution_rule_{nullptr},
        error_{nullptr},
        rule_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PutRuleResponse::PutRuleResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PutRuleResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PutRuleResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PutRuleResponseDefaultTypeInternal() {}
  union {
    PutRuleResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PutRuleResponseDefaultTypeInternal _PutRuleResponse_default_instance_;

inline constexpr PutRuleRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        distribution_rule_{nullptr},
        rule_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PutRuleRequest::PutRuleRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PutRuleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PutRuleRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PutRuleRequestDefaultTypeInternal() {}
  union {
    PutRuleRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PutRuleRequestDefaultTypeInternal _PutRuleRequest_default_instance_;

inline constexpr DeleteRuleResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        distribution_rule_{nullptr},
        error_{nullptr},
        rule_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR DeleteRuleResponse::DeleteRuleResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DeleteRuleResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteRuleResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteRuleResponseDefaultTypeInternal() {}
  union {
    DeleteRuleResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteRuleResponseDefaultTypeInternal _DeleteRuleResponse_default_instance_;

inline constexpr DeleteRuleRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        distribution_rule_{nullptr},
        rule_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR DeleteRuleRequest::DeleteRuleRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DeleteRuleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteRuleRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteRuleRequestDefaultTypeInternal() {}
  union {
    DeleteRuleRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteRuleRequestDefaultTypeInternal _DeleteRuleRequest_default_instance_;

inline constexpr StreamRulesResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        distribution_rule_event_{nullptr},
        rule_event_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR StreamRulesResponse::StreamRulesResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct StreamRulesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamRulesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamRulesResponseDefaultTypeInternal() {}
  union {
    StreamRulesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamRulesResponseDefaultTypeInternal _StreamRulesResponse_default_instance_;
}  // namespace v1
}  // namespace communicationsmanager
}  // namespace anduril
static ::_pb::Metadata file_level_metadata_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto = nullptr;
const ::uint32_t TableStruct_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::anduril::communicationsmanager::v1::PutRuleRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::anduril::communicationsmanager::v1::PutRuleRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anduril::communicationsmanager::v1::PutRuleRequest, _impl_.rule_),
    PROTOBUF_FIELD_OFFSET(::anduril::communicationsmanager::v1::PutRuleRequest, _impl_.distribution_rule_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::anduril::communicationsmanager::v1::PutRuleResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::anduril::communicationsmanager::v1::PutRuleResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anduril::communicationsmanager::v1::PutRuleResponse, _impl_.rule_),
    PROTOBUF_FIELD_OFFSET(::anduril::communicationsmanager::v1::PutRuleResponse, _impl_.error_),
    PROTOBUF_FIELD_OFFSET(::anduril::communicationsmanager::v1::PutRuleResponse, _impl_.distribution_rule_),
    2,
    1,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::anduril::communicationsmanager::v1::StreamRulesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anduril::communicationsmanager::v1::StreamRulesRequest, _impl_.rule_type_),
    PROTOBUF_FIELD_OFFSET(::anduril::communicationsmanager::v1::StreamRulesRequest, _impl_.preexisting_only_),
    PROTOBUF_FIELD_OFFSET(::anduril::communicationsmanager::v1::StreamRulesResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::anduril::communicationsmanager::v1::StreamRulesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anduril::communicationsmanager::v1::StreamRulesResponse, _impl_.rule_event_),
    PROTOBUF_FIELD_OFFSET(::anduril::communicationsmanager::v1::StreamRulesResponse, _impl_.distribution_rule_event_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::anduril::communicationsmanager::v1::DeleteRuleRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::anduril::communicationsmanager::v1::DeleteRuleRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anduril::communicationsmanager::v1::DeleteRuleRequest, _impl_.rule_),
    PROTOBUF_FIELD_OFFSET(::anduril::communicationsmanager::v1::DeleteRuleRequest, _impl_.distribution_rule_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::anduril::communicationsmanager::v1::DeleteRuleResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::anduril::communicationsmanager::v1::DeleteRuleResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anduril::communicationsmanager::v1::DeleteRuleResponse, _impl_.rule_),
    PROTOBUF_FIELD_OFFSET(::anduril::communicationsmanager::v1::DeleteRuleResponse, _impl_.error_),
    PROTOBUF_FIELD_OFFSET(::anduril::communicationsmanager::v1::DeleteRuleResponse, _impl_.distribution_rule_),
    2,
    1,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::anduril::communicationsmanager::v1::PutRuleRequest)},
        {12, 23, -1, sizeof(::anduril::communicationsmanager::v1::PutRuleResponse)},
        {26, -1, -1, sizeof(::anduril::communicationsmanager::v1::StreamRulesRequest)},
        {36, 46, -1, sizeof(::anduril::communicationsmanager::v1::StreamRulesResponse)},
        {48, 58, -1, sizeof(::anduril::communicationsmanager::v1::DeleteRuleRequest)},
        {60, 71, -1, sizeof(::anduril::communicationsmanager::v1::DeleteRuleResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::anduril::communicationsmanager::v1::_PutRuleRequest_default_instance_._instance,
    &::anduril::communicationsmanager::v1::_PutRuleResponse_default_instance_._instance,
    &::anduril::communicationsmanager::v1::_StreamRulesRequest_default_instance_._instance,
    &::anduril::communicationsmanager::v1::_StreamRulesResponse_default_instance_._instance,
    &::anduril::communicationsmanager::v1::_DeleteRuleRequest_default_instance_._instance,
    &::anduril::communicationsmanager::v1::_DeleteRuleResponse_default_instance_._instance,
};
const char descriptor_table_protodef_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\nEanduril/communicationsmanager/v1/commu"
    "nications_manager_api.pub.proto\022 anduril"
    ".communicationsmanager.v1\0321anduril/commu"
    "nicationsmanager/v1/common.pub.proto\0326an"
    "duril/communicationsmanager/v1/integrati"
    "on.pub.proto\"\255\001\n\016PutRuleRequest\022:\n\004rule\030"
    "\002 \001(\0132&.anduril.communicationsmanager.v1"
    ".RuleR\004rule\022_\n\021distribution_rule\030\001 \001(\01322"
    ".anduril.communicationsmanager.v1.Distri"
    "butionRuleR\020distributionRule\"\202\002\n\017PutRule"
    "Response\022:\n\004rule\030\003 \001(\0132&.anduril.communi"
    "cationsmanager.v1.RuleR\004rule\022R\n\005error\030\002 "
    "\001(\0132<.anduril.communicationsmanager.v1.C"
    "ommunicationsManagerErrorR\005error\022_\n\021dist"
    "ribution_rule\030\001 \001(\01322.anduril.communicat"
    "ionsmanager.v1.DistributionRuleR\020distrib"
    "utionRule\"\210\001\n\022StreamRulesRequest\022G\n\trule"
    "_type\030\001 \003(\0162*.anduril.communicationsmana"
    "ger.v1.RuleTypeR\010ruleType\022)\n\020preexisting"
    "_only\030\002 \001(\010R\017preexistingOnly\"\322\001\n\023StreamR"
    "ulesResponse\022J\n\nrule_event\030\002 \001(\0132+.andur"
    "il.communicationsmanager.v1.RuleEventR\tr"
    "uleEvent\022o\n\027distribution_rule_event\030\001 \001("
    "\01327.anduril.communicationsmanager.v1.Dis"
    "tributionRuleEventR\025distributionRuleEven"
    "t\"\266\001\n\021DeleteRuleRequest\022:\n\004rule\030\002 \001(\0132&."
    "anduril.communicationsmanager.v1.RuleR\004r"
    "ule\022_\n\021distribution_rule\030\001 \001(\01322.anduril"
    ".communicationsmanager.v1.DistributionRu"
    "leR\020distributionRuleJ\004\010\003\020\004\"\205\002\n\022DeleteRul"
    "eResponse\022:\n\004rule\030\003 \001(\0132&.anduril.commun"
    "icationsmanager.v1.RuleR\004rule\022R\n\005error\030\002"
    " \001(\0132<.anduril.communicationsmanager.v1."
    "CommunicationsManagerErrorR\005error\022_\n\021dis"
    "tribution_rule\030\001 \001(\01322.anduril.communica"
    "tionsmanager.v1.DistributionRuleR\020distri"
    "butionRule*f\n\010RuleType\022\025\n\021RULE_TYPE_INVA"
    "LID\020\000\022\024\n\020RULE_TYPE_ENTITY\020\001\022\022\n\016RULE_TYPE"
    "_BLOB\020\002\022\031\n\025RULE_TYPE_INTEGRATION\020\0032\277\006\n\030C"
    "ommunicationsManagerAPI\022n\n\007PutRule\0220.and"
    "uril.communicationsmanager.v1.PutRuleReq"
    "uest\0321.anduril.communicationsmanager.v1."
    "PutRuleResponse\022|\n\013StreamRules\0224.anduril"
    ".communicationsmanager.v1.StreamRulesReq"
    "uest\0325.anduril.communicationsmanager.v1."
    "StreamRulesResponse0\001\022w\n\nDeleteRule\0223.an"
    "duril.communicationsmanager.v1.DeleteRul"
    "eRequest\0324.anduril.communicationsmanager"
    ".v1.DeleteRuleResponse\022\221\001\n\022StreamIntegra"
    "tions\022;.anduril.communicationsmanager.v1"
    ".StreamIntegrationsRequest\032<.anduril.com"
    "municationsmanager.v1.StreamIntegrations"
    "Response0\001\022\206\001\n\017GetIntegrations\0228.anduril"
    ".communicationsmanager.v1.GetIntegration"
    "sRequest\0329.anduril.communicationsmanager"
    ".v1.GetIntegrationsResponse\022\236\001\n\027Integrat"
    "ionHealthUpdate\022@.anduril.communications"
    "manager.v1.IntegrationHealthUpdateReques"
    "t\032A.anduril.communicationsmanager.v1.Int"
    "egrationHealthUpdateResponseB\263\002\n$com.and"
    "uril.communicationsmanager.v1B Communica"
    "tionsManagerApiPubProtoP\001ZGghe.anduril.d"
    "ev/anduril/andurilapis-go/anduril/commun"
    "icationsmanager/v1\242\002\003ACX\252\002 Anduril.Commu"
    "nicationsmanager.V1\312\002 Anduril\\Communicat"
    "ionsmanager\\V1\342\002,Anduril\\Communicationsm"
    "anager\\V1\\GPBMetadata\352\002\"Anduril::Communi"
    "cationsmanager::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto_deps[2] =
    {
        &::descriptor_table_anduril_2fcommunicationsmanager_2fv1_2fcommon_2epub_2eproto,
        &::descriptor_table_anduril_2fcommunicationsmanager_2fv1_2fintegration_2epub_2eproto,
};
static ::absl::once_flag descriptor_table_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto = {
    false,
    false,
    2706,
    descriptor_table_protodef_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto,
    "anduril/communicationsmanager/v1/communications_manager_api.pub.proto",
    &descriptor_table_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto_once,
    descriptor_table_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto_deps,
    2,
    6,
    schemas,
    file_default_instances,
    TableStruct_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto::offsets,
    file_level_metadata_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto,
    file_level_enum_descriptors_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto,
    file_level_service_descriptors_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto_getter() {
  return &descriptor_table_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto(&descriptor_table_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto);
namespace anduril {
namespace communicationsmanager {
namespace v1 {
const ::google::protobuf::EnumDescriptor* RuleType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto);
  return file_level_enum_descriptors_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t RuleType_internal_data_[] = {
    262144u, 0u, };
bool RuleType_IsValid(int value) {
  return 0 <= value && value <= 3;
}
// ===================================================================

class PutRuleRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PutRuleRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PutRuleRequest, _impl_._has_bits_);
  static const ::anduril::communicationsmanager::v1::Rule& rule(const PutRuleRequest* msg);
  static void set_has_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::anduril::communicationsmanager::v1::DistributionRule& distribution_rule(const PutRuleRequest* msg);
  static void set_has_distribution_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::anduril::communicationsmanager::v1::Rule& PutRuleRequest::_Internal::rule(const PutRuleRequest* msg) {
  return *msg->_impl_.rule_;
}
const ::anduril::communicationsmanager::v1::DistributionRule& PutRuleRequest::_Internal::distribution_rule(const PutRuleRequest* msg) {
  return *msg->_impl_.distribution_rule_;
}
void PutRuleRequest::clear_rule() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.rule_ != nullptr) _impl_.rule_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void PutRuleRequest::clear_distribution_rule() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.distribution_rule_ != nullptr) _impl_.distribution_rule_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PutRuleRequest::PutRuleRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anduril.communicationsmanager.v1.PutRuleRequest)
}
inline PROTOBUF_NDEBUG_INLINE PutRuleRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PutRuleRequest::PutRuleRequest(
    ::google::protobuf::Arena* arena,
    const PutRuleRequest& from)
    : ::google::protobuf::Message(arena) {
  PutRuleRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.distribution_rule_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::anduril::communicationsmanager::v1::DistributionRule>(arena, *from._impl_.distribution_rule_)
                : nullptr;
  _impl_.rule_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::anduril::communicationsmanager::v1::Rule>(arena, *from._impl_.rule_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:anduril.communicationsmanager.v1.PutRuleRequest)
}
inline PROTOBUF_NDEBUG_INLINE PutRuleRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PutRuleRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, distribution_rule_),
           0,
           offsetof(Impl_, rule_) -
               offsetof(Impl_, distribution_rule_) +
               sizeof(Impl_::rule_));
}
PutRuleRequest::~PutRuleRequest() {
  // @@protoc_insertion_point(destructor:anduril.communicationsmanager.v1.PutRuleRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PutRuleRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.distribution_rule_;
  delete _impl_.rule_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void PutRuleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:anduril.communicationsmanager.v1.PutRuleRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.distribution_rule_ != nullptr);
      _impl_.distribution_rule_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.rule_ != nullptr);
      _impl_.rule_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PutRuleRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> PutRuleRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PutRuleRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PutRuleRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .anduril.communicationsmanager.v1.Rule rule = 2 [json_name = "rule"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(PutRuleRequest, _impl_.rule_)}},
    // .anduril.communicationsmanager.v1.DistributionRule distribution_rule = 1 [json_name = "distributionRule"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PutRuleRequest, _impl_.distribution_rule_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .anduril.communicationsmanager.v1.DistributionRule distribution_rule = 1 [json_name = "distributionRule"];
    {PROTOBUF_FIELD_OFFSET(PutRuleRequest, _impl_.distribution_rule_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .anduril.communicationsmanager.v1.Rule rule = 2 [json_name = "rule"];
    {PROTOBUF_FIELD_OFFSET(PutRuleRequest, _impl_.rule_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::anduril::communicationsmanager::v1::DistributionRule>()},
    {::_pbi::TcParser::GetTable<::anduril::communicationsmanager::v1::Rule>()},
  }}, {{
  }},
};

::uint8_t* PutRuleRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anduril.communicationsmanager.v1.PutRuleRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .anduril.communicationsmanager.v1.DistributionRule distribution_rule = 1 [json_name = "distributionRule"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::distribution_rule(this),
        _Internal::distribution_rule(this).GetCachedSize(), target, stream);
  }

  // .anduril.communicationsmanager.v1.Rule rule = 2 [json_name = "rule"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::rule(this),
        _Internal::rule(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anduril.communicationsmanager.v1.PutRuleRequest)
  return target;
}

::size_t PutRuleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anduril.communicationsmanager.v1.PutRuleRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .anduril.communicationsmanager.v1.DistributionRule distribution_rule = 1 [json_name = "distributionRule"];
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.distribution_rule_);
    }

    // .anduril.communicationsmanager.v1.Rule rule = 2 [json_name = "rule"];
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.rule_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PutRuleRequest::_class_data_ = {
    PutRuleRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* PutRuleRequest::GetClassData() const {
  return &_class_data_;
}

void PutRuleRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PutRuleRequest*>(&to_msg);
  auto& from = static_cast<const PutRuleRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anduril.communicationsmanager.v1.PutRuleRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_distribution_rule()->::anduril::communicationsmanager::v1::DistributionRule::MergeFrom(
          from._internal_distribution_rule());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_rule()->::anduril::communicationsmanager::v1::Rule::MergeFrom(
          from._internal_rule());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PutRuleRequest::CopyFrom(const PutRuleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anduril.communicationsmanager.v1.PutRuleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PutRuleRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* PutRuleRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void PutRuleRequest::InternalSwap(PutRuleRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PutRuleRequest, _impl_.rule_)
      + sizeof(PutRuleRequest::_impl_.rule_)
      - PROTOBUF_FIELD_OFFSET(PutRuleRequest, _impl_.distribution_rule_)>(
          reinterpret_cast<char*>(&_impl_.distribution_rule_),
          reinterpret_cast<char*>(&other->_impl_.distribution_rule_));
}

::google::protobuf::Metadata PutRuleRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto_getter, &descriptor_table_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto_once,
      file_level_metadata_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto[0]);
}
// ===================================================================

class PutRuleResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<PutRuleResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PutRuleResponse, _impl_._has_bits_);
  static const ::anduril::communicationsmanager::v1::Rule& rule(const PutRuleResponse* msg);
  static void set_has_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::anduril::communicationsmanager::v1::CommunicationsManagerError& error(const PutRuleResponse* msg);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::anduril::communicationsmanager::v1::DistributionRule& distribution_rule(const PutRuleResponse* msg);
  static void set_has_distribution_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::anduril::communicationsmanager::v1::Rule& PutRuleResponse::_Internal::rule(const PutRuleResponse* msg) {
  return *msg->_impl_.rule_;
}
const ::anduril::communicationsmanager::v1::CommunicationsManagerError& PutRuleResponse::_Internal::error(const PutRuleResponse* msg) {
  return *msg->_impl_.error_;
}
const ::anduril::communicationsmanager::v1::DistributionRule& PutRuleResponse::_Internal::distribution_rule(const PutRuleResponse* msg) {
  return *msg->_impl_.distribution_rule_;
}
void PutRuleResponse::clear_rule() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.rule_ != nullptr) _impl_.rule_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void PutRuleResponse::clear_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.error_ != nullptr) _impl_.error_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void PutRuleResponse::clear_distribution_rule() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.distribution_rule_ != nullptr) _impl_.distribution_rule_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PutRuleResponse::PutRuleResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anduril.communicationsmanager.v1.PutRuleResponse)
}
inline PROTOBUF_NDEBUG_INLINE PutRuleResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PutRuleResponse::PutRuleResponse(
    ::google::protobuf::Arena* arena,
    const PutRuleResponse& from)
    : ::google::protobuf::Message(arena) {
  PutRuleResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.distribution_rule_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::anduril::communicationsmanager::v1::DistributionRule>(arena, *from._impl_.distribution_rule_)
                : nullptr;
  _impl_.error_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::anduril::communicationsmanager::v1::CommunicationsManagerError>(arena, *from._impl_.error_)
                : nullptr;
  _impl_.rule_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::anduril::communicationsmanager::v1::Rule>(arena, *from._impl_.rule_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:anduril.communicationsmanager.v1.PutRuleResponse)
}
inline PROTOBUF_NDEBUG_INLINE PutRuleResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PutRuleResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, distribution_rule_),
           0,
           offsetof(Impl_, rule_) -
               offsetof(Impl_, distribution_rule_) +
               sizeof(Impl_::rule_));
}
PutRuleResponse::~PutRuleResponse() {
  // @@protoc_insertion_point(destructor:anduril.communicationsmanager.v1.PutRuleResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PutRuleResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.distribution_rule_;
  delete _impl_.error_;
  delete _impl_.rule_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void PutRuleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:anduril.communicationsmanager.v1.PutRuleResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.distribution_rule_ != nullptr);
      _impl_.distribution_rule_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.error_ != nullptr);
      _impl_.error_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.rule_ != nullptr);
      _impl_.rule_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PutRuleResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> PutRuleResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PutRuleResponse, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PutRuleResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .anduril.communicationsmanager.v1.DistributionRule distribution_rule = 1 [json_name = "distributionRule"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PutRuleResponse, _impl_.distribution_rule_)}},
    // .anduril.communicationsmanager.v1.CommunicationsManagerError error = 2 [json_name = "error"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(PutRuleResponse, _impl_.error_)}},
    // .anduril.communicationsmanager.v1.Rule rule = 3 [json_name = "rule"];
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(PutRuleResponse, _impl_.rule_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .anduril.communicationsmanager.v1.DistributionRule distribution_rule = 1 [json_name = "distributionRule"];
    {PROTOBUF_FIELD_OFFSET(PutRuleResponse, _impl_.distribution_rule_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .anduril.communicationsmanager.v1.CommunicationsManagerError error = 2 [json_name = "error"];
    {PROTOBUF_FIELD_OFFSET(PutRuleResponse, _impl_.error_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .anduril.communicationsmanager.v1.Rule rule = 3 [json_name = "rule"];
    {PROTOBUF_FIELD_OFFSET(PutRuleResponse, _impl_.rule_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::anduril::communicationsmanager::v1::DistributionRule>()},
    {::_pbi::TcParser::GetTable<::anduril::communicationsmanager::v1::CommunicationsManagerError>()},
    {::_pbi::TcParser::GetTable<::anduril::communicationsmanager::v1::Rule>()},
  }}, {{
  }},
};

::uint8_t* PutRuleResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anduril.communicationsmanager.v1.PutRuleResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .anduril.communicationsmanager.v1.DistributionRule distribution_rule = 1 [json_name = "distributionRule"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::distribution_rule(this),
        _Internal::distribution_rule(this).GetCachedSize(), target, stream);
  }

  // .anduril.communicationsmanager.v1.CommunicationsManagerError error = 2 [json_name = "error"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  // .anduril.communicationsmanager.v1.Rule rule = 3 [json_name = "rule"];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::rule(this),
        _Internal::rule(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anduril.communicationsmanager.v1.PutRuleResponse)
  return target;
}

::size_t PutRuleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anduril.communicationsmanager.v1.PutRuleResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .anduril.communicationsmanager.v1.DistributionRule distribution_rule = 1 [json_name = "distributionRule"];
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.distribution_rule_);
    }

    // .anduril.communicationsmanager.v1.CommunicationsManagerError error = 2 [json_name = "error"];
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.error_);
    }

    // .anduril.communicationsmanager.v1.Rule rule = 3 [json_name = "rule"];
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.rule_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PutRuleResponse::_class_data_ = {
    PutRuleResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* PutRuleResponse::GetClassData() const {
  return &_class_data_;
}

void PutRuleResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PutRuleResponse*>(&to_msg);
  auto& from = static_cast<const PutRuleResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anduril.communicationsmanager.v1.PutRuleResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_distribution_rule()->::anduril::communicationsmanager::v1::DistributionRule::MergeFrom(
          from._internal_distribution_rule());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_error()->::anduril::communicationsmanager::v1::CommunicationsManagerError::MergeFrom(
          from._internal_error());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_rule()->::anduril::communicationsmanager::v1::Rule::MergeFrom(
          from._internal_rule());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PutRuleResponse::CopyFrom(const PutRuleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anduril.communicationsmanager.v1.PutRuleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PutRuleResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* PutRuleResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void PutRuleResponse::InternalSwap(PutRuleResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PutRuleResponse, _impl_.rule_)
      + sizeof(PutRuleResponse::_impl_.rule_)
      - PROTOBUF_FIELD_OFFSET(PutRuleResponse, _impl_.distribution_rule_)>(
          reinterpret_cast<char*>(&_impl_.distribution_rule_),
          reinterpret_cast<char*>(&other->_impl_.distribution_rule_));
}

::google::protobuf::Metadata PutRuleResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto_getter, &descriptor_table_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto_once,
      file_level_metadata_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto[1]);
}
// ===================================================================

class StreamRulesRequest::_Internal {
 public:
};

StreamRulesRequest::StreamRulesRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anduril.communicationsmanager.v1.StreamRulesRequest)
}
inline PROTOBUF_NDEBUG_INLINE StreamRulesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : rule_type_{visibility, arena, from.rule_type_},
        _rule_type_cached_byte_size_{0},
        _cached_size_{0} {}

StreamRulesRequest::StreamRulesRequest(
    ::google::protobuf::Arena* arena,
    const StreamRulesRequest& from)
    : ::google::protobuf::Message(arena) {
  StreamRulesRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.preexisting_only_ = from._impl_.preexisting_only_;

  // @@protoc_insertion_point(copy_constructor:anduril.communicationsmanager.v1.StreamRulesRequest)
}
inline PROTOBUF_NDEBUG_INLINE StreamRulesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : rule_type_{visibility, arena},
        _rule_type_cached_byte_size_{0},
        _cached_size_{0} {}

inline void StreamRulesRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.preexisting_only_ = {};
}
StreamRulesRequest::~StreamRulesRequest() {
  // @@protoc_insertion_point(destructor:anduril.communicationsmanager.v1.StreamRulesRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void StreamRulesRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void StreamRulesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:anduril.communicationsmanager.v1.StreamRulesRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rule_type_.Clear();
  _impl_.preexisting_only_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* StreamRulesRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> StreamRulesRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_StreamRulesRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool preexisting_only = 2 [json_name = "preexistingOnly"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(StreamRulesRequest, _impl_.preexisting_only_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(StreamRulesRequest, _impl_.preexisting_only_)}},
    // repeated .anduril.communicationsmanager.v1.RuleType rule_type = 1 [json_name = "ruleType"];
    {::_pbi::TcParser::FastV32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(StreamRulesRequest, _impl_.rule_type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .anduril.communicationsmanager.v1.RuleType rule_type = 1 [json_name = "ruleType"];
    {PROTOBUF_FIELD_OFFSET(StreamRulesRequest, _impl_.rule_type_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
    // bool preexisting_only = 2 [json_name = "preexistingOnly"];
    {PROTOBUF_FIELD_OFFSET(StreamRulesRequest, _impl_.preexisting_only_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* StreamRulesRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anduril.communicationsmanager.v1.StreamRulesRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .anduril.communicationsmanager.v1.RuleType rule_type = 1 [json_name = "ruleType"];
  {
    std::size_t byte_size = _impl_._rule_type_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(1, _internal_rule_type(),
                                       byte_size, target);
    }
  }

  // bool preexisting_only = 2 [json_name = "preexistingOnly"];
  if (this->_internal_preexisting_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_preexisting_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anduril.communicationsmanager.v1.StreamRulesRequest)
  return target;
}

::size_t StreamRulesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anduril.communicationsmanager.v1.StreamRulesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .anduril.communicationsmanager.v1.RuleType rule_type = 1 [json_name = "ruleType"];
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_rule_type_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_rule_type().Get(static_cast<int>(i)));
    }
    total_size += data_size;
    if (data_size > 0) {
      total_size += 1;
      total_size += ::_pbi::WireFormatLite::Int32Size(
          static_cast<int32_t>(data_size));
    }
    _impl_._rule_type_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
  }
  // bool preexisting_only = 2 [json_name = "preexistingOnly"];
  if (this->_internal_preexisting_only() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData StreamRulesRequest::_class_data_ = {
    StreamRulesRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* StreamRulesRequest::GetClassData() const {
  return &_class_data_;
}

void StreamRulesRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<StreamRulesRequest*>(&to_msg);
  auto& from = static_cast<const StreamRulesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anduril.communicationsmanager.v1.StreamRulesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_rule_type()->MergeFrom(from._internal_rule_type());
  if (from._internal_preexisting_only() != 0) {
    _this->_internal_set_preexisting_only(from._internal_preexisting_only());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StreamRulesRequest::CopyFrom(const StreamRulesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anduril.communicationsmanager.v1.StreamRulesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool StreamRulesRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* StreamRulesRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void StreamRulesRequest::InternalSwap(StreamRulesRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rule_type_.InternalSwap(&other->_impl_.rule_type_);
        swap(_impl_.preexisting_only_, other->_impl_.preexisting_only_);
}

::google::protobuf::Metadata StreamRulesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto_getter, &descriptor_table_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto_once,
      file_level_metadata_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto[2]);
}
// ===================================================================

class StreamRulesResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamRulesResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StreamRulesResponse, _impl_._has_bits_);
  static const ::anduril::communicationsmanager::v1::RuleEvent& rule_event(const StreamRulesResponse* msg);
  static void set_has_rule_event(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::anduril::communicationsmanager::v1::DistributionRuleEvent& distribution_rule_event(const StreamRulesResponse* msg);
  static void set_has_distribution_rule_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::anduril::communicationsmanager::v1::RuleEvent& StreamRulesResponse::_Internal::rule_event(const StreamRulesResponse* msg) {
  return *msg->_impl_.rule_event_;
}
const ::anduril::communicationsmanager::v1::DistributionRuleEvent& StreamRulesResponse::_Internal::distribution_rule_event(const StreamRulesResponse* msg) {
  return *msg->_impl_.distribution_rule_event_;
}
void StreamRulesResponse::clear_rule_event() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.rule_event_ != nullptr) _impl_.rule_event_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void StreamRulesResponse::clear_distribution_rule_event() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.distribution_rule_event_ != nullptr) _impl_.distribution_rule_event_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
StreamRulesResponse::StreamRulesResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anduril.communicationsmanager.v1.StreamRulesResponse)
}
inline PROTOBUF_NDEBUG_INLINE StreamRulesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

StreamRulesResponse::StreamRulesResponse(
    ::google::protobuf::Arena* arena,
    const StreamRulesResponse& from)
    : ::google::protobuf::Message(arena) {
  StreamRulesResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.distribution_rule_event_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::anduril::communicationsmanager::v1::DistributionRuleEvent>(arena, *from._impl_.distribution_rule_event_)
                : nullptr;
  _impl_.rule_event_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::anduril::communicationsmanager::v1::RuleEvent>(arena, *from._impl_.rule_event_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:anduril.communicationsmanager.v1.StreamRulesResponse)
}
inline PROTOBUF_NDEBUG_INLINE StreamRulesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void StreamRulesResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, distribution_rule_event_),
           0,
           offsetof(Impl_, rule_event_) -
               offsetof(Impl_, distribution_rule_event_) +
               sizeof(Impl_::rule_event_));
}
StreamRulesResponse::~StreamRulesResponse() {
  // @@protoc_insertion_point(destructor:anduril.communicationsmanager.v1.StreamRulesResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void StreamRulesResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.distribution_rule_event_;
  delete _impl_.rule_event_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void StreamRulesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:anduril.communicationsmanager.v1.StreamRulesResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.distribution_rule_event_ != nullptr);
      _impl_.distribution_rule_event_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.rule_event_ != nullptr);
      _impl_.rule_event_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* StreamRulesResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> StreamRulesResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StreamRulesResponse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_StreamRulesResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .anduril.communicationsmanager.v1.RuleEvent rule_event = 2 [json_name = "ruleEvent"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(StreamRulesResponse, _impl_.rule_event_)}},
    // .anduril.communicationsmanager.v1.DistributionRuleEvent distribution_rule_event = 1 [json_name = "distributionRuleEvent"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(StreamRulesResponse, _impl_.distribution_rule_event_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .anduril.communicationsmanager.v1.DistributionRuleEvent distribution_rule_event = 1 [json_name = "distributionRuleEvent"];
    {PROTOBUF_FIELD_OFFSET(StreamRulesResponse, _impl_.distribution_rule_event_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .anduril.communicationsmanager.v1.RuleEvent rule_event = 2 [json_name = "ruleEvent"];
    {PROTOBUF_FIELD_OFFSET(StreamRulesResponse, _impl_.rule_event_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::anduril::communicationsmanager::v1::DistributionRuleEvent>()},
    {::_pbi::TcParser::GetTable<::anduril::communicationsmanager::v1::RuleEvent>()},
  }}, {{
  }},
};

::uint8_t* StreamRulesResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anduril.communicationsmanager.v1.StreamRulesResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .anduril.communicationsmanager.v1.DistributionRuleEvent distribution_rule_event = 1 [json_name = "distributionRuleEvent"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::distribution_rule_event(this),
        _Internal::distribution_rule_event(this).GetCachedSize(), target, stream);
  }

  // .anduril.communicationsmanager.v1.RuleEvent rule_event = 2 [json_name = "ruleEvent"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::rule_event(this),
        _Internal::rule_event(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anduril.communicationsmanager.v1.StreamRulesResponse)
  return target;
}

::size_t StreamRulesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anduril.communicationsmanager.v1.StreamRulesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .anduril.communicationsmanager.v1.DistributionRuleEvent distribution_rule_event = 1 [json_name = "distributionRuleEvent"];
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.distribution_rule_event_);
    }

    // .anduril.communicationsmanager.v1.RuleEvent rule_event = 2 [json_name = "ruleEvent"];
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.rule_event_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData StreamRulesResponse::_class_data_ = {
    StreamRulesResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* StreamRulesResponse::GetClassData() const {
  return &_class_data_;
}

void StreamRulesResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<StreamRulesResponse*>(&to_msg);
  auto& from = static_cast<const StreamRulesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anduril.communicationsmanager.v1.StreamRulesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_distribution_rule_event()->::anduril::communicationsmanager::v1::DistributionRuleEvent::MergeFrom(
          from._internal_distribution_rule_event());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_rule_event()->::anduril::communicationsmanager::v1::RuleEvent::MergeFrom(
          from._internal_rule_event());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StreamRulesResponse::CopyFrom(const StreamRulesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anduril.communicationsmanager.v1.StreamRulesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool StreamRulesResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* StreamRulesResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void StreamRulesResponse::InternalSwap(StreamRulesResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamRulesResponse, _impl_.rule_event_)
      + sizeof(StreamRulesResponse::_impl_.rule_event_)
      - PROTOBUF_FIELD_OFFSET(StreamRulesResponse, _impl_.distribution_rule_event_)>(
          reinterpret_cast<char*>(&_impl_.distribution_rule_event_),
          reinterpret_cast<char*>(&other->_impl_.distribution_rule_event_));
}

::google::protobuf::Metadata StreamRulesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto_getter, &descriptor_table_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto_once,
      file_level_metadata_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto[3]);
}
// ===================================================================

class DeleteRuleRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DeleteRuleRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DeleteRuleRequest, _impl_._has_bits_);
  static const ::anduril::communicationsmanager::v1::Rule& rule(const DeleteRuleRequest* msg);
  static void set_has_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::anduril::communicationsmanager::v1::DistributionRule& distribution_rule(const DeleteRuleRequest* msg);
  static void set_has_distribution_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::anduril::communicationsmanager::v1::Rule& DeleteRuleRequest::_Internal::rule(const DeleteRuleRequest* msg) {
  return *msg->_impl_.rule_;
}
const ::anduril::communicationsmanager::v1::DistributionRule& DeleteRuleRequest::_Internal::distribution_rule(const DeleteRuleRequest* msg) {
  return *msg->_impl_.distribution_rule_;
}
void DeleteRuleRequest::clear_rule() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.rule_ != nullptr) _impl_.rule_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void DeleteRuleRequest::clear_distribution_rule() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.distribution_rule_ != nullptr) _impl_.distribution_rule_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DeleteRuleRequest::DeleteRuleRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anduril.communicationsmanager.v1.DeleteRuleRequest)
}
inline PROTOBUF_NDEBUG_INLINE DeleteRuleRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

DeleteRuleRequest::DeleteRuleRequest(
    ::google::protobuf::Arena* arena,
    const DeleteRuleRequest& from)
    : ::google::protobuf::Message(arena) {
  DeleteRuleRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.distribution_rule_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::anduril::communicationsmanager::v1::DistributionRule>(arena, *from._impl_.distribution_rule_)
                : nullptr;
  _impl_.rule_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::anduril::communicationsmanager::v1::Rule>(arena, *from._impl_.rule_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:anduril.communicationsmanager.v1.DeleteRuleRequest)
}
inline PROTOBUF_NDEBUG_INLINE DeleteRuleRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void DeleteRuleRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, distribution_rule_),
           0,
           offsetof(Impl_, rule_) -
               offsetof(Impl_, distribution_rule_) +
               sizeof(Impl_::rule_));
}
DeleteRuleRequest::~DeleteRuleRequest() {
  // @@protoc_insertion_point(destructor:anduril.communicationsmanager.v1.DeleteRuleRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DeleteRuleRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.distribution_rule_;
  delete _impl_.rule_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void DeleteRuleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:anduril.communicationsmanager.v1.DeleteRuleRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.distribution_rule_ != nullptr);
      _impl_.distribution_rule_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.rule_ != nullptr);
      _impl_.rule_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DeleteRuleRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> DeleteRuleRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DeleteRuleRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DeleteRuleRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .anduril.communicationsmanager.v1.Rule rule = 2 [json_name = "rule"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(DeleteRuleRequest, _impl_.rule_)}},
    // .anduril.communicationsmanager.v1.DistributionRule distribution_rule = 1 [json_name = "distributionRule"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(DeleteRuleRequest, _impl_.distribution_rule_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .anduril.communicationsmanager.v1.DistributionRule distribution_rule = 1 [json_name = "distributionRule"];
    {PROTOBUF_FIELD_OFFSET(DeleteRuleRequest, _impl_.distribution_rule_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .anduril.communicationsmanager.v1.Rule rule = 2 [json_name = "rule"];
    {PROTOBUF_FIELD_OFFSET(DeleteRuleRequest, _impl_.rule_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::anduril::communicationsmanager::v1::DistributionRule>()},
    {::_pbi::TcParser::GetTable<::anduril::communicationsmanager::v1::Rule>()},
  }}, {{
  }},
};

::uint8_t* DeleteRuleRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anduril.communicationsmanager.v1.DeleteRuleRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .anduril.communicationsmanager.v1.DistributionRule distribution_rule = 1 [json_name = "distributionRule"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::distribution_rule(this),
        _Internal::distribution_rule(this).GetCachedSize(), target, stream);
  }

  // .anduril.communicationsmanager.v1.Rule rule = 2 [json_name = "rule"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::rule(this),
        _Internal::rule(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anduril.communicationsmanager.v1.DeleteRuleRequest)
  return target;
}

::size_t DeleteRuleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anduril.communicationsmanager.v1.DeleteRuleRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .anduril.communicationsmanager.v1.DistributionRule distribution_rule = 1 [json_name = "distributionRule"];
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.distribution_rule_);
    }

    // .anduril.communicationsmanager.v1.Rule rule = 2 [json_name = "rule"];
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.rule_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData DeleteRuleRequest::_class_data_ = {
    DeleteRuleRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* DeleteRuleRequest::GetClassData() const {
  return &_class_data_;
}

void DeleteRuleRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<DeleteRuleRequest*>(&to_msg);
  auto& from = static_cast<const DeleteRuleRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anduril.communicationsmanager.v1.DeleteRuleRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_distribution_rule()->::anduril::communicationsmanager::v1::DistributionRule::MergeFrom(
          from._internal_distribution_rule());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_rule()->::anduril::communicationsmanager::v1::Rule::MergeFrom(
          from._internal_rule());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteRuleRequest::CopyFrom(const DeleteRuleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anduril.communicationsmanager.v1.DeleteRuleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DeleteRuleRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* DeleteRuleRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void DeleteRuleRequest::InternalSwap(DeleteRuleRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteRuleRequest, _impl_.rule_)
      + sizeof(DeleteRuleRequest::_impl_.rule_)
      - PROTOBUF_FIELD_OFFSET(DeleteRuleRequest, _impl_.distribution_rule_)>(
          reinterpret_cast<char*>(&_impl_.distribution_rule_),
          reinterpret_cast<char*>(&other->_impl_.distribution_rule_));
}

::google::protobuf::Metadata DeleteRuleRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto_getter, &descriptor_table_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto_once,
      file_level_metadata_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto[4]);
}
// ===================================================================

class DeleteRuleResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DeleteRuleResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DeleteRuleResponse, _impl_._has_bits_);
  static const ::anduril::communicationsmanager::v1::Rule& rule(const DeleteRuleResponse* msg);
  static void set_has_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::anduril::communicationsmanager::v1::CommunicationsManagerError& error(const DeleteRuleResponse* msg);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::anduril::communicationsmanager::v1::DistributionRule& distribution_rule(const DeleteRuleResponse* msg);
  static void set_has_distribution_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::anduril::communicationsmanager::v1::Rule& DeleteRuleResponse::_Internal::rule(const DeleteRuleResponse* msg) {
  return *msg->_impl_.rule_;
}
const ::anduril::communicationsmanager::v1::CommunicationsManagerError& DeleteRuleResponse::_Internal::error(const DeleteRuleResponse* msg) {
  return *msg->_impl_.error_;
}
const ::anduril::communicationsmanager::v1::DistributionRule& DeleteRuleResponse::_Internal::distribution_rule(const DeleteRuleResponse* msg) {
  return *msg->_impl_.distribution_rule_;
}
void DeleteRuleResponse::clear_rule() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.rule_ != nullptr) _impl_.rule_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void DeleteRuleResponse::clear_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.error_ != nullptr) _impl_.error_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void DeleteRuleResponse::clear_distribution_rule() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.distribution_rule_ != nullptr) _impl_.distribution_rule_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DeleteRuleResponse::DeleteRuleResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anduril.communicationsmanager.v1.DeleteRuleResponse)
}
inline PROTOBUF_NDEBUG_INLINE DeleteRuleResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

DeleteRuleResponse::DeleteRuleResponse(
    ::google::protobuf::Arena* arena,
    const DeleteRuleResponse& from)
    : ::google::protobuf::Message(arena) {
  DeleteRuleResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.distribution_rule_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::anduril::communicationsmanager::v1::DistributionRule>(arena, *from._impl_.distribution_rule_)
                : nullptr;
  _impl_.error_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::anduril::communicationsmanager::v1::CommunicationsManagerError>(arena, *from._impl_.error_)
                : nullptr;
  _impl_.rule_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::anduril::communicationsmanager::v1::Rule>(arena, *from._impl_.rule_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:anduril.communicationsmanager.v1.DeleteRuleResponse)
}
inline PROTOBUF_NDEBUG_INLINE DeleteRuleResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void DeleteRuleResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, distribution_rule_),
           0,
           offsetof(Impl_, rule_) -
               offsetof(Impl_, distribution_rule_) +
               sizeof(Impl_::rule_));
}
DeleteRuleResponse::~DeleteRuleResponse() {
  // @@protoc_insertion_point(destructor:anduril.communicationsmanager.v1.DeleteRuleResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DeleteRuleResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.distribution_rule_;
  delete _impl_.error_;
  delete _impl_.rule_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void DeleteRuleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:anduril.communicationsmanager.v1.DeleteRuleResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.distribution_rule_ != nullptr);
      _impl_.distribution_rule_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.error_ != nullptr);
      _impl_.error_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.rule_ != nullptr);
      _impl_.rule_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DeleteRuleResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> DeleteRuleResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DeleteRuleResponse, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DeleteRuleResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .anduril.communicationsmanager.v1.DistributionRule distribution_rule = 1 [json_name = "distributionRule"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(DeleteRuleResponse, _impl_.distribution_rule_)}},
    // .anduril.communicationsmanager.v1.CommunicationsManagerError error = 2 [json_name = "error"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(DeleteRuleResponse, _impl_.error_)}},
    // .anduril.communicationsmanager.v1.Rule rule = 3 [json_name = "rule"];
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(DeleteRuleResponse, _impl_.rule_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .anduril.communicationsmanager.v1.DistributionRule distribution_rule = 1 [json_name = "distributionRule"];
    {PROTOBUF_FIELD_OFFSET(DeleteRuleResponse, _impl_.distribution_rule_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .anduril.communicationsmanager.v1.CommunicationsManagerError error = 2 [json_name = "error"];
    {PROTOBUF_FIELD_OFFSET(DeleteRuleResponse, _impl_.error_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .anduril.communicationsmanager.v1.Rule rule = 3 [json_name = "rule"];
    {PROTOBUF_FIELD_OFFSET(DeleteRuleResponse, _impl_.rule_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::anduril::communicationsmanager::v1::DistributionRule>()},
    {::_pbi::TcParser::GetTable<::anduril::communicationsmanager::v1::CommunicationsManagerError>()},
    {::_pbi::TcParser::GetTable<::anduril::communicationsmanager::v1::Rule>()},
  }}, {{
  }},
};

::uint8_t* DeleteRuleResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anduril.communicationsmanager.v1.DeleteRuleResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .anduril.communicationsmanager.v1.DistributionRule distribution_rule = 1 [json_name = "distributionRule"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::distribution_rule(this),
        _Internal::distribution_rule(this).GetCachedSize(), target, stream);
  }

  // .anduril.communicationsmanager.v1.CommunicationsManagerError error = 2 [json_name = "error"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  // .anduril.communicationsmanager.v1.Rule rule = 3 [json_name = "rule"];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::rule(this),
        _Internal::rule(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anduril.communicationsmanager.v1.DeleteRuleResponse)
  return target;
}

::size_t DeleteRuleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anduril.communicationsmanager.v1.DeleteRuleResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .anduril.communicationsmanager.v1.DistributionRule distribution_rule = 1 [json_name = "distributionRule"];
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.distribution_rule_);
    }

    // .anduril.communicationsmanager.v1.CommunicationsManagerError error = 2 [json_name = "error"];
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.error_);
    }

    // .anduril.communicationsmanager.v1.Rule rule = 3 [json_name = "rule"];
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.rule_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData DeleteRuleResponse::_class_data_ = {
    DeleteRuleResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* DeleteRuleResponse::GetClassData() const {
  return &_class_data_;
}

void DeleteRuleResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<DeleteRuleResponse*>(&to_msg);
  auto& from = static_cast<const DeleteRuleResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anduril.communicationsmanager.v1.DeleteRuleResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_distribution_rule()->::anduril::communicationsmanager::v1::DistributionRule::MergeFrom(
          from._internal_distribution_rule());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_error()->::anduril::communicationsmanager::v1::CommunicationsManagerError::MergeFrom(
          from._internal_error());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_rule()->::anduril::communicationsmanager::v1::Rule::MergeFrom(
          from._internal_rule());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteRuleResponse::CopyFrom(const DeleteRuleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anduril.communicationsmanager.v1.DeleteRuleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DeleteRuleResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* DeleteRuleResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void DeleteRuleResponse::InternalSwap(DeleteRuleResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteRuleResponse, _impl_.rule_)
      + sizeof(DeleteRuleResponse::_impl_.rule_)
      - PROTOBUF_FIELD_OFFSET(DeleteRuleResponse, _impl_.distribution_rule_)>(
          reinterpret_cast<char*>(&_impl_.distribution_rule_),
          reinterpret_cast<char*>(&other->_impl_.distribution_rule_));
}

::google::protobuf::Metadata DeleteRuleResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto_getter, &descriptor_table_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto_once,
      file_level_metadata_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto[5]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace communicationsmanager
}  // namespace anduril
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
