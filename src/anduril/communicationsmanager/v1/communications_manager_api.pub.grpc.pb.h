// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: anduril/communicationsmanager/v1/communications_manager_api.pub.proto
#ifndef GRPC_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto__INCLUDED
#define GRPC_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto__INCLUDED

#include "anduril/communicationsmanager/v1/communications_manager_api.pub.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace anduril {
namespace communicationsmanager {
namespace v1 {

// Manages the policies for distribution of data via application of filters & priorities.
class CommunicationsManagerAPI final {
 public:
  static constexpr char const* service_full_name() {
    return "anduril.communicationsmanager.v1.CommunicationsManagerAPI";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Puts a rule. Rules are distributed to all nodes in the mesh.
    virtual ::grpc::Status PutRule(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::PutRuleRequest& request, ::anduril::communicationsmanager::v1::PutRuleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::communicationsmanager::v1::PutRuleResponse>> AsyncPutRule(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::PutRuleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::communicationsmanager::v1::PutRuleResponse>>(AsyncPutRuleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::communicationsmanager::v1::PutRuleResponse>> PrepareAsyncPutRule(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::PutRuleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::communicationsmanager::v1::PutRuleResponse>>(PrepareAsyncPutRuleRaw(context, request, cq));
    }
    // Streams all rules available to this distribution manager.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::anduril::communicationsmanager::v1::StreamRulesResponse>> StreamRules(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamRulesRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::anduril::communicationsmanager::v1::StreamRulesResponse>>(StreamRulesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::anduril::communicationsmanager::v1::StreamRulesResponse>> AsyncStreamRules(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamRulesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::anduril::communicationsmanager::v1::StreamRulesResponse>>(AsyncStreamRulesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::anduril::communicationsmanager::v1::StreamRulesResponse>> PrepareAsyncStreamRules(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamRulesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::anduril::communicationsmanager::v1::StreamRulesResponse>>(PrepareAsyncStreamRulesRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteRule(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::DeleteRuleRequest& request, ::anduril::communicationsmanager::v1::DeleteRuleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::communicationsmanager::v1::DeleteRuleResponse>> AsyncDeleteRule(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::DeleteRuleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::communicationsmanager::v1::DeleteRuleResponse>>(AsyncDeleteRuleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::communicationsmanager::v1::DeleteRuleResponse>> PrepareAsyncDeleteRule(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::DeleteRuleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::communicationsmanager::v1::DeleteRuleResponse>>(PrepareAsyncDeleteRuleRaw(context, request, cq));
    }
    // Stream a list of integrations registered with the system. Supports various
    // filters to constrain to specific nodes.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>> StreamIntegrations(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamIntegrationsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>>(StreamIntegrationsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>> AsyncStreamIntegrations(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamIntegrationsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>>(AsyncStreamIntegrationsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>> PrepareAsyncStreamIntegrations(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamIntegrationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>>(PrepareAsyncStreamIntegrationsRaw(context, request, cq));
    }
    // Deprecated: Use ListIntegrations instead.
    virtual ::grpc::Status GetIntegrations(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::GetIntegrationsRequest& request, ::anduril::communicationsmanager::v1::GetIntegrationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::communicationsmanager::v1::GetIntegrationsResponse>> AsyncGetIntegrations(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::GetIntegrationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::communicationsmanager::v1::GetIntegrationsResponse>>(AsyncGetIntegrationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::communicationsmanager::v1::GetIntegrationsResponse>> PrepareAsyncGetIntegrations(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::GetIntegrationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::communicationsmanager::v1::GetIntegrationsResponse>>(PrepareAsyncGetIntegrationsRaw(context, request, cq));
    }
    virtual ::grpc::Status IntegrationHealthUpdate(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest& request, ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse>> AsyncIntegrationHealthUpdate(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse>>(AsyncIntegrationHealthUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse>> PrepareAsyncIntegrationHealthUpdate(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse>>(PrepareAsyncIntegrationHealthUpdateRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Puts a rule. Rules are distributed to all nodes in the mesh.
      virtual void PutRule(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::PutRuleRequest* request, ::anduril::communicationsmanager::v1::PutRuleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PutRule(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::PutRuleRequest* request, ::anduril::communicationsmanager::v1::PutRuleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Streams all rules available to this distribution manager.
      virtual void StreamRules(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamRulesRequest* request, ::grpc::ClientReadReactor< ::anduril::communicationsmanager::v1::StreamRulesResponse>* reactor) = 0;
      virtual void DeleteRule(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::DeleteRuleRequest* request, ::anduril::communicationsmanager::v1::DeleteRuleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteRule(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::DeleteRuleRequest* request, ::anduril::communicationsmanager::v1::DeleteRuleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Stream a list of integrations registered with the system. Supports various
      // filters to constrain to specific nodes.
      virtual void StreamIntegrations(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamIntegrationsRequest* request, ::grpc::ClientReadReactor< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>* reactor) = 0;
      // Deprecated: Use ListIntegrations instead.
      virtual void GetIntegrations(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::GetIntegrationsRequest* request, ::anduril::communicationsmanager::v1::GetIntegrationsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetIntegrations(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::GetIntegrationsRequest* request, ::anduril::communicationsmanager::v1::GetIntegrationsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void IntegrationHealthUpdate(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest* request, ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IntegrationHealthUpdate(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest* request, ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::anduril::communicationsmanager::v1::PutRuleResponse>* AsyncPutRuleRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::PutRuleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::anduril::communicationsmanager::v1::PutRuleResponse>* PrepareAsyncPutRuleRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::PutRuleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::anduril::communicationsmanager::v1::StreamRulesResponse>* StreamRulesRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamRulesRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::anduril::communicationsmanager::v1::StreamRulesResponse>* AsyncStreamRulesRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamRulesRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::anduril::communicationsmanager::v1::StreamRulesResponse>* PrepareAsyncStreamRulesRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamRulesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::anduril::communicationsmanager::v1::DeleteRuleResponse>* AsyncDeleteRuleRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::DeleteRuleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::anduril::communicationsmanager::v1::DeleteRuleResponse>* PrepareAsyncDeleteRuleRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::DeleteRuleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>* StreamIntegrationsRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamIntegrationsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>* AsyncStreamIntegrationsRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamIntegrationsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>* PrepareAsyncStreamIntegrationsRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamIntegrationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::anduril::communicationsmanager::v1::GetIntegrationsResponse>* AsyncGetIntegrationsRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::GetIntegrationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::anduril::communicationsmanager::v1::GetIntegrationsResponse>* PrepareAsyncGetIntegrationsRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::GetIntegrationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse>* AsyncIntegrationHealthUpdateRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse>* PrepareAsyncIntegrationHealthUpdateRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status PutRule(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::PutRuleRequest& request, ::anduril::communicationsmanager::v1::PutRuleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::communicationsmanager::v1::PutRuleResponse>> AsyncPutRule(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::PutRuleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::communicationsmanager::v1::PutRuleResponse>>(AsyncPutRuleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::communicationsmanager::v1::PutRuleResponse>> PrepareAsyncPutRule(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::PutRuleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::communicationsmanager::v1::PutRuleResponse>>(PrepareAsyncPutRuleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::anduril::communicationsmanager::v1::StreamRulesResponse>> StreamRules(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamRulesRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::anduril::communicationsmanager::v1::StreamRulesResponse>>(StreamRulesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::anduril::communicationsmanager::v1::StreamRulesResponse>> AsyncStreamRules(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamRulesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::anduril::communicationsmanager::v1::StreamRulesResponse>>(AsyncStreamRulesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::anduril::communicationsmanager::v1::StreamRulesResponse>> PrepareAsyncStreamRules(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamRulesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::anduril::communicationsmanager::v1::StreamRulesResponse>>(PrepareAsyncStreamRulesRaw(context, request, cq));
    }
    ::grpc::Status DeleteRule(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::DeleteRuleRequest& request, ::anduril::communicationsmanager::v1::DeleteRuleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::communicationsmanager::v1::DeleteRuleResponse>> AsyncDeleteRule(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::DeleteRuleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::communicationsmanager::v1::DeleteRuleResponse>>(AsyncDeleteRuleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::communicationsmanager::v1::DeleteRuleResponse>> PrepareAsyncDeleteRule(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::DeleteRuleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::communicationsmanager::v1::DeleteRuleResponse>>(PrepareAsyncDeleteRuleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>> StreamIntegrations(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamIntegrationsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>>(StreamIntegrationsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>> AsyncStreamIntegrations(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamIntegrationsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>>(AsyncStreamIntegrationsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>> PrepareAsyncStreamIntegrations(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamIntegrationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>>(PrepareAsyncStreamIntegrationsRaw(context, request, cq));
    }
    ::grpc::Status GetIntegrations(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::GetIntegrationsRequest& request, ::anduril::communicationsmanager::v1::GetIntegrationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::communicationsmanager::v1::GetIntegrationsResponse>> AsyncGetIntegrations(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::GetIntegrationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::communicationsmanager::v1::GetIntegrationsResponse>>(AsyncGetIntegrationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::communicationsmanager::v1::GetIntegrationsResponse>> PrepareAsyncGetIntegrations(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::GetIntegrationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::communicationsmanager::v1::GetIntegrationsResponse>>(PrepareAsyncGetIntegrationsRaw(context, request, cq));
    }
    ::grpc::Status IntegrationHealthUpdate(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest& request, ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse>> AsyncIntegrationHealthUpdate(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse>>(AsyncIntegrationHealthUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse>> PrepareAsyncIntegrationHealthUpdate(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse>>(PrepareAsyncIntegrationHealthUpdateRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void PutRule(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::PutRuleRequest* request, ::anduril::communicationsmanager::v1::PutRuleResponse* response, std::function<void(::grpc::Status)>) override;
      void PutRule(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::PutRuleRequest* request, ::anduril::communicationsmanager::v1::PutRuleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamRules(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamRulesRequest* request, ::grpc::ClientReadReactor< ::anduril::communicationsmanager::v1::StreamRulesResponse>* reactor) override;
      void DeleteRule(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::DeleteRuleRequest* request, ::anduril::communicationsmanager::v1::DeleteRuleResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteRule(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::DeleteRuleRequest* request, ::anduril::communicationsmanager::v1::DeleteRuleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamIntegrations(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamIntegrationsRequest* request, ::grpc::ClientReadReactor< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>* reactor) override;
      void GetIntegrations(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::GetIntegrationsRequest* request, ::anduril::communicationsmanager::v1::GetIntegrationsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetIntegrations(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::GetIntegrationsRequest* request, ::anduril::communicationsmanager::v1::GetIntegrationsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void IntegrationHealthUpdate(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest* request, ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse* response, std::function<void(::grpc::Status)>) override;
      void IntegrationHealthUpdate(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest* request, ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::anduril::communicationsmanager::v1::PutRuleResponse>* AsyncPutRuleRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::PutRuleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::anduril::communicationsmanager::v1::PutRuleResponse>* PrepareAsyncPutRuleRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::PutRuleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::anduril::communicationsmanager::v1::StreamRulesResponse>* StreamRulesRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamRulesRequest& request) override;
    ::grpc::ClientAsyncReader< ::anduril::communicationsmanager::v1::StreamRulesResponse>* AsyncStreamRulesRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamRulesRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::anduril::communicationsmanager::v1::StreamRulesResponse>* PrepareAsyncStreamRulesRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamRulesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::anduril::communicationsmanager::v1::DeleteRuleResponse>* AsyncDeleteRuleRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::DeleteRuleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::anduril::communicationsmanager::v1::DeleteRuleResponse>* PrepareAsyncDeleteRuleRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::DeleteRuleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>* StreamIntegrationsRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamIntegrationsRequest& request) override;
    ::grpc::ClientAsyncReader< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>* AsyncStreamIntegrationsRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamIntegrationsRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>* PrepareAsyncStreamIntegrationsRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::StreamIntegrationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::anduril::communicationsmanager::v1::GetIntegrationsResponse>* AsyncGetIntegrationsRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::GetIntegrationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::anduril::communicationsmanager::v1::GetIntegrationsResponse>* PrepareAsyncGetIntegrationsRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::GetIntegrationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse>* AsyncIntegrationHealthUpdateRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse>* PrepareAsyncIntegrationHealthUpdateRaw(::grpc::ClientContext* context, const ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_PutRule_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamRules_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteRule_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamIntegrations_;
    const ::grpc::internal::RpcMethod rpcmethod_GetIntegrations_;
    const ::grpc::internal::RpcMethod rpcmethod_IntegrationHealthUpdate_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Puts a rule. Rules are distributed to all nodes in the mesh.
    virtual ::grpc::Status PutRule(::grpc::ServerContext* context, const ::anduril::communicationsmanager::v1::PutRuleRequest* request, ::anduril::communicationsmanager::v1::PutRuleResponse* response);
    // Streams all rules available to this distribution manager.
    virtual ::grpc::Status StreamRules(::grpc::ServerContext* context, const ::anduril::communicationsmanager::v1::StreamRulesRequest* request, ::grpc::ServerWriter< ::anduril::communicationsmanager::v1::StreamRulesResponse>* writer);
    virtual ::grpc::Status DeleteRule(::grpc::ServerContext* context, const ::anduril::communicationsmanager::v1::DeleteRuleRequest* request, ::anduril::communicationsmanager::v1::DeleteRuleResponse* response);
    // Stream a list of integrations registered with the system. Supports various
    // filters to constrain to specific nodes.
    virtual ::grpc::Status StreamIntegrations(::grpc::ServerContext* context, const ::anduril::communicationsmanager::v1::StreamIntegrationsRequest* request, ::grpc::ServerWriter< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>* writer);
    // Deprecated: Use ListIntegrations instead.
    virtual ::grpc::Status GetIntegrations(::grpc::ServerContext* context, const ::anduril::communicationsmanager::v1::GetIntegrationsRequest* request, ::anduril::communicationsmanager::v1::GetIntegrationsResponse* response);
    virtual ::grpc::Status IntegrationHealthUpdate(::grpc::ServerContext* context, const ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest* request, ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_PutRule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PutRule() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_PutRule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutRule(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::PutRuleRequest* /*request*/, ::anduril::communicationsmanager::v1::PutRuleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutRule(::grpc::ServerContext* context, ::anduril::communicationsmanager::v1::PutRuleRequest* request, ::grpc::ServerAsyncResponseWriter< ::anduril::communicationsmanager::v1::PutRuleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamRules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamRules() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StreamRules() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamRules(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::StreamRulesRequest* /*request*/, ::grpc::ServerWriter< ::anduril::communicationsmanager::v1::StreamRulesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamRules(::grpc::ServerContext* context, ::anduril::communicationsmanager::v1::StreamRulesRequest* request, ::grpc::ServerAsyncWriter< ::anduril::communicationsmanager::v1::StreamRulesResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteRule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteRule() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteRule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRule(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::DeleteRuleRequest* /*request*/, ::anduril::communicationsmanager::v1::DeleteRuleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRule(::grpc::ServerContext* context, ::anduril::communicationsmanager::v1::DeleteRuleRequest* request, ::grpc::ServerAsyncResponseWriter< ::anduril::communicationsmanager::v1::DeleteRuleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamIntegrations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamIntegrations() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_StreamIntegrations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamIntegrations(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::StreamIntegrationsRequest* /*request*/, ::grpc::ServerWriter< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamIntegrations(::grpc::ServerContext* context, ::anduril::communicationsmanager::v1::StreamIntegrationsRequest* request, ::grpc::ServerAsyncWriter< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetIntegrations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetIntegrations() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetIntegrations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIntegrations(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::GetIntegrationsRequest* /*request*/, ::anduril::communicationsmanager::v1::GetIntegrationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIntegrations(::grpc::ServerContext* context, ::anduril::communicationsmanager::v1::GetIntegrationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::anduril::communicationsmanager::v1::GetIntegrationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IntegrationHealthUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IntegrationHealthUpdate() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_IntegrationHealthUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IntegrationHealthUpdate(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest* /*request*/, ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIntegrationHealthUpdate(::grpc::ServerContext* context, ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_PutRule<WithAsyncMethod_StreamRules<WithAsyncMethod_DeleteRule<WithAsyncMethod_StreamIntegrations<WithAsyncMethod_GetIntegrations<WithAsyncMethod_IntegrationHealthUpdate<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_PutRule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PutRule() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::anduril::communicationsmanager::v1::PutRuleRequest, ::anduril::communicationsmanager::v1::PutRuleResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::anduril::communicationsmanager::v1::PutRuleRequest* request, ::anduril::communicationsmanager::v1::PutRuleResponse* response) { return this->PutRule(context, request, response); }));}
    void SetMessageAllocatorFor_PutRule(
        ::grpc::MessageAllocator< ::anduril::communicationsmanager::v1::PutRuleRequest, ::anduril::communicationsmanager::v1::PutRuleResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::anduril::communicationsmanager::v1::PutRuleRequest, ::anduril::communicationsmanager::v1::PutRuleResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PutRule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutRule(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::PutRuleRequest* /*request*/, ::anduril::communicationsmanager::v1::PutRuleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PutRule(
      ::grpc::CallbackServerContext* /*context*/, const ::anduril::communicationsmanager::v1::PutRuleRequest* /*request*/, ::anduril::communicationsmanager::v1::PutRuleResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamRules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamRules() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::anduril::communicationsmanager::v1::StreamRulesRequest, ::anduril::communicationsmanager::v1::StreamRulesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::anduril::communicationsmanager::v1::StreamRulesRequest* request) { return this->StreamRules(context, request); }));
    }
    ~WithCallbackMethod_StreamRules() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamRules(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::StreamRulesRequest* /*request*/, ::grpc::ServerWriter< ::anduril::communicationsmanager::v1::StreamRulesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::anduril::communicationsmanager::v1::StreamRulesResponse>* StreamRules(
      ::grpc::CallbackServerContext* /*context*/, const ::anduril::communicationsmanager::v1::StreamRulesRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteRule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteRule() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::anduril::communicationsmanager::v1::DeleteRuleRequest, ::anduril::communicationsmanager::v1::DeleteRuleResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::anduril::communicationsmanager::v1::DeleteRuleRequest* request, ::anduril::communicationsmanager::v1::DeleteRuleResponse* response) { return this->DeleteRule(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteRule(
        ::grpc::MessageAllocator< ::anduril::communicationsmanager::v1::DeleteRuleRequest, ::anduril::communicationsmanager::v1::DeleteRuleResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::anduril::communicationsmanager::v1::DeleteRuleRequest, ::anduril::communicationsmanager::v1::DeleteRuleResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteRule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRule(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::DeleteRuleRequest* /*request*/, ::anduril::communicationsmanager::v1::DeleteRuleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteRule(
      ::grpc::CallbackServerContext* /*context*/, const ::anduril::communicationsmanager::v1::DeleteRuleRequest* /*request*/, ::anduril::communicationsmanager::v1::DeleteRuleResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamIntegrations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamIntegrations() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::anduril::communicationsmanager::v1::StreamIntegrationsRequest, ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::anduril::communicationsmanager::v1::StreamIntegrationsRequest* request) { return this->StreamIntegrations(context, request); }));
    }
    ~WithCallbackMethod_StreamIntegrations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamIntegrations(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::StreamIntegrationsRequest* /*request*/, ::grpc::ServerWriter< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>* StreamIntegrations(
      ::grpc::CallbackServerContext* /*context*/, const ::anduril::communicationsmanager::v1::StreamIntegrationsRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetIntegrations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetIntegrations() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::anduril::communicationsmanager::v1::GetIntegrationsRequest, ::anduril::communicationsmanager::v1::GetIntegrationsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::anduril::communicationsmanager::v1::GetIntegrationsRequest* request, ::anduril::communicationsmanager::v1::GetIntegrationsResponse* response) { return this->GetIntegrations(context, request, response); }));}
    void SetMessageAllocatorFor_GetIntegrations(
        ::grpc::MessageAllocator< ::anduril::communicationsmanager::v1::GetIntegrationsRequest, ::anduril::communicationsmanager::v1::GetIntegrationsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::anduril::communicationsmanager::v1::GetIntegrationsRequest, ::anduril::communicationsmanager::v1::GetIntegrationsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetIntegrations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIntegrations(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::GetIntegrationsRequest* /*request*/, ::anduril::communicationsmanager::v1::GetIntegrationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetIntegrations(
      ::grpc::CallbackServerContext* /*context*/, const ::anduril::communicationsmanager::v1::GetIntegrationsRequest* /*request*/, ::anduril::communicationsmanager::v1::GetIntegrationsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_IntegrationHealthUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_IntegrationHealthUpdate() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest, ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest* request, ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse* response) { return this->IntegrationHealthUpdate(context, request, response); }));}
    void SetMessageAllocatorFor_IntegrationHealthUpdate(
        ::grpc::MessageAllocator< ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest, ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest, ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_IntegrationHealthUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IntegrationHealthUpdate(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest* /*request*/, ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IntegrationHealthUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest* /*request*/, ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_PutRule<WithCallbackMethod_StreamRules<WithCallbackMethod_DeleteRule<WithCallbackMethod_StreamIntegrations<WithCallbackMethod_GetIntegrations<WithCallbackMethod_IntegrationHealthUpdate<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_PutRule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PutRule() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_PutRule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutRule(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::PutRuleRequest* /*request*/, ::anduril::communicationsmanager::v1::PutRuleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamRules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamRules() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StreamRules() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamRules(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::StreamRulesRequest* /*request*/, ::grpc::ServerWriter< ::anduril::communicationsmanager::v1::StreamRulesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteRule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteRule() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteRule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRule(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::DeleteRuleRequest* /*request*/, ::anduril::communicationsmanager::v1::DeleteRuleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamIntegrations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamIntegrations() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_StreamIntegrations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamIntegrations(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::StreamIntegrationsRequest* /*request*/, ::grpc::ServerWriter< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetIntegrations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetIntegrations() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetIntegrations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIntegrations(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::GetIntegrationsRequest* /*request*/, ::anduril::communicationsmanager::v1::GetIntegrationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IntegrationHealthUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IntegrationHealthUpdate() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_IntegrationHealthUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IntegrationHealthUpdate(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest* /*request*/, ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_PutRule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PutRule() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_PutRule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutRule(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::PutRuleRequest* /*request*/, ::anduril::communicationsmanager::v1::PutRuleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutRule(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamRules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamRules() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_StreamRules() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamRules(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::StreamRulesRequest* /*request*/, ::grpc::ServerWriter< ::anduril::communicationsmanager::v1::StreamRulesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamRules(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteRule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteRule() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeleteRule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRule(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::DeleteRuleRequest* /*request*/, ::anduril::communicationsmanager::v1::DeleteRuleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRule(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamIntegrations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamIntegrations() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_StreamIntegrations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamIntegrations(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::StreamIntegrationsRequest* /*request*/, ::grpc::ServerWriter< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamIntegrations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetIntegrations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetIntegrations() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetIntegrations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIntegrations(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::GetIntegrationsRequest* /*request*/, ::anduril::communicationsmanager::v1::GetIntegrationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIntegrations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IntegrationHealthUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IntegrationHealthUpdate() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_IntegrationHealthUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IntegrationHealthUpdate(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest* /*request*/, ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIntegrationHealthUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PutRule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PutRule() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PutRule(context, request, response); }));
    }
    ~WithRawCallbackMethod_PutRule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutRule(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::PutRuleRequest* /*request*/, ::anduril::communicationsmanager::v1::PutRuleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PutRule(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamRules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamRules() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamRules(context, request); }));
    }
    ~WithRawCallbackMethod_StreamRules() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamRules(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::StreamRulesRequest* /*request*/, ::grpc::ServerWriter< ::anduril::communicationsmanager::v1::StreamRulesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamRules(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteRule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteRule() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteRule(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteRule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRule(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::DeleteRuleRequest* /*request*/, ::anduril::communicationsmanager::v1::DeleteRuleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteRule(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamIntegrations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamIntegrations() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamIntegrations(context, request); }));
    }
    ~WithRawCallbackMethod_StreamIntegrations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamIntegrations(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::StreamIntegrationsRequest* /*request*/, ::grpc::ServerWriter< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamIntegrations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetIntegrations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetIntegrations() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetIntegrations(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetIntegrations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIntegrations(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::GetIntegrationsRequest* /*request*/, ::anduril::communicationsmanager::v1::GetIntegrationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetIntegrations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_IntegrationHealthUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_IntegrationHealthUpdate() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IntegrationHealthUpdate(context, request, response); }));
    }
    ~WithRawCallbackMethod_IntegrationHealthUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IntegrationHealthUpdate(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest* /*request*/, ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IntegrationHealthUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PutRule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PutRule() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::anduril::communicationsmanager::v1::PutRuleRequest, ::anduril::communicationsmanager::v1::PutRuleResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::anduril::communicationsmanager::v1::PutRuleRequest, ::anduril::communicationsmanager::v1::PutRuleResponse>* streamer) {
                       return this->StreamedPutRule(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PutRule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PutRule(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::PutRuleRequest* /*request*/, ::anduril::communicationsmanager::v1::PutRuleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPutRule(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::anduril::communicationsmanager::v1::PutRuleRequest,::anduril::communicationsmanager::v1::PutRuleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteRule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteRule() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::anduril::communicationsmanager::v1::DeleteRuleRequest, ::anduril::communicationsmanager::v1::DeleteRuleResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::anduril::communicationsmanager::v1::DeleteRuleRequest, ::anduril::communicationsmanager::v1::DeleteRuleResponse>* streamer) {
                       return this->StreamedDeleteRule(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteRule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteRule(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::DeleteRuleRequest* /*request*/, ::anduril::communicationsmanager::v1::DeleteRuleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteRule(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::anduril::communicationsmanager::v1::DeleteRuleRequest,::anduril::communicationsmanager::v1::DeleteRuleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetIntegrations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetIntegrations() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::anduril::communicationsmanager::v1::GetIntegrationsRequest, ::anduril::communicationsmanager::v1::GetIntegrationsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::anduril::communicationsmanager::v1::GetIntegrationsRequest, ::anduril::communicationsmanager::v1::GetIntegrationsResponse>* streamer) {
                       return this->StreamedGetIntegrations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetIntegrations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetIntegrations(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::GetIntegrationsRequest* /*request*/, ::anduril::communicationsmanager::v1::GetIntegrationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetIntegrations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::anduril::communicationsmanager::v1::GetIntegrationsRequest,::anduril::communicationsmanager::v1::GetIntegrationsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IntegrationHealthUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IntegrationHealthUpdate() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest, ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest, ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse>* streamer) {
                       return this->StreamedIntegrationHealthUpdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IntegrationHealthUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IntegrationHealthUpdate(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest* /*request*/, ::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIntegrationHealthUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::anduril::communicationsmanager::v1::IntegrationHealthUpdateRequest,::anduril::communicationsmanager::v1::IntegrationHealthUpdateResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_PutRule<WithStreamedUnaryMethod_DeleteRule<WithStreamedUnaryMethod_GetIntegrations<WithStreamedUnaryMethod_IntegrationHealthUpdate<Service > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamRules : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamRules() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::anduril::communicationsmanager::v1::StreamRulesRequest, ::anduril::communicationsmanager::v1::StreamRulesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::anduril::communicationsmanager::v1::StreamRulesRequest, ::anduril::communicationsmanager::v1::StreamRulesResponse>* streamer) {
                       return this->StreamedStreamRules(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamRules() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamRules(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::StreamRulesRequest* /*request*/, ::grpc::ServerWriter< ::anduril::communicationsmanager::v1::StreamRulesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamRules(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::anduril::communicationsmanager::v1::StreamRulesRequest,::anduril::communicationsmanager::v1::StreamRulesResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamIntegrations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamIntegrations() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::anduril::communicationsmanager::v1::StreamIntegrationsRequest, ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::anduril::communicationsmanager::v1::StreamIntegrationsRequest, ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>* streamer) {
                       return this->StreamedStreamIntegrations(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamIntegrations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamIntegrations(::grpc::ServerContext* /*context*/, const ::anduril::communicationsmanager::v1::StreamIntegrationsRequest* /*request*/, ::grpc::ServerWriter< ::anduril::communicationsmanager::v1::StreamIntegrationsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamIntegrations(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::anduril::communicationsmanager::v1::StreamIntegrationsRequest,::anduril::communicationsmanager::v1::StreamIntegrationsResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StreamRules<WithSplitStreamingMethod_StreamIntegrations<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_PutRule<WithSplitStreamingMethod_StreamRules<WithStreamedUnaryMethod_DeleteRule<WithSplitStreamingMethod_StreamIntegrations<WithStreamedUnaryMethod_GetIntegrations<WithStreamedUnaryMethod_IntegrationHealthUpdate<Service > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace communicationsmanager
}  // namespace anduril


#endif  // GRPC_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto__INCLUDED
