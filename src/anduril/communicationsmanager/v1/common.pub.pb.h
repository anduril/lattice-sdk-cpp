// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: anduril/communicationsmanager/v1/common.pub.proto
// Protobuf C++ Version: 5.27.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_anduril_2fcommunicationsmanager_2fv1_2fcommon_2epub_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_anduril_2fcommunicationsmanager_2fv1_2fcommon_2epub_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "anduril/blobs/v1/filter.pub.pb.h"
#include "anduril/communicationsmanager/v1/cross_domain.pub.pb.h"
#include "anduril/communicationsmanager/v1/entity.pub.pb.h"
#include "anduril/entitymanager/v1/filter.pub.pb.h"
#include "anduril/entitymanager/v1/filter_dynamic.pub.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_anduril_2fcommunicationsmanager_2fv1_2fcommon_2epub_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_anduril_2fcommunicationsmanager_2fv1_2fcommon_2epub_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_anduril_2fcommunicationsmanager_2fv1_2fcommon_2epub_2eproto;
namespace anduril {
namespace communicationsmanager {
namespace v1 {
class BlobDistributionRuleDetails;
struct BlobDistributionRuleDetailsDefaultTypeInternal;
extern BlobDistributionRuleDetailsDefaultTypeInternal _BlobDistributionRuleDetails_default_instance_;
class CommunicationsManagerError;
struct CommunicationsManagerErrorDefaultTypeInternal;
extern CommunicationsManagerErrorDefaultTypeInternal _CommunicationsManagerError_default_instance_;
class CrossDomainRule;
struct CrossDomainRuleDefaultTypeInternal;
extern CrossDomainRuleDefaultTypeInternal _CrossDomainRule_default_instance_;
class Destination;
struct DestinationDefaultTypeInternal;
extern DestinationDefaultTypeInternal _Destination_default_instance_;
class DistributionRule;
struct DistributionRuleDefaultTypeInternal;
extern DistributionRuleDefaultTypeInternal _DistributionRule_default_instance_;
class DistributionRuleEvent;
struct DistributionRuleEventDefaultTypeInternal;
extern DistributionRuleEventDefaultTypeInternal _DistributionRuleEvent_default_instance_;
class EntityDistributionRuleDetails;
struct EntityDistributionRuleDetailsDefaultTypeInternal;
extern EntityDistributionRuleDetailsDefaultTypeInternal _EntityDistributionRuleDetails_default_instance_;
class InboundRuleSourceDestination;
struct InboundRuleSourceDestinationDefaultTypeInternal;
extern InboundRuleSourceDestinationDefaultTypeInternal _InboundRuleSourceDestination_default_instance_;
class IntegrationRule;
struct IntegrationRuleDefaultTypeInternal;
extern IntegrationRuleDefaultTypeInternal _IntegrationRule_default_instance_;
class OutboundRuleSourceDestination;
struct OutboundRuleSourceDestinationDefaultTypeInternal;
extern OutboundRuleSourceDestinationDefaultTypeInternal _OutboundRuleSourceDestination_default_instance_;
class Rule;
struct RuleDefaultTypeInternal;
extern RuleDefaultTypeInternal _Rule_default_instance_;
class RuleEvent;
struct RuleEventDefaultTypeInternal;
extern RuleEventDefaultTypeInternal _RuleEvent_default_instance_;
class Source;
struct SourceDefaultTypeInternal;
extern SourceDefaultTypeInternal _Source_default_instance_;
class SourceDestinationDirectionalControl;
struct SourceDestinationDirectionalControlDefaultTypeInternal;
extern SourceDestinationDirectionalControlDefaultTypeInternal _SourceDestinationDirectionalControl_default_instance_;
}  // namespace v1
}  // namespace communicationsmanager
}  // namespace anduril
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace anduril {
namespace communicationsmanager {
namespace v1 {
enum EventType : int {
  EVENT_TYPE_INVALID = 0,
  EVENT_TYPE_CREATED = 1,
  EVENT_TYPE_UPDATE = 2,
  EVENT_TYPE_DELETED = 3,
  EVENT_TYPE_PREEXISTING = 4,
  EventType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  EventType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool EventType_IsValid(int value);
extern const uint32_t EventType_internal_data_[];
constexpr EventType EventType_MIN = static_cast<EventType>(0);
constexpr EventType EventType_MAX = static_cast<EventType>(4);
constexpr int EventType_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
EventType_descriptor();
template <typename T>
const std::string& EventType_Name(T value) {
  static_assert(std::is_same<T, EventType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EventType_Name().");
  return EventType_Name(static_cast<EventType>(value));
}
template <>
inline const std::string& EventType_Name(EventType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<EventType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool EventType_Parse(absl::string_view name, EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EventType>(
      EventType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Source final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.communicationsmanager.v1.Source) */ {
 public:
  inline Source() : Source(nullptr) {}
  ~Source() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Source(
      ::google::protobuf::internal::ConstantInitialized);

  inline Source(const Source& from) : Source(nullptr, from) {}
  inline Source(Source&& from) noexcept
      : Source(nullptr, std::move(from)) {}
  inline Source& operator=(const Source& from) {
    CopyFrom(from);
    return *this;
  }
  inline Source& operator=(Source&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Source& default_instance() {
    return *internal_default_instance();
  }
  enum SourceCase {
    kAssetId = 1,
    kAll = 2,
    kHostId = 3,
    SOURCE_NOT_SET = 0,
  };
  static inline const Source* internal_default_instance() {
    return reinterpret_cast<const Source*>(
        &_Source_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(Source& a, Source& b) { a.Swap(&b); }
  inline void Swap(Source* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Source* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Source* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Source>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Source& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Source& from) { Source::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Source* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "anduril.communicationsmanager.v1.Source"; }

 protected:
  explicit Source(::google::protobuf::Arena* arena);
  Source(::google::protobuf::Arena* arena, const Source& from);
  Source(::google::protobuf::Arena* arena, Source&& from) noexcept
      : Source(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAssetIdFieldNumber = 1,
    kAllFieldNumber = 2,
    kHostIdFieldNumber = 3,
  };
  // string asset_id = 1 [json_name = "assetId", deprecated = true];
  [[deprecated]]  bool has_asset_id() const;
  [[deprecated]]  void clear_asset_id() ;
  [[deprecated]] const std::string& asset_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_asset_id(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_asset_id();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_asset_id();
  [[deprecated]] void set_allocated_asset_id(std::string* value);

  private:
  const std::string& _internal_asset_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_asset_id(
      const std::string& value);
  std::string* _internal_mutable_asset_id();

  public:
  // bool all = 2 [json_name = "all"];
  bool has_all() const;
  void clear_all() ;
  bool all() const;
  void set_all(bool value);

  private:
  bool _internal_all() const;
  void _internal_set_all(bool value);

  public:
  // string host_id = 3 [json_name = "hostId"];
  bool has_host_id() const;
  void clear_host_id() ;
  const std::string& host_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_host_id(Arg_&& arg, Args_... args);
  std::string* mutable_host_id();
  PROTOBUF_NODISCARD std::string* release_host_id();
  void set_allocated_host_id(std::string* value);

  private:
  const std::string& _internal_host_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host_id(
      const std::string& value);
  std::string* _internal_mutable_host_id();

  public:
  void clear_source();
  SourceCase source_case() const;
  // @@protoc_insertion_point(class_scope:anduril.communicationsmanager.v1.Source)
 private:
  class _Internal;
  void set_has_asset_id();
  void set_has_all();
  void set_has_host_id();
  inline bool has_source() const;
  inline void clear_has_source();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 3, 0,
      63, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Source_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Source& from_msg);
    union SourceUnion {
      constexpr SourceUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr asset_id_;
      bool all_;
      ::google::protobuf::internal::ArenaStringPtr host_id_;
    } source_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fcommunicationsmanager_2fv1_2fcommon_2epub_2eproto;
};
// -------------------------------------------------------------------

class Destination final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.communicationsmanager.v1.Destination) */ {
 public:
  inline Destination() : Destination(nullptr) {}
  ~Destination() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Destination(
      ::google::protobuf::internal::ConstantInitialized);

  inline Destination(const Destination& from) : Destination(nullptr, from) {}
  inline Destination(Destination&& from) noexcept
      : Destination(nullptr, std::move(from)) {}
  inline Destination& operator=(const Destination& from) {
    CopyFrom(from);
    return *this;
  }
  inline Destination& operator=(Destination&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Destination& default_instance() {
    return *internal_default_instance();
  }
  enum DestinationCase {
    kAssetId = 1,
    kHostId = 2,
    kAll = 3,
    DESTINATION_NOT_SET = 0,
  };
  static inline const Destination* internal_default_instance() {
    return reinterpret_cast<const Destination*>(
        &_Destination_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(Destination& a, Destination& b) { a.Swap(&b); }
  inline void Swap(Destination* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Destination* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Destination* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Destination>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Destination& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Destination& from) { Destination::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Destination* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "anduril.communicationsmanager.v1.Destination"; }

 protected:
  explicit Destination(::google::protobuf::Arena* arena);
  Destination(::google::protobuf::Arena* arena, const Destination& from);
  Destination(::google::protobuf::Arena* arena, Destination&& from) noexcept
      : Destination(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAssetIdFieldNumber = 1,
    kHostIdFieldNumber = 2,
    kAllFieldNumber = 3,
  };
  // string asset_id = 1 [json_name = "assetId", deprecated = true];
  [[deprecated]]  bool has_asset_id() const;
  [[deprecated]]  void clear_asset_id() ;
  [[deprecated]] const std::string& asset_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_asset_id(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_asset_id();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_asset_id();
  [[deprecated]] void set_allocated_asset_id(std::string* value);

  private:
  const std::string& _internal_asset_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_asset_id(
      const std::string& value);
  std::string* _internal_mutable_asset_id();

  public:
  // string host_id = 2 [json_name = "hostId"];
  bool has_host_id() const;
  void clear_host_id() ;
  const std::string& host_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_host_id(Arg_&& arg, Args_... args);
  std::string* mutable_host_id();
  PROTOBUF_NODISCARD std::string* release_host_id();
  void set_allocated_host_id(std::string* value);

  private:
  const std::string& _internal_host_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host_id(
      const std::string& value);
  std::string* _internal_mutable_host_id();

  public:
  // bool all = 3 [json_name = "all"];
  bool has_all() const;
  void clear_all() ;
  bool all() const;
  void set_all(bool value);

  private:
  bool _internal_all() const;
  void _internal_set_all(bool value);

  public:
  void clear_destination();
  DestinationCase destination_case() const;
  // @@protoc_insertion_point(class_scope:anduril.communicationsmanager.v1.Destination)
 private:
  class _Internal;
  void set_has_asset_id();
  void set_has_host_id();
  void set_has_all();
  inline bool has_destination() const;
  inline void clear_has_destination();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 3, 0,
      68, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Destination_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Destination& from_msg);
    union DestinationUnion {
      constexpr DestinationUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr asset_id_;
      ::google::protobuf::internal::ArenaStringPtr host_id_;
      bool all_;
    } destination_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fcommunicationsmanager_2fv1_2fcommon_2epub_2eproto;
};
// -------------------------------------------------------------------

class CommunicationsManagerError final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.communicationsmanager.v1.CommunicationsManagerError) */ {
 public:
  inline CommunicationsManagerError() : CommunicationsManagerError(nullptr) {}
  ~CommunicationsManagerError() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CommunicationsManagerError(
      ::google::protobuf::internal::ConstantInitialized);

  inline CommunicationsManagerError(const CommunicationsManagerError& from) : CommunicationsManagerError(nullptr, from) {}
  inline CommunicationsManagerError(CommunicationsManagerError&& from) noexcept
      : CommunicationsManagerError(nullptr, std::move(from)) {}
  inline CommunicationsManagerError& operator=(const CommunicationsManagerError& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommunicationsManagerError& operator=(CommunicationsManagerError&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommunicationsManagerError& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommunicationsManagerError* internal_default_instance() {
    return reinterpret_cast<const CommunicationsManagerError*>(
        &_CommunicationsManagerError_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(CommunicationsManagerError& a, CommunicationsManagerError& b) { a.Swap(&b); }
  inline void Swap(CommunicationsManagerError* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommunicationsManagerError* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommunicationsManagerError* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<CommunicationsManagerError>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CommunicationsManagerError& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CommunicationsManagerError& from) { CommunicationsManagerError::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CommunicationsManagerError* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "anduril.communicationsmanager.v1.CommunicationsManagerError"; }

 protected:
  explicit CommunicationsManagerError(::google::protobuf::Arena* arena);
  CommunicationsManagerError(::google::protobuf::Arena* arena, const CommunicationsManagerError& from);
  CommunicationsManagerError(::google::protobuf::Arena* arena, CommunicationsManagerError&& from) noexcept
      : CommunicationsManagerError(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1 [json_name = "message"];
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // @@protoc_insertion_point(class_scope:anduril.communicationsmanager.v1.CommunicationsManagerError)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      75, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_CommunicationsManagerError_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CommunicationsManagerError& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fcommunicationsmanager_2fv1_2fcommon_2epub_2eproto;
};
// -------------------------------------------------------------------

class OutboundRuleSourceDestination final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.communicationsmanager.v1.OutboundRuleSourceDestination) */ {
 public:
  inline OutboundRuleSourceDestination() : OutboundRuleSourceDestination(nullptr) {}
  ~OutboundRuleSourceDestination() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OutboundRuleSourceDestination(
      ::google::protobuf::internal::ConstantInitialized);

  inline OutboundRuleSourceDestination(const OutboundRuleSourceDestination& from) : OutboundRuleSourceDestination(nullptr, from) {}
  inline OutboundRuleSourceDestination(OutboundRuleSourceDestination&& from) noexcept
      : OutboundRuleSourceDestination(nullptr, std::move(from)) {}
  inline OutboundRuleSourceDestination& operator=(const OutboundRuleSourceDestination& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutboundRuleSourceDestination& operator=(OutboundRuleSourceDestination&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutboundRuleSourceDestination& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutboundRuleSourceDestination* internal_default_instance() {
    return reinterpret_cast<const OutboundRuleSourceDestination*>(
        &_OutboundRuleSourceDestination_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(OutboundRuleSourceDestination& a, OutboundRuleSourceDestination& b) { a.Swap(&b); }
  inline void Swap(OutboundRuleSourceDestination* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutboundRuleSourceDestination* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OutboundRuleSourceDestination* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<OutboundRuleSourceDestination>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OutboundRuleSourceDestination& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OutboundRuleSourceDestination& from) { OutboundRuleSourceDestination::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OutboundRuleSourceDestination* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "anduril.communicationsmanager.v1.OutboundRuleSourceDestination"; }

 protected:
  explicit OutboundRuleSourceDestination(::google::protobuf::Arena* arena);
  OutboundRuleSourceDestination(::google::protobuf::Arena* arena, const OutboundRuleSourceDestination& from);
  OutboundRuleSourceDestination(::google::protobuf::Arena* arena, OutboundRuleSourceDestination&& from) noexcept
      : OutboundRuleSourceDestination(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDestinationsFieldNumber = 2,
    kSourceFieldNumber = 1,
  };
  // repeated .anduril.communicationsmanager.v1.Destination destinations = 2 [json_name = "destinations"];
  int destinations_size() const;
  private:
  int _internal_destinations_size() const;

  public:
  void clear_destinations() ;
  ::anduril::communicationsmanager::v1::Destination* mutable_destinations(int index);
  ::google::protobuf::RepeatedPtrField<::anduril::communicationsmanager::v1::Destination>* mutable_destinations();

  private:
  const ::google::protobuf::RepeatedPtrField<::anduril::communicationsmanager::v1::Destination>& _internal_destinations() const;
  ::google::protobuf::RepeatedPtrField<::anduril::communicationsmanager::v1::Destination>* _internal_mutable_destinations();
  public:
  const ::anduril::communicationsmanager::v1::Destination& destinations(int index) const;
  ::anduril::communicationsmanager::v1::Destination* add_destinations();
  const ::google::protobuf::RepeatedPtrField<::anduril::communicationsmanager::v1::Destination>& destinations() const;
  // .anduril.communicationsmanager.v1.Source source = 1 [json_name = "source"];
  bool has_source() const;
  void clear_source() ;
  const ::anduril::communicationsmanager::v1::Source& source() const;
  PROTOBUF_NODISCARD ::anduril::communicationsmanager::v1::Source* release_source();
  ::anduril::communicationsmanager::v1::Source* mutable_source();
  void set_allocated_source(::anduril::communicationsmanager::v1::Source* value);
  void unsafe_arena_set_allocated_source(::anduril::communicationsmanager::v1::Source* value);
  ::anduril::communicationsmanager::v1::Source* unsafe_arena_release_source();

  private:
  const ::anduril::communicationsmanager::v1::Source& _internal_source() const;
  ::anduril::communicationsmanager::v1::Source* _internal_mutable_source();

  public:
  // @@protoc_insertion_point(class_scope:anduril.communicationsmanager.v1.OutboundRuleSourceDestination)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_OutboundRuleSourceDestination_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OutboundRuleSourceDestination& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::anduril::communicationsmanager::v1::Destination > destinations_;
    ::anduril::communicationsmanager::v1::Source* source_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fcommunicationsmanager_2fv1_2fcommon_2epub_2eproto;
};
// -------------------------------------------------------------------

class InboundRuleSourceDestination final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.communicationsmanager.v1.InboundRuleSourceDestination) */ {
 public:
  inline InboundRuleSourceDestination() : InboundRuleSourceDestination(nullptr) {}
  ~InboundRuleSourceDestination() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR InboundRuleSourceDestination(
      ::google::protobuf::internal::ConstantInitialized);

  inline InboundRuleSourceDestination(const InboundRuleSourceDestination& from) : InboundRuleSourceDestination(nullptr, from) {}
  inline InboundRuleSourceDestination(InboundRuleSourceDestination&& from) noexcept
      : InboundRuleSourceDestination(nullptr, std::move(from)) {}
  inline InboundRuleSourceDestination& operator=(const InboundRuleSourceDestination& from) {
    CopyFrom(from);
    return *this;
  }
  inline InboundRuleSourceDestination& operator=(InboundRuleSourceDestination&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InboundRuleSourceDestination& default_instance() {
    return *internal_default_instance();
  }
  static inline const InboundRuleSourceDestination* internal_default_instance() {
    return reinterpret_cast<const InboundRuleSourceDestination*>(
        &_InboundRuleSourceDestination_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(InboundRuleSourceDestination& a, InboundRuleSourceDestination& b) { a.Swap(&b); }
  inline void Swap(InboundRuleSourceDestination* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InboundRuleSourceDestination* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InboundRuleSourceDestination* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<InboundRuleSourceDestination>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InboundRuleSourceDestination& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const InboundRuleSourceDestination& from) { InboundRuleSourceDestination::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(InboundRuleSourceDestination* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "anduril.communicationsmanager.v1.InboundRuleSourceDestination"; }

 protected:
  explicit InboundRuleSourceDestination(::google::protobuf::Arena* arena);
  InboundRuleSourceDestination(::google::protobuf::Arena* arena, const InboundRuleSourceDestination& from);
  InboundRuleSourceDestination(::google::protobuf::Arena* arena, InboundRuleSourceDestination&& from) noexcept
      : InboundRuleSourceDestination(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSourcesFieldNumber = 1,
    kDestinationFieldNumber = 2,
  };
  // repeated .anduril.communicationsmanager.v1.Source sources = 1 [json_name = "sources"];
  int sources_size() const;
  private:
  int _internal_sources_size() const;

  public:
  void clear_sources() ;
  ::anduril::communicationsmanager::v1::Source* mutable_sources(int index);
  ::google::protobuf::RepeatedPtrField<::anduril::communicationsmanager::v1::Source>* mutable_sources();

  private:
  const ::google::protobuf::RepeatedPtrField<::anduril::communicationsmanager::v1::Source>& _internal_sources() const;
  ::google::protobuf::RepeatedPtrField<::anduril::communicationsmanager::v1::Source>* _internal_mutable_sources();
  public:
  const ::anduril::communicationsmanager::v1::Source& sources(int index) const;
  ::anduril::communicationsmanager::v1::Source* add_sources();
  const ::google::protobuf::RepeatedPtrField<::anduril::communicationsmanager::v1::Source>& sources() const;
  // .anduril.communicationsmanager.v1.Destination destination = 2 [json_name = "destination"];
  bool has_destination() const;
  void clear_destination() ;
  const ::anduril::communicationsmanager::v1::Destination& destination() const;
  PROTOBUF_NODISCARD ::anduril::communicationsmanager::v1::Destination* release_destination();
  ::anduril::communicationsmanager::v1::Destination* mutable_destination();
  void set_allocated_destination(::anduril::communicationsmanager::v1::Destination* value);
  void unsafe_arena_set_allocated_destination(::anduril::communicationsmanager::v1::Destination* value);
  ::anduril::communicationsmanager::v1::Destination* unsafe_arena_release_destination();

  private:
  const ::anduril::communicationsmanager::v1::Destination& _internal_destination() const;
  ::anduril::communicationsmanager::v1::Destination* _internal_mutable_destination();

  public:
  // @@protoc_insertion_point(class_scope:anduril.communicationsmanager.v1.InboundRuleSourceDestination)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_InboundRuleSourceDestination_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const InboundRuleSourceDestination& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::anduril::communicationsmanager::v1::Source > sources_;
    ::anduril::communicationsmanager::v1::Destination* destination_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fcommunicationsmanager_2fv1_2fcommon_2epub_2eproto;
};
// -------------------------------------------------------------------

class SourceDestinationDirectionalControl final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.communicationsmanager.v1.SourceDestinationDirectionalControl) */ {
 public:
  inline SourceDestinationDirectionalControl() : SourceDestinationDirectionalControl(nullptr) {}
  ~SourceDestinationDirectionalControl() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SourceDestinationDirectionalControl(
      ::google::protobuf::internal::ConstantInitialized);

  inline SourceDestinationDirectionalControl(const SourceDestinationDirectionalControl& from) : SourceDestinationDirectionalControl(nullptr, from) {}
  inline SourceDestinationDirectionalControl(SourceDestinationDirectionalControl&& from) noexcept
      : SourceDestinationDirectionalControl(nullptr, std::move(from)) {}
  inline SourceDestinationDirectionalControl& operator=(const SourceDestinationDirectionalControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourceDestinationDirectionalControl& operator=(SourceDestinationDirectionalControl&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SourceDestinationDirectionalControl& default_instance() {
    return *internal_default_instance();
  }
  enum SourceDestinationCase {
    kInboundRuleSourceDestination = 1,
    kOutboundRuleSourceDestination = 2,
    SOURCE_DESTINATION_NOT_SET = 0,
  };
  static inline const SourceDestinationDirectionalControl* internal_default_instance() {
    return reinterpret_cast<const SourceDestinationDirectionalControl*>(
        &_SourceDestinationDirectionalControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(SourceDestinationDirectionalControl& a, SourceDestinationDirectionalControl& b) { a.Swap(&b); }
  inline void Swap(SourceDestinationDirectionalControl* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SourceDestinationDirectionalControl* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SourceDestinationDirectionalControl* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SourceDestinationDirectionalControl>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SourceDestinationDirectionalControl& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SourceDestinationDirectionalControl& from) { SourceDestinationDirectionalControl::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SourceDestinationDirectionalControl* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "anduril.communicationsmanager.v1.SourceDestinationDirectionalControl"; }

 protected:
  explicit SourceDestinationDirectionalControl(::google::protobuf::Arena* arena);
  SourceDestinationDirectionalControl(::google::protobuf::Arena* arena, const SourceDestinationDirectionalControl& from);
  SourceDestinationDirectionalControl(::google::protobuf::Arena* arena, SourceDestinationDirectionalControl&& from) noexcept
      : SourceDestinationDirectionalControl(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInboundRuleSourceDestinationFieldNumber = 1,
    kOutboundRuleSourceDestinationFieldNumber = 2,
  };
  // .anduril.communicationsmanager.v1.InboundRuleSourceDestination inbound_rule_source_destination = 1 [json_name = "inboundRuleSourceDestination"];
  bool has_inbound_rule_source_destination() const;
  private:
  bool _internal_has_inbound_rule_source_destination() const;

  public:
  void clear_inbound_rule_source_destination() ;
  const ::anduril::communicationsmanager::v1::InboundRuleSourceDestination& inbound_rule_source_destination() const;
  PROTOBUF_NODISCARD ::anduril::communicationsmanager::v1::InboundRuleSourceDestination* release_inbound_rule_source_destination();
  ::anduril::communicationsmanager::v1::InboundRuleSourceDestination* mutable_inbound_rule_source_destination();
  void set_allocated_inbound_rule_source_destination(::anduril::communicationsmanager::v1::InboundRuleSourceDestination* value);
  void unsafe_arena_set_allocated_inbound_rule_source_destination(::anduril::communicationsmanager::v1::InboundRuleSourceDestination* value);
  ::anduril::communicationsmanager::v1::InboundRuleSourceDestination* unsafe_arena_release_inbound_rule_source_destination();

  private:
  const ::anduril::communicationsmanager::v1::InboundRuleSourceDestination& _internal_inbound_rule_source_destination() const;
  ::anduril::communicationsmanager::v1::InboundRuleSourceDestination* _internal_mutable_inbound_rule_source_destination();

  public:
  // .anduril.communicationsmanager.v1.OutboundRuleSourceDestination outbound_rule_source_destination = 2 [json_name = "outboundRuleSourceDestination"];
  bool has_outbound_rule_source_destination() const;
  private:
  bool _internal_has_outbound_rule_source_destination() const;

  public:
  void clear_outbound_rule_source_destination() ;
  const ::anduril::communicationsmanager::v1::OutboundRuleSourceDestination& outbound_rule_source_destination() const;
  PROTOBUF_NODISCARD ::anduril::communicationsmanager::v1::OutboundRuleSourceDestination* release_outbound_rule_source_destination();
  ::anduril::communicationsmanager::v1::OutboundRuleSourceDestination* mutable_outbound_rule_source_destination();
  void set_allocated_outbound_rule_source_destination(::anduril::communicationsmanager::v1::OutboundRuleSourceDestination* value);
  void unsafe_arena_set_allocated_outbound_rule_source_destination(::anduril::communicationsmanager::v1::OutboundRuleSourceDestination* value);
  ::anduril::communicationsmanager::v1::OutboundRuleSourceDestination* unsafe_arena_release_outbound_rule_source_destination();

  private:
  const ::anduril::communicationsmanager::v1::OutboundRuleSourceDestination& _internal_outbound_rule_source_destination() const;
  ::anduril::communicationsmanager::v1::OutboundRuleSourceDestination* _internal_mutable_outbound_rule_source_destination();

  public:
  void clear_source_destination();
  SourceDestinationCase source_destination_case() const;
  // @@protoc_insertion_point(class_scope:anduril.communicationsmanager.v1.SourceDestinationDirectionalControl)
 private:
  class _Internal;
  void set_has_inbound_rule_source_destination();
  void set_has_outbound_rule_source_destination();
  inline bool has_source_destination() const;
  inline void clear_has_source_destination();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_SourceDestinationDirectionalControl_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SourceDestinationDirectionalControl& from_msg);
    union SourceDestinationUnion {
      constexpr SourceDestinationUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::anduril::communicationsmanager::v1::InboundRuleSourceDestination* inbound_rule_source_destination_;
      ::anduril::communicationsmanager::v1::OutboundRuleSourceDestination* outbound_rule_source_destination_;
    } source_destination_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fcommunicationsmanager_2fv1_2fcommon_2epub_2eproto;
};
// -------------------------------------------------------------------

class BlobDistributionRuleDetails final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.communicationsmanager.v1.BlobDistributionRuleDetails) */ {
 public:
  inline BlobDistributionRuleDetails() : BlobDistributionRuleDetails(nullptr) {}
  ~BlobDistributionRuleDetails() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BlobDistributionRuleDetails(
      ::google::protobuf::internal::ConstantInitialized);

  inline BlobDistributionRuleDetails(const BlobDistributionRuleDetails& from) : BlobDistributionRuleDetails(nullptr, from) {}
  inline BlobDistributionRuleDetails(BlobDistributionRuleDetails&& from) noexcept
      : BlobDistributionRuleDetails(nullptr, std::move(from)) {}
  inline BlobDistributionRuleDetails& operator=(const BlobDistributionRuleDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlobDistributionRuleDetails& operator=(BlobDistributionRuleDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlobDistributionRuleDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlobDistributionRuleDetails* internal_default_instance() {
    return reinterpret_cast<const BlobDistributionRuleDetails*>(
        &_BlobDistributionRuleDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(BlobDistributionRuleDetails& a, BlobDistributionRuleDetails& b) { a.Swap(&b); }
  inline void Swap(BlobDistributionRuleDetails* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlobDistributionRuleDetails* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlobDistributionRuleDetails* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<BlobDistributionRuleDetails>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BlobDistributionRuleDetails& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BlobDistributionRuleDetails& from) { BlobDistributionRuleDetails::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BlobDistributionRuleDetails* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "anduril.communicationsmanager.v1.BlobDistributionRuleDetails"; }

 protected:
  explicit BlobDistributionRuleDetails(::google::protobuf::Arena* arena);
  BlobDistributionRuleDetails(::google::protobuf::Arena* arena, const BlobDistributionRuleDetails& from);
  BlobDistributionRuleDetails(::google::protobuf::Arena* arena, BlobDistributionRuleDetails&& from) noexcept
      : BlobDistributionRuleDetails(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBlobFiltersFieldNumber = 2,
    kBlobFilterFieldNumber = 1,
  };
  // repeated .anduril.blobs.v1.Statement blob_filters = 2 [json_name = "blobFilters"];
  int blob_filters_size() const;
  private:
  int _internal_blob_filters_size() const;

  public:
  void clear_blob_filters() ;
  ::anduril::blobs::v1::Statement* mutable_blob_filters(int index);
  ::google::protobuf::RepeatedPtrField<::anduril::blobs::v1::Statement>* mutable_blob_filters();

  private:
  const ::google::protobuf::RepeatedPtrField<::anduril::blobs::v1::Statement>& _internal_blob_filters() const;
  ::google::protobuf::RepeatedPtrField<::anduril::blobs::v1::Statement>* _internal_mutable_blob_filters();
  public:
  const ::anduril::blobs::v1::Statement& blob_filters(int index) const;
  ::anduril::blobs::v1::Statement* add_blob_filters();
  const ::google::protobuf::RepeatedPtrField<::anduril::blobs::v1::Statement>& blob_filters() const;
  // .anduril.blobs.v1.Statement blob_filter = 1 [json_name = "blobFilter", deprecated = true];
  [[deprecated]]  bool has_blob_filter() const;
  [[deprecated]]  void clear_blob_filter() ;
  [[deprecated]] const ::anduril::blobs::v1::Statement& blob_filter() const;
  [[deprecated]] PROTOBUF_NODISCARD ::anduril::blobs::v1::Statement* release_blob_filter();
  [[deprecated]] ::anduril::blobs::v1::Statement* mutable_blob_filter();
  [[deprecated]] void set_allocated_blob_filter(::anduril::blobs::v1::Statement* value);
  [[deprecated]] void unsafe_arena_set_allocated_blob_filter(::anduril::blobs::v1::Statement* value);
  [[deprecated]] ::anduril::blobs::v1::Statement* unsafe_arena_release_blob_filter();

  private:
  const ::anduril::blobs::v1::Statement& _internal_blob_filter() const;
  ::anduril::blobs::v1::Statement* _internal_mutable_blob_filter();

  public:
  // @@protoc_insertion_point(class_scope:anduril.communicationsmanager.v1.BlobDistributionRuleDetails)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_BlobDistributionRuleDetails_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BlobDistributionRuleDetails& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::anduril::blobs::v1::Statement > blob_filters_;
    ::anduril::blobs::v1::Statement* blob_filter_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fcommunicationsmanager_2fv1_2fcommon_2epub_2eproto;
};
// -------------------------------------------------------------------

class IntegrationRule final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.communicationsmanager.v1.IntegrationRule) */ {
 public:
  inline IntegrationRule() : IntegrationRule(nullptr) {}
  ~IntegrationRule() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IntegrationRule(
      ::google::protobuf::internal::ConstantInitialized);

  inline IntegrationRule(const IntegrationRule& from) : IntegrationRule(nullptr, from) {}
  inline IntegrationRule(IntegrationRule&& from) noexcept
      : IntegrationRule(nullptr, std::move(from)) {}
  inline IntegrationRule& operator=(const IntegrationRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntegrationRule& operator=(IntegrationRule&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IntegrationRule& default_instance() {
    return *internal_default_instance();
  }
  enum DetailsCase {
    kEntityIntegrationRuleDetails = 3,
    kBlobIntegrationRuleDetails = 4,
    DETAILS_NOT_SET = 0,
  };
  static inline const IntegrationRule* internal_default_instance() {
    return reinterpret_cast<const IntegrationRule*>(
        &_IntegrationRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(IntegrationRule& a, IntegrationRule& b) { a.Swap(&b); }
  inline void Swap(IntegrationRule* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntegrationRule* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IntegrationRule* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<IntegrationRule>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IntegrationRule& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const IntegrationRule& from) { IntegrationRule::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IntegrationRule* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "anduril.communicationsmanager.v1.IntegrationRule"; }

 protected:
  explicit IntegrationRule(::google::protobuf::Arena* arena);
  IntegrationRule(::google::protobuf::Arena* arena, const IntegrationRule& from);
  IntegrationRule(::google::protobuf::Arena* arena, IntegrationRule&& from) noexcept
      : IntegrationRule(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIntegrationNameFieldNumber = 1,
    kHostIdFieldNumber = 2,
    kEntityIntegrationRuleDetailsFieldNumber = 3,
    kBlobIntegrationRuleDetailsFieldNumber = 4,
  };
  // string integration_name = 1 [json_name = "integrationName"];
  void clear_integration_name() ;
  const std::string& integration_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_integration_name(Arg_&& arg, Args_... args);
  std::string* mutable_integration_name();
  PROTOBUF_NODISCARD std::string* release_integration_name();
  void set_allocated_integration_name(std::string* value);

  private:
  const std::string& _internal_integration_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_integration_name(
      const std::string& value);
  std::string* _internal_mutable_integration_name();

  public:
  // string host_id = 2 [json_name = "hostId"];
  void clear_host_id() ;
  const std::string& host_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_host_id(Arg_&& arg, Args_... args);
  std::string* mutable_host_id();
  PROTOBUF_NODISCARD std::string* release_host_id();
  void set_allocated_host_id(std::string* value);

  private:
  const std::string& _internal_host_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host_id(
      const std::string& value);
  std::string* _internal_mutable_host_id();

  public:
  // .anduril.communicationsmanager.v1.EntityIntegrationRuleDetails entity_integration_rule_details = 3 [json_name = "entityIntegrationRuleDetails"];
  bool has_entity_integration_rule_details() const;
  private:
  bool _internal_has_entity_integration_rule_details() const;

  public:
  void clear_entity_integration_rule_details() ;
  const ::anduril::communicationsmanager::v1::EntityIntegrationRuleDetails& entity_integration_rule_details() const;
  PROTOBUF_NODISCARD ::anduril::communicationsmanager::v1::EntityIntegrationRuleDetails* release_entity_integration_rule_details();
  ::anduril::communicationsmanager::v1::EntityIntegrationRuleDetails* mutable_entity_integration_rule_details();
  void set_allocated_entity_integration_rule_details(::anduril::communicationsmanager::v1::EntityIntegrationRuleDetails* value);
  void unsafe_arena_set_allocated_entity_integration_rule_details(::anduril::communicationsmanager::v1::EntityIntegrationRuleDetails* value);
  ::anduril::communicationsmanager::v1::EntityIntegrationRuleDetails* unsafe_arena_release_entity_integration_rule_details();

  private:
  const ::anduril::communicationsmanager::v1::EntityIntegrationRuleDetails& _internal_entity_integration_rule_details() const;
  ::anduril::communicationsmanager::v1::EntityIntegrationRuleDetails* _internal_mutable_entity_integration_rule_details();

  public:
  // .anduril.communicationsmanager.v1.BlobDistributionRuleDetails blob_integration_rule_details = 4 [json_name = "blobIntegrationRuleDetails"];
  bool has_blob_integration_rule_details() const;
  private:
  bool _internal_has_blob_integration_rule_details() const;

  public:
  void clear_blob_integration_rule_details() ;
  const ::anduril::communicationsmanager::v1::BlobDistributionRuleDetails& blob_integration_rule_details() const;
  PROTOBUF_NODISCARD ::anduril::communicationsmanager::v1::BlobDistributionRuleDetails* release_blob_integration_rule_details();
  ::anduril::communicationsmanager::v1::BlobDistributionRuleDetails* mutable_blob_integration_rule_details();
  void set_allocated_blob_integration_rule_details(::anduril::communicationsmanager::v1::BlobDistributionRuleDetails* value);
  void unsafe_arena_set_allocated_blob_integration_rule_details(::anduril::communicationsmanager::v1::BlobDistributionRuleDetails* value);
  ::anduril::communicationsmanager::v1::BlobDistributionRuleDetails* unsafe_arena_release_blob_integration_rule_details();

  private:
  const ::anduril::communicationsmanager::v1::BlobDistributionRuleDetails& _internal_blob_integration_rule_details() const;
  ::anduril::communicationsmanager::v1::BlobDistributionRuleDetails* _internal_mutable_blob_integration_rule_details();

  public:
  void clear_details();
  DetailsCase details_case() const;
  // @@protoc_insertion_point(class_scope:anduril.communicationsmanager.v1.IntegrationRule)
 private:
  class _Internal;
  void set_has_entity_integration_rule_details();
  void set_has_blob_integration_rule_details();
  inline bool has_details() const;
  inline void clear_has_details();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 4, 2,
      80, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_IntegrationRule_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const IntegrationRule& from_msg);
    ::google::protobuf::internal::ArenaStringPtr integration_name_;
    ::google::protobuf::internal::ArenaStringPtr host_id_;
    union DetailsUnion {
      constexpr DetailsUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::anduril::communicationsmanager::v1::EntityIntegrationRuleDetails* entity_integration_rule_details_;
      ::anduril::communicationsmanager::v1::BlobDistributionRuleDetails* blob_integration_rule_details_;
    } details_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fcommunicationsmanager_2fv1_2fcommon_2epub_2eproto;
};
// -------------------------------------------------------------------

class EntityDistributionRuleDetails final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.communicationsmanager.v1.EntityDistributionRuleDetails) */ {
 public:
  inline EntityDistributionRuleDetails() : EntityDistributionRuleDetails(nullptr) {}
  ~EntityDistributionRuleDetails() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EntityDistributionRuleDetails(
      ::google::protobuf::internal::ConstantInitialized);

  inline EntityDistributionRuleDetails(const EntityDistributionRuleDetails& from) : EntityDistributionRuleDetails(nullptr, from) {}
  inline EntityDistributionRuleDetails(EntityDistributionRuleDetails&& from) noexcept
      : EntityDistributionRuleDetails(nullptr, std::move(from)) {}
  inline EntityDistributionRuleDetails& operator=(const EntityDistributionRuleDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityDistributionRuleDetails& operator=(EntityDistributionRuleDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EntityDistributionRuleDetails& default_instance() {
    return *internal_default_instance();
  }
  enum EntityFilterSelectionCase {
    kStaticStatement = 2,
    kDynamicStatement = 3,
    ENTITY_FILTER_SELECTION_NOT_SET = 0,
  };
  static inline const EntityDistributionRuleDetails* internal_default_instance() {
    return reinterpret_cast<const EntityDistributionRuleDetails*>(
        &_EntityDistributionRuleDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(EntityDistributionRuleDetails& a, EntityDistributionRuleDetails& b) { a.Swap(&b); }
  inline void Swap(EntityDistributionRuleDetails* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntityDistributionRuleDetails* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EntityDistributionRuleDetails* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<EntityDistributionRuleDetails>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EntityDistributionRuleDetails& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EntityDistributionRuleDetails& from) { EntityDistributionRuleDetails::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EntityDistributionRuleDetails* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "anduril.communicationsmanager.v1.EntityDistributionRuleDetails"; }

 protected:
  explicit EntityDistributionRuleDetails(::google::protobuf::Arena* arena);
  EntityDistributionRuleDetails(::google::protobuf::Arena* arena, const EntityDistributionRuleDetails& from);
  EntityDistributionRuleDetails(::google::protobuf::Arena* arena, EntityDistributionRuleDetails&& from) noexcept
      : EntityDistributionRuleDetails(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEntityFilterFieldNumber = 1,
    kStaticStatementFieldNumber = 2,
    kDynamicStatementFieldNumber = 3,
  };
  // .anduril.entitymanager.v1.Statement entity_filter = 1 [json_name = "entityFilter"];
  bool has_entity_filter() const;
  void clear_entity_filter() ;
  const ::anduril::entitymanager::v1::Statement& entity_filter() const;
  PROTOBUF_NODISCARD ::anduril::entitymanager::v1::Statement* release_entity_filter();
  ::anduril::entitymanager::v1::Statement* mutable_entity_filter();
  void set_allocated_entity_filter(::anduril::entitymanager::v1::Statement* value);
  void unsafe_arena_set_allocated_entity_filter(::anduril::entitymanager::v1::Statement* value);
  ::anduril::entitymanager::v1::Statement* unsafe_arena_release_entity_filter();

  private:
  const ::anduril::entitymanager::v1::Statement& _internal_entity_filter() const;
  ::anduril::entitymanager::v1::Statement* _internal_mutable_entity_filter();

  public:
  // .anduril.entitymanager.v1.Statement static_statement = 2 [json_name = "staticStatement"];
  bool has_static_statement() const;
  private:
  bool _internal_has_static_statement() const;

  public:
  void clear_static_statement() ;
  const ::anduril::entitymanager::v1::Statement& static_statement() const;
  PROTOBUF_NODISCARD ::anduril::entitymanager::v1::Statement* release_static_statement();
  ::anduril::entitymanager::v1::Statement* mutable_static_statement();
  void set_allocated_static_statement(::anduril::entitymanager::v1::Statement* value);
  void unsafe_arena_set_allocated_static_statement(::anduril::entitymanager::v1::Statement* value);
  ::anduril::entitymanager::v1::Statement* unsafe_arena_release_static_statement();

  private:
  const ::anduril::entitymanager::v1::Statement& _internal_static_statement() const;
  ::anduril::entitymanager::v1::Statement* _internal_mutable_static_statement();

  public:
  // .anduril.entitymanager.v1.DynamicStatement dynamic_statement = 3 [json_name = "dynamicStatement"];
  bool has_dynamic_statement() const;
  private:
  bool _internal_has_dynamic_statement() const;

  public:
  void clear_dynamic_statement() ;
  const ::anduril::entitymanager::v1::DynamicStatement& dynamic_statement() const;
  PROTOBUF_NODISCARD ::anduril::entitymanager::v1::DynamicStatement* release_dynamic_statement();
  ::anduril::entitymanager::v1::DynamicStatement* mutable_dynamic_statement();
  void set_allocated_dynamic_statement(::anduril::entitymanager::v1::DynamicStatement* value);
  void unsafe_arena_set_allocated_dynamic_statement(::anduril::entitymanager::v1::DynamicStatement* value);
  ::anduril::entitymanager::v1::DynamicStatement* unsafe_arena_release_dynamic_statement();

  private:
  const ::anduril::entitymanager::v1::DynamicStatement& _internal_dynamic_statement() const;
  ::anduril::entitymanager::v1::DynamicStatement* _internal_mutable_dynamic_statement();

  public:
  void clear_entity_filter_selection();
  EntityFilterSelectionCase entity_filter_selection_case() const;
  // @@protoc_insertion_point(class_scope:anduril.communicationsmanager.v1.EntityDistributionRuleDetails)
 private:
  class _Internal;
  void set_has_static_statement();
  void set_has_dynamic_statement();
  inline bool has_entity_filter_selection() const;
  inline void clear_has_entity_filter_selection();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 3, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_EntityDistributionRuleDetails_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EntityDistributionRuleDetails& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::anduril::entitymanager::v1::Statement* entity_filter_;
    union EntityFilterSelectionUnion {
      constexpr EntityFilterSelectionUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::anduril::entitymanager::v1::Statement* static_statement_;
      ::anduril::entitymanager::v1::DynamicStatement* dynamic_statement_;
    } entity_filter_selection_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fcommunicationsmanager_2fv1_2fcommon_2epub_2eproto;
};
// -------------------------------------------------------------------

class DistributionRule final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.communicationsmanager.v1.DistributionRule) */ {
 public:
  inline DistributionRule() : DistributionRule(nullptr) {}
  ~DistributionRule() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DistributionRule(
      ::google::protobuf::internal::ConstantInitialized);

  inline DistributionRule(const DistributionRule& from) : DistributionRule(nullptr, from) {}
  inline DistributionRule(DistributionRule&& from) noexcept
      : DistributionRule(nullptr, std::move(from)) {}
  inline DistributionRule& operator=(const DistributionRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistributionRule& operator=(DistributionRule&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DistributionRule& default_instance() {
    return *internal_default_instance();
  }
  enum DetailsCase {
    kEntityDetails = 6,
    kBlobDetails = 13,
    DETAILS_NOT_SET = 0,
  };
  static inline const DistributionRule* internal_default_instance() {
    return reinterpret_cast<const DistributionRule*>(
        &_DistributionRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(DistributionRule& a, DistributionRule& b) { a.Swap(&b); }
  inline void Swap(DistributionRule* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DistributionRule* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DistributionRule* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<DistributionRule>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DistributionRule& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DistributionRule& from) { DistributionRule::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DistributionRule* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "anduril.communicationsmanager.v1.DistributionRule"; }

 protected:
  explicit DistributionRule(::google::protobuf::Arena* arena);
  DistributionRule(::google::protobuf::Arena* arena, const DistributionRule& from);
  DistributionRule(::google::protobuf::Arena* arena, DistributionRule&& from) noexcept
      : DistributionRule(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSourcesFieldNumber = 8,
    kRuleIdFieldNumber = 1,
    kVersionFieldNumber = 2,
    kDescriptionFieldNumber = 9,
    kNameFieldNumber = 10,
    kSourceFieldNumber = 4,
    kDestinationFieldNumber = 5,
    kSourceDestinationDirectionalControlFieldNumber = 12,
    kEnabledFieldNumber = 3,
    kPriorityFieldNumber = 7,
    kVersionNumFieldNumber = 11,
    kEntityDetailsFieldNumber = 6,
    kBlobDetailsFieldNumber = 13,
  };
  // repeated .anduril.communicationsmanager.v1.Source sources = 8 [json_name = "sources", deprecated = true];
  [[deprecated]]  int sources_size() const;
  private:
  int _internal_sources_size() const;

  public:
  [[deprecated]]  void clear_sources() ;
  [[deprecated]] ::anduril::communicationsmanager::v1::Source* mutable_sources(int index);
  [[deprecated]] ::google::protobuf::RepeatedPtrField<::anduril::communicationsmanager::v1::Source>* mutable_sources();

  private:
  const ::google::protobuf::RepeatedPtrField<::anduril::communicationsmanager::v1::Source>& _internal_sources() const;
  ::google::protobuf::RepeatedPtrField<::anduril::communicationsmanager::v1::Source>* _internal_mutable_sources();
  public:
  [[deprecated]] const ::anduril::communicationsmanager::v1::Source& sources(int index) const;
  [[deprecated]] ::anduril::communicationsmanager::v1::Source* add_sources();
  [[deprecated]] const ::google::protobuf::RepeatedPtrField<::anduril::communicationsmanager::v1::Source>& sources() const;
  // string rule_id = 1 [json_name = "ruleId"];
  void clear_rule_id() ;
  const std::string& rule_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rule_id(Arg_&& arg, Args_... args);
  std::string* mutable_rule_id();
  PROTOBUF_NODISCARD std::string* release_rule_id();
  void set_allocated_rule_id(std::string* value);

  private:
  const std::string& _internal_rule_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rule_id(
      const std::string& value);
  std::string* _internal_mutable_rule_id();

  public:
  // string version = 2 [json_name = "version", deprecated = true];
  [[deprecated]]  void clear_version() ;
  [[deprecated]] const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_version(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_version();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_version();
  [[deprecated]] void set_allocated_version(std::string* value);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // string description = 9 [json_name = "description"];
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // string name = 10 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .anduril.communicationsmanager.v1.Source source = 4 [json_name = "source", deprecated = true];
  [[deprecated]]  bool has_source() const;
  [[deprecated]]  void clear_source() ;
  [[deprecated]] const ::anduril::communicationsmanager::v1::Source& source() const;
  [[deprecated]] PROTOBUF_NODISCARD ::anduril::communicationsmanager::v1::Source* release_source();
  [[deprecated]] ::anduril::communicationsmanager::v1::Source* mutable_source();
  [[deprecated]] void set_allocated_source(::anduril::communicationsmanager::v1::Source* value);
  [[deprecated]] void unsafe_arena_set_allocated_source(::anduril::communicationsmanager::v1::Source* value);
  [[deprecated]] ::anduril::communicationsmanager::v1::Source* unsafe_arena_release_source();

  private:
  const ::anduril::communicationsmanager::v1::Source& _internal_source() const;
  ::anduril::communicationsmanager::v1::Source* _internal_mutable_source();

  public:
  // .anduril.communicationsmanager.v1.Destination destination = 5 [json_name = "destination", deprecated = true];
  [[deprecated]]  bool has_destination() const;
  [[deprecated]]  void clear_destination() ;
  [[deprecated]] const ::anduril::communicationsmanager::v1::Destination& destination() const;
  [[deprecated]] PROTOBUF_NODISCARD ::anduril::communicationsmanager::v1::Destination* release_destination();
  [[deprecated]] ::anduril::communicationsmanager::v1::Destination* mutable_destination();
  [[deprecated]] void set_allocated_destination(::anduril::communicationsmanager::v1::Destination* value);
  [[deprecated]] void unsafe_arena_set_allocated_destination(::anduril::communicationsmanager::v1::Destination* value);
  [[deprecated]] ::anduril::communicationsmanager::v1::Destination* unsafe_arena_release_destination();

  private:
  const ::anduril::communicationsmanager::v1::Destination& _internal_destination() const;
  ::anduril::communicationsmanager::v1::Destination* _internal_mutable_destination();

  public:
  // .anduril.communicationsmanager.v1.SourceDestinationDirectionalControl source_destination_directional_control = 12 [json_name = "sourceDestinationDirectionalControl"];
  bool has_source_destination_directional_control() const;
  void clear_source_destination_directional_control() ;
  const ::anduril::communicationsmanager::v1::SourceDestinationDirectionalControl& source_destination_directional_control() const;
  PROTOBUF_NODISCARD ::anduril::communicationsmanager::v1::SourceDestinationDirectionalControl* release_source_destination_directional_control();
  ::anduril::communicationsmanager::v1::SourceDestinationDirectionalControl* mutable_source_destination_directional_control();
  void set_allocated_source_destination_directional_control(::anduril::communicationsmanager::v1::SourceDestinationDirectionalControl* value);
  void unsafe_arena_set_allocated_source_destination_directional_control(::anduril::communicationsmanager::v1::SourceDestinationDirectionalControl* value);
  ::anduril::communicationsmanager::v1::SourceDestinationDirectionalControl* unsafe_arena_release_source_destination_directional_control();

  private:
  const ::anduril::communicationsmanager::v1::SourceDestinationDirectionalControl& _internal_source_destination_directional_control() const;
  ::anduril::communicationsmanager::v1::SourceDestinationDirectionalControl* _internal_mutable_source_destination_directional_control();

  public:
  // bool enabled = 3 [json_name = "enabled"];
  void clear_enabled() ;
  bool enabled() const;
  void set_enabled(bool value);

  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);

  public:
  // uint32 priority = 7 [json_name = "priority"];
  void clear_priority() ;
  ::uint32_t priority() const;
  void set_priority(::uint32_t value);

  private:
  ::uint32_t _internal_priority() const;
  void _internal_set_priority(::uint32_t value);

  public:
  // int64 version_num = 11 [json_name = "versionNum"];
  void clear_version_num() ;
  ::int64_t version_num() const;
  void set_version_num(::int64_t value);

  private:
  ::int64_t _internal_version_num() const;
  void _internal_set_version_num(::int64_t value);

  public:
  // .anduril.communicationsmanager.v1.EntityDistributionRuleDetails entity_details = 6 [json_name = "entityDetails"];
  bool has_entity_details() const;
  private:
  bool _internal_has_entity_details() const;

  public:
  void clear_entity_details() ;
  const ::anduril::communicationsmanager::v1::EntityDistributionRuleDetails& entity_details() const;
  PROTOBUF_NODISCARD ::anduril::communicationsmanager::v1::EntityDistributionRuleDetails* release_entity_details();
  ::anduril::communicationsmanager::v1::EntityDistributionRuleDetails* mutable_entity_details();
  void set_allocated_entity_details(::anduril::communicationsmanager::v1::EntityDistributionRuleDetails* value);
  void unsafe_arena_set_allocated_entity_details(::anduril::communicationsmanager::v1::EntityDistributionRuleDetails* value);
  ::anduril::communicationsmanager::v1::EntityDistributionRuleDetails* unsafe_arena_release_entity_details();

  private:
  const ::anduril::communicationsmanager::v1::EntityDistributionRuleDetails& _internal_entity_details() const;
  ::anduril::communicationsmanager::v1::EntityDistributionRuleDetails* _internal_mutable_entity_details();

  public:
  // .anduril.communicationsmanager.v1.BlobDistributionRuleDetails blob_details = 13 [json_name = "blobDetails"];
  bool has_blob_details() const;
  private:
  bool _internal_has_blob_details() const;

  public:
  void clear_blob_details() ;
  const ::anduril::communicationsmanager::v1::BlobDistributionRuleDetails& blob_details() const;
  PROTOBUF_NODISCARD ::anduril::communicationsmanager::v1::BlobDistributionRuleDetails* release_blob_details();
  ::anduril::communicationsmanager::v1::BlobDistributionRuleDetails* mutable_blob_details();
  void set_allocated_blob_details(::anduril::communicationsmanager::v1::BlobDistributionRuleDetails* value);
  void unsafe_arena_set_allocated_blob_details(::anduril::communicationsmanager::v1::BlobDistributionRuleDetails* value);
  ::anduril::communicationsmanager::v1::BlobDistributionRuleDetails* unsafe_arena_release_blob_details();

  private:
  const ::anduril::communicationsmanager::v1::BlobDistributionRuleDetails& _internal_blob_details() const;
  ::anduril::communicationsmanager::v1::BlobDistributionRuleDetails* _internal_mutable_blob_details();

  public:
  void clear_details();
  DetailsCase details_case() const;
  // @@protoc_insertion_point(class_scope:anduril.communicationsmanager.v1.DistributionRule)
 private:
  class _Internal;
  void set_has_entity_details();
  void set_has_blob_details();
  inline bool has_details() const;
  inline void clear_has_details();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 13, 6,
      95, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DistributionRule_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DistributionRule& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::anduril::communicationsmanager::v1::Source > sources_;
    ::google::protobuf::internal::ArenaStringPtr rule_id_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::anduril::communicationsmanager::v1::Source* source_;
    ::anduril::communicationsmanager::v1::Destination* destination_;
    ::anduril::communicationsmanager::v1::SourceDestinationDirectionalControl* source_destination_directional_control_;
    bool enabled_;
    ::uint32_t priority_;
    ::int64_t version_num_;
    union DetailsUnion {
      constexpr DetailsUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::anduril::communicationsmanager::v1::EntityDistributionRuleDetails* entity_details_;
      ::anduril::communicationsmanager::v1::BlobDistributionRuleDetails* blob_details_;
    } details_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fcommunicationsmanager_2fv1_2fcommon_2epub_2eproto;
};
// -------------------------------------------------------------------

class CrossDomainRule final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.communicationsmanager.v1.CrossDomainRule) */ {
 public:
  inline CrossDomainRule() : CrossDomainRule(nullptr) {}
  ~CrossDomainRule() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CrossDomainRule(
      ::google::protobuf::internal::ConstantInitialized);

  inline CrossDomainRule(const CrossDomainRule& from) : CrossDomainRule(nullptr, from) {}
  inline CrossDomainRule(CrossDomainRule&& from) noexcept
      : CrossDomainRule(nullptr, std::move(from)) {}
  inline CrossDomainRule& operator=(const CrossDomainRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline CrossDomainRule& operator=(CrossDomainRule&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CrossDomainRule& default_instance() {
    return *internal_default_instance();
  }
  enum DetailsCase {
    kEntityDetails = 1,
    DETAILS_NOT_SET = 0,
  };
  static inline const CrossDomainRule* internal_default_instance() {
    return reinterpret_cast<const CrossDomainRule*>(
        &_CrossDomainRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(CrossDomainRule& a, CrossDomainRule& b) { a.Swap(&b); }
  inline void Swap(CrossDomainRule* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CrossDomainRule* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CrossDomainRule* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<CrossDomainRule>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CrossDomainRule& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CrossDomainRule& from) { CrossDomainRule::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CrossDomainRule* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "anduril.communicationsmanager.v1.CrossDomainRule"; }

 protected:
  explicit CrossDomainRule(::google::protobuf::Arena* arena);
  CrossDomainRule(::google::protobuf::Arena* arena, const CrossDomainRule& from);
  CrossDomainRule(::google::protobuf::Arena* arena, CrossDomainRule&& from) noexcept
      : CrossDomainRule(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCdsDestinationFieldNumber = 2,
    kEntityDetailsFieldNumber = 1,
  };
  // .anduril.communicationsmanager.v1.CdsDestination cds_destination = 2 [json_name = "cdsDestination"];
  bool has_cds_destination() const;
  void clear_cds_destination() ;
  const ::anduril::communicationsmanager::v1::CdsDestination& cds_destination() const;
  PROTOBUF_NODISCARD ::anduril::communicationsmanager::v1::CdsDestination* release_cds_destination();
  ::anduril::communicationsmanager::v1::CdsDestination* mutable_cds_destination();
  void set_allocated_cds_destination(::anduril::communicationsmanager::v1::CdsDestination* value);
  void unsafe_arena_set_allocated_cds_destination(::anduril::communicationsmanager::v1::CdsDestination* value);
  ::anduril::communicationsmanager::v1::CdsDestination* unsafe_arena_release_cds_destination();

  private:
  const ::anduril::communicationsmanager::v1::CdsDestination& _internal_cds_destination() const;
  ::anduril::communicationsmanager::v1::CdsDestination* _internal_mutable_cds_destination();

  public:
  // .anduril.communicationsmanager.v1.EntityDistributionRuleDetails entity_details = 1 [json_name = "entityDetails"];
  bool has_entity_details() const;
  private:
  bool _internal_has_entity_details() const;

  public:
  void clear_entity_details() ;
  const ::anduril::communicationsmanager::v1::EntityDistributionRuleDetails& entity_details() const;
  PROTOBUF_NODISCARD ::anduril::communicationsmanager::v1::EntityDistributionRuleDetails* release_entity_details();
  ::anduril::communicationsmanager::v1::EntityDistributionRuleDetails* mutable_entity_details();
  void set_allocated_entity_details(::anduril::communicationsmanager::v1::EntityDistributionRuleDetails* value);
  void unsafe_arena_set_allocated_entity_details(::anduril::communicationsmanager::v1::EntityDistributionRuleDetails* value);
  ::anduril::communicationsmanager::v1::EntityDistributionRuleDetails* unsafe_arena_release_entity_details();

  private:
  const ::anduril::communicationsmanager::v1::EntityDistributionRuleDetails& _internal_entity_details() const;
  ::anduril::communicationsmanager::v1::EntityDistributionRuleDetails* _internal_mutable_entity_details();

  public:
  void clear_details();
  DetailsCase details_case() const;
  // @@protoc_insertion_point(class_scope:anduril.communicationsmanager.v1.CrossDomainRule)
 private:
  class _Internal;
  void set_has_entity_details();
  inline bool has_details() const;
  inline void clear_has_details();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_CrossDomainRule_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CrossDomainRule& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::anduril::communicationsmanager::v1::CdsDestination* cds_destination_;
    union DetailsUnion {
      constexpr DetailsUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::anduril::communicationsmanager::v1::EntityDistributionRuleDetails* entity_details_;
    } details_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fcommunicationsmanager_2fv1_2fcommon_2epub_2eproto;
};
// -------------------------------------------------------------------

class Rule final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.communicationsmanager.v1.Rule) */ {
 public:
  inline Rule() : Rule(nullptr) {}
  ~Rule() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Rule(
      ::google::protobuf::internal::ConstantInitialized);

  inline Rule(const Rule& from) : Rule(nullptr, from) {}
  inline Rule(Rule&& from) noexcept
      : Rule(nullptr, std::move(from)) {}
  inline Rule& operator=(const Rule& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rule& operator=(Rule&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rule& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kDistributionRule = 5,
    kIntegrationRule = 6,
    kCrossDomainRule = 9,
    TYPE_NOT_SET = 0,
  };
  static inline const Rule* internal_default_instance() {
    return reinterpret_cast<const Rule*>(
        &_Rule_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Rule& a, Rule& b) { a.Swap(&b); }
  inline void Swap(Rule* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rule* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rule* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Rule>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Rule& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Rule& from) { Rule::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Rule* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "anduril.communicationsmanager.v1.Rule"; }

 protected:
  explicit Rule(::google::protobuf::Arena* arena);
  Rule(::google::protobuf::Arena* arena, const Rule& from);
  Rule(::google::protobuf::Arena* arena, Rule&& from) noexcept
      : Rule(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRuleIdFieldNumber = 1,
    kNameFieldNumber = 4,
    kLastModifiedByUserFieldNumber = 7,
    kVersionNumFieldNumber = 2,
    kLastModifiedTimeUnixEpochMsFieldNumber = 8,
    kEnabledFieldNumber = 3,
    kDistributionRuleFieldNumber = 5,
    kIntegrationRuleFieldNumber = 6,
    kCrossDomainRuleFieldNumber = 9,
  };
  // string rule_id = 1 [json_name = "ruleId"];
  void clear_rule_id() ;
  const std::string& rule_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rule_id(Arg_&& arg, Args_... args);
  std::string* mutable_rule_id();
  PROTOBUF_NODISCARD std::string* release_rule_id();
  void set_allocated_rule_id(std::string* value);

  private:
  const std::string& _internal_rule_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rule_id(
      const std::string& value);
  std::string* _internal_mutable_rule_id();

  public:
  // string name = 4 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string last_modified_by_user = 7 [json_name = "lastModifiedByUser"];
  void clear_last_modified_by_user() ;
  const std::string& last_modified_by_user() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_modified_by_user(Arg_&& arg, Args_... args);
  std::string* mutable_last_modified_by_user();
  PROTOBUF_NODISCARD std::string* release_last_modified_by_user();
  void set_allocated_last_modified_by_user(std::string* value);

  private:
  const std::string& _internal_last_modified_by_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_modified_by_user(
      const std::string& value);
  std::string* _internal_mutable_last_modified_by_user();

  public:
  // int64 version_num = 2 [json_name = "versionNum"];
  void clear_version_num() ;
  ::int64_t version_num() const;
  void set_version_num(::int64_t value);

  private:
  ::int64_t _internal_version_num() const;
  void _internal_set_version_num(::int64_t value);

  public:
  // int64 last_modified_time_unix_epoch_ms = 8 [json_name = "lastModifiedTimeUnixEpochMs"];
  void clear_last_modified_time_unix_epoch_ms() ;
  ::int64_t last_modified_time_unix_epoch_ms() const;
  void set_last_modified_time_unix_epoch_ms(::int64_t value);

  private:
  ::int64_t _internal_last_modified_time_unix_epoch_ms() const;
  void _internal_set_last_modified_time_unix_epoch_ms(::int64_t value);

  public:
  // bool enabled = 3 [json_name = "enabled"];
  void clear_enabled() ;
  bool enabled() const;
  void set_enabled(bool value);

  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);

  public:
  // .anduril.communicationsmanager.v1.DistributionRule distribution_rule = 5 [json_name = "distributionRule"];
  bool has_distribution_rule() const;
  private:
  bool _internal_has_distribution_rule() const;

  public:
  void clear_distribution_rule() ;
  const ::anduril::communicationsmanager::v1::DistributionRule& distribution_rule() const;
  PROTOBUF_NODISCARD ::anduril::communicationsmanager::v1::DistributionRule* release_distribution_rule();
  ::anduril::communicationsmanager::v1::DistributionRule* mutable_distribution_rule();
  void set_allocated_distribution_rule(::anduril::communicationsmanager::v1::DistributionRule* value);
  void unsafe_arena_set_allocated_distribution_rule(::anduril::communicationsmanager::v1::DistributionRule* value);
  ::anduril::communicationsmanager::v1::DistributionRule* unsafe_arena_release_distribution_rule();

  private:
  const ::anduril::communicationsmanager::v1::DistributionRule& _internal_distribution_rule() const;
  ::anduril::communicationsmanager::v1::DistributionRule* _internal_mutable_distribution_rule();

  public:
  // .anduril.communicationsmanager.v1.IntegrationRule integration_rule = 6 [json_name = "integrationRule"];
  bool has_integration_rule() const;
  private:
  bool _internal_has_integration_rule() const;

  public:
  void clear_integration_rule() ;
  const ::anduril::communicationsmanager::v1::IntegrationRule& integration_rule() const;
  PROTOBUF_NODISCARD ::anduril::communicationsmanager::v1::IntegrationRule* release_integration_rule();
  ::anduril::communicationsmanager::v1::IntegrationRule* mutable_integration_rule();
  void set_allocated_integration_rule(::anduril::communicationsmanager::v1::IntegrationRule* value);
  void unsafe_arena_set_allocated_integration_rule(::anduril::communicationsmanager::v1::IntegrationRule* value);
  ::anduril::communicationsmanager::v1::IntegrationRule* unsafe_arena_release_integration_rule();

  private:
  const ::anduril::communicationsmanager::v1::IntegrationRule& _internal_integration_rule() const;
  ::anduril::communicationsmanager::v1::IntegrationRule* _internal_mutable_integration_rule();

  public:
  // .anduril.communicationsmanager.v1.CrossDomainRule cross_domain_rule = 9 [json_name = "crossDomainRule"];
  bool has_cross_domain_rule() const;
  private:
  bool _internal_has_cross_domain_rule() const;

  public:
  void clear_cross_domain_rule() ;
  const ::anduril::communicationsmanager::v1::CrossDomainRule& cross_domain_rule() const;
  PROTOBUF_NODISCARD ::anduril::communicationsmanager::v1::CrossDomainRule* release_cross_domain_rule();
  ::anduril::communicationsmanager::v1::CrossDomainRule* mutable_cross_domain_rule();
  void set_allocated_cross_domain_rule(::anduril::communicationsmanager::v1::CrossDomainRule* value);
  void unsafe_arena_set_allocated_cross_domain_rule(::anduril::communicationsmanager::v1::CrossDomainRule* value);
  ::anduril::communicationsmanager::v1::CrossDomainRule* unsafe_arena_release_cross_domain_rule();

  private:
  const ::anduril::communicationsmanager::v1::CrossDomainRule& _internal_cross_domain_rule() const;
  ::anduril::communicationsmanager::v1::CrossDomainRule* _internal_mutable_cross_domain_rule();

  public:
  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:anduril.communicationsmanager.v1.Rule)
 private:
  class _Internal;
  void set_has_distribution_rule();
  void set_has_integration_rule();
  void set_has_cross_domain_rule();
  inline bool has_type() const;
  inline void clear_has_type();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 9, 3,
      86, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Rule_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Rule& from_msg);
    ::google::protobuf::internal::ArenaStringPtr rule_id_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr last_modified_by_user_;
    ::int64_t version_num_;
    ::int64_t last_modified_time_unix_epoch_ms_;
    bool enabled_;
    union TypeUnion {
      constexpr TypeUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::anduril::communicationsmanager::v1::DistributionRule* distribution_rule_;
      ::anduril::communicationsmanager::v1::IntegrationRule* integration_rule_;
      ::anduril::communicationsmanager::v1::CrossDomainRule* cross_domain_rule_;
    } type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fcommunicationsmanager_2fv1_2fcommon_2epub_2eproto;
};
// -------------------------------------------------------------------

class DistributionRuleEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.communicationsmanager.v1.DistributionRuleEvent) */ {
 public:
  inline DistributionRuleEvent() : DistributionRuleEvent(nullptr) {}
  ~DistributionRuleEvent() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DistributionRuleEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline DistributionRuleEvent(const DistributionRuleEvent& from) : DistributionRuleEvent(nullptr, from) {}
  inline DistributionRuleEvent(DistributionRuleEvent&& from) noexcept
      : DistributionRuleEvent(nullptr, std::move(from)) {}
  inline DistributionRuleEvent& operator=(const DistributionRuleEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistributionRuleEvent& operator=(DistributionRuleEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DistributionRuleEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const DistributionRuleEvent* internal_default_instance() {
    return reinterpret_cast<const DistributionRuleEvent*>(
        &_DistributionRuleEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(DistributionRuleEvent& a, DistributionRuleEvent& b) { a.Swap(&b); }
  inline void Swap(DistributionRuleEvent* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DistributionRuleEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DistributionRuleEvent* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<DistributionRuleEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DistributionRuleEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DistributionRuleEvent& from) { DistributionRuleEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DistributionRuleEvent* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "anduril.communicationsmanager.v1.DistributionRuleEvent"; }

 protected:
  explicit DistributionRuleEvent(::google::protobuf::Arena* arena);
  DistributionRuleEvent(::google::protobuf::Arena* arena, const DistributionRuleEvent& from);
  DistributionRuleEvent(::google::protobuf::Arena* arena, DistributionRuleEvent&& from) noexcept
      : DistributionRuleEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTimeFieldNumber = 2,
    kDistributionRuleFieldNumber = 3,
    kEventTypeFieldNumber = 1,
  };
  // .google.protobuf.Timestamp time = 2 [json_name = "time"];
  bool has_time() const;
  void clear_time() ;
  const ::google::protobuf::Timestamp& time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_time();
  ::google::protobuf::Timestamp* mutable_time();
  void set_allocated_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_time();

  private:
  const ::google::protobuf::Timestamp& _internal_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_time();

  public:
  // .anduril.communicationsmanager.v1.DistributionRule distribution_rule = 3 [json_name = "distributionRule"];
  bool has_distribution_rule() const;
  void clear_distribution_rule() ;
  const ::anduril::communicationsmanager::v1::DistributionRule& distribution_rule() const;
  PROTOBUF_NODISCARD ::anduril::communicationsmanager::v1::DistributionRule* release_distribution_rule();
  ::anduril::communicationsmanager::v1::DistributionRule* mutable_distribution_rule();
  void set_allocated_distribution_rule(::anduril::communicationsmanager::v1::DistributionRule* value);
  void unsafe_arena_set_allocated_distribution_rule(::anduril::communicationsmanager::v1::DistributionRule* value);
  ::anduril::communicationsmanager::v1::DistributionRule* unsafe_arena_release_distribution_rule();

  private:
  const ::anduril::communicationsmanager::v1::DistributionRule& _internal_distribution_rule() const;
  ::anduril::communicationsmanager::v1::DistributionRule* _internal_mutable_distribution_rule();

  public:
  // .anduril.communicationsmanager.v1.EventType event_type = 1 [json_name = "eventType"];
  void clear_event_type() ;
  ::anduril::communicationsmanager::v1::EventType event_type() const;
  void set_event_type(::anduril::communicationsmanager::v1::EventType value);

  private:
  ::anduril::communicationsmanager::v1::EventType _internal_event_type() const;
  void _internal_set_event_type(::anduril::communicationsmanager::v1::EventType value);

  public:
  // @@protoc_insertion_point(class_scope:anduril.communicationsmanager.v1.DistributionRuleEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DistributionRuleEvent_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DistributionRuleEvent& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Timestamp* time_;
    ::anduril::communicationsmanager::v1::DistributionRule* distribution_rule_;
    int event_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fcommunicationsmanager_2fv1_2fcommon_2epub_2eproto;
};
// -------------------------------------------------------------------

class RuleEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.communicationsmanager.v1.RuleEvent) */ {
 public:
  inline RuleEvent() : RuleEvent(nullptr) {}
  ~RuleEvent() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RuleEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline RuleEvent(const RuleEvent& from) : RuleEvent(nullptr, from) {}
  inline RuleEvent(RuleEvent&& from) noexcept
      : RuleEvent(nullptr, std::move(from)) {}
  inline RuleEvent& operator=(const RuleEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuleEvent& operator=(RuleEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RuleEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const RuleEvent* internal_default_instance() {
    return reinterpret_cast<const RuleEvent*>(
        &_RuleEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(RuleEvent& a, RuleEvent& b) { a.Swap(&b); }
  inline void Swap(RuleEvent* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuleEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RuleEvent* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<RuleEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RuleEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RuleEvent& from) { RuleEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RuleEvent* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "anduril.communicationsmanager.v1.RuleEvent"; }

 protected:
  explicit RuleEvent(::google::protobuf::Arena* arena);
  RuleEvent(::google::protobuf::Arena* arena, const RuleEvent& from);
  RuleEvent(::google::protobuf::Arena* arena, RuleEvent&& from) noexcept
      : RuleEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTimeFieldNumber = 2,
    kRuleFieldNumber = 3,
    kEventTypeFieldNumber = 1,
  };
  // .google.protobuf.Timestamp time = 2 [json_name = "time"];
  bool has_time() const;
  void clear_time() ;
  const ::google::protobuf::Timestamp& time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_time();
  ::google::protobuf::Timestamp* mutable_time();
  void set_allocated_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_time();

  private:
  const ::google::protobuf::Timestamp& _internal_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_time();

  public:
  // .anduril.communicationsmanager.v1.Rule rule = 3 [json_name = "rule"];
  bool has_rule() const;
  void clear_rule() ;
  const ::anduril::communicationsmanager::v1::Rule& rule() const;
  PROTOBUF_NODISCARD ::anduril::communicationsmanager::v1::Rule* release_rule();
  ::anduril::communicationsmanager::v1::Rule* mutable_rule();
  void set_allocated_rule(::anduril::communicationsmanager::v1::Rule* value);
  void unsafe_arena_set_allocated_rule(::anduril::communicationsmanager::v1::Rule* value);
  ::anduril::communicationsmanager::v1::Rule* unsafe_arena_release_rule();

  private:
  const ::anduril::communicationsmanager::v1::Rule& _internal_rule() const;
  ::anduril::communicationsmanager::v1::Rule* _internal_mutable_rule();

  public:
  // .anduril.communicationsmanager.v1.EventType event_type = 1 [json_name = "eventType"];
  void clear_event_type() ;
  ::anduril::communicationsmanager::v1::EventType event_type() const;
  void set_event_type(::anduril::communicationsmanager::v1::EventType value);

  private:
  ::anduril::communicationsmanager::v1::EventType _internal_event_type() const;
  void _internal_set_event_type(::anduril::communicationsmanager::v1::EventType value);

  public:
  // @@protoc_insertion_point(class_scope:anduril.communicationsmanager.v1.RuleEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_RuleEvent_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RuleEvent& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Timestamp* time_;
    ::anduril::communicationsmanager::v1::Rule* rule_;
    int event_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fcommunicationsmanager_2fv1_2fcommon_2epub_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DistributionRuleEvent

// .anduril.communicationsmanager.v1.EventType event_type = 1 [json_name = "eventType"];
inline void DistributionRuleEvent::clear_event_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_type_ = 0;
}
inline ::anduril::communicationsmanager::v1::EventType DistributionRuleEvent::event_type() const {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.DistributionRuleEvent.event_type)
  return _internal_event_type();
}
inline void DistributionRuleEvent::set_event_type(::anduril::communicationsmanager::v1::EventType value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:anduril.communicationsmanager.v1.DistributionRuleEvent.event_type)
}
inline ::anduril::communicationsmanager::v1::EventType DistributionRuleEvent::_internal_event_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::anduril::communicationsmanager::v1::EventType>(_impl_.event_type_);
}
inline void DistributionRuleEvent::_internal_set_event_type(::anduril::communicationsmanager::v1::EventType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_type_ = value;
}

// .google.protobuf.Timestamp time = 2 [json_name = "time"];
inline bool DistributionRuleEvent::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& DistributionRuleEvent::_internal_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& DistributionRuleEvent::time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.DistributionRuleEvent.time)
  return _internal_time();
}
inline void DistributionRuleEvent::unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.DistributionRuleEvent.time)
}
inline ::google::protobuf::Timestamp* DistributionRuleEvent::release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* DistributionRuleEvent::unsafe_arena_release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.DistributionRuleEvent.time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* DistributionRuleEvent::_internal_mutable_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.time_;
}
inline ::google::protobuf::Timestamp* DistributionRuleEvent::mutable_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.DistributionRuleEvent.time)
  return _msg;
}
inline void DistributionRuleEvent::set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.DistributionRuleEvent.time)
}

// .anduril.communicationsmanager.v1.DistributionRule distribution_rule = 3 [json_name = "distributionRule"];
inline bool DistributionRuleEvent::has_distribution_rule() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.distribution_rule_ != nullptr);
  return value;
}
inline void DistributionRuleEvent::clear_distribution_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.distribution_rule_ != nullptr) _impl_.distribution_rule_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::anduril::communicationsmanager::v1::DistributionRule& DistributionRuleEvent::_internal_distribution_rule() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::anduril::communicationsmanager::v1::DistributionRule* p = _impl_.distribution_rule_;
  return p != nullptr ? *p : reinterpret_cast<const ::anduril::communicationsmanager::v1::DistributionRule&>(::anduril::communicationsmanager::v1::_DistributionRule_default_instance_);
}
inline const ::anduril::communicationsmanager::v1::DistributionRule& DistributionRuleEvent::distribution_rule() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.DistributionRuleEvent.distribution_rule)
  return _internal_distribution_rule();
}
inline void DistributionRuleEvent::unsafe_arena_set_allocated_distribution_rule(::anduril::communicationsmanager::v1::DistributionRule* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.distribution_rule_);
  }
  _impl_.distribution_rule_ = reinterpret_cast<::anduril::communicationsmanager::v1::DistributionRule*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.DistributionRuleEvent.distribution_rule)
}
inline ::anduril::communicationsmanager::v1::DistributionRule* DistributionRuleEvent::release_distribution_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::anduril::communicationsmanager::v1::DistributionRule* released = _impl_.distribution_rule_;
  _impl_.distribution_rule_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::anduril::communicationsmanager::v1::DistributionRule* DistributionRuleEvent::unsafe_arena_release_distribution_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.DistributionRuleEvent.distribution_rule)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::anduril::communicationsmanager::v1::DistributionRule* temp = _impl_.distribution_rule_;
  _impl_.distribution_rule_ = nullptr;
  return temp;
}
inline ::anduril::communicationsmanager::v1::DistributionRule* DistributionRuleEvent::_internal_mutable_distribution_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.distribution_rule_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::anduril::communicationsmanager::v1::DistributionRule>(GetArena());
    _impl_.distribution_rule_ = reinterpret_cast<::anduril::communicationsmanager::v1::DistributionRule*>(p);
  }
  return _impl_.distribution_rule_;
}
inline ::anduril::communicationsmanager::v1::DistributionRule* DistributionRuleEvent::mutable_distribution_rule() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::anduril::communicationsmanager::v1::DistributionRule* _msg = _internal_mutable_distribution_rule();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.DistributionRuleEvent.distribution_rule)
  return _msg;
}
inline void DistributionRuleEvent::set_allocated_distribution_rule(::anduril::communicationsmanager::v1::DistributionRule* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.distribution_rule_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.distribution_rule_ = reinterpret_cast<::anduril::communicationsmanager::v1::DistributionRule*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.DistributionRuleEvent.distribution_rule)
}

// -------------------------------------------------------------------

// RuleEvent

// .anduril.communicationsmanager.v1.EventType event_type = 1 [json_name = "eventType"];
inline void RuleEvent::clear_event_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_type_ = 0;
}
inline ::anduril::communicationsmanager::v1::EventType RuleEvent::event_type() const {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.RuleEvent.event_type)
  return _internal_event_type();
}
inline void RuleEvent::set_event_type(::anduril::communicationsmanager::v1::EventType value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:anduril.communicationsmanager.v1.RuleEvent.event_type)
}
inline ::anduril::communicationsmanager::v1::EventType RuleEvent::_internal_event_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::anduril::communicationsmanager::v1::EventType>(_impl_.event_type_);
}
inline void RuleEvent::_internal_set_event_type(::anduril::communicationsmanager::v1::EventType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_type_ = value;
}

// .google.protobuf.Timestamp time = 2 [json_name = "time"];
inline bool RuleEvent::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& RuleEvent::_internal_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& RuleEvent::time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.RuleEvent.time)
  return _internal_time();
}
inline void RuleEvent::unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.RuleEvent.time)
}
inline ::google::protobuf::Timestamp* RuleEvent::release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* RuleEvent::unsafe_arena_release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.RuleEvent.time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* RuleEvent::_internal_mutable_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.time_;
}
inline ::google::protobuf::Timestamp* RuleEvent::mutable_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.RuleEvent.time)
  return _msg;
}
inline void RuleEvent::set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.RuleEvent.time)
}

// .anduril.communicationsmanager.v1.Rule rule = 3 [json_name = "rule"];
inline bool RuleEvent::has_rule() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rule_ != nullptr);
  return value;
}
inline void RuleEvent::clear_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rule_ != nullptr) _impl_.rule_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::anduril::communicationsmanager::v1::Rule& RuleEvent::_internal_rule() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::anduril::communicationsmanager::v1::Rule* p = _impl_.rule_;
  return p != nullptr ? *p : reinterpret_cast<const ::anduril::communicationsmanager::v1::Rule&>(::anduril::communicationsmanager::v1::_Rule_default_instance_);
}
inline const ::anduril::communicationsmanager::v1::Rule& RuleEvent::rule() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.RuleEvent.rule)
  return _internal_rule();
}
inline void RuleEvent::unsafe_arena_set_allocated_rule(::anduril::communicationsmanager::v1::Rule* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rule_);
  }
  _impl_.rule_ = reinterpret_cast<::anduril::communicationsmanager::v1::Rule*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.RuleEvent.rule)
}
inline ::anduril::communicationsmanager::v1::Rule* RuleEvent::release_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::anduril::communicationsmanager::v1::Rule* released = _impl_.rule_;
  _impl_.rule_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::anduril::communicationsmanager::v1::Rule* RuleEvent::unsafe_arena_release_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.RuleEvent.rule)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::anduril::communicationsmanager::v1::Rule* temp = _impl_.rule_;
  _impl_.rule_ = nullptr;
  return temp;
}
inline ::anduril::communicationsmanager::v1::Rule* RuleEvent::_internal_mutable_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rule_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::anduril::communicationsmanager::v1::Rule>(GetArena());
    _impl_.rule_ = reinterpret_cast<::anduril::communicationsmanager::v1::Rule*>(p);
  }
  return _impl_.rule_;
}
inline ::anduril::communicationsmanager::v1::Rule* RuleEvent::mutable_rule() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::anduril::communicationsmanager::v1::Rule* _msg = _internal_mutable_rule();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.RuleEvent.rule)
  return _msg;
}
inline void RuleEvent::set_allocated_rule(::anduril::communicationsmanager::v1::Rule* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.rule_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.rule_ = reinterpret_cast<::anduril::communicationsmanager::v1::Rule*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.RuleEvent.rule)
}

// -------------------------------------------------------------------

// Rule

// string rule_id = 1 [json_name = "ruleId"];
inline void Rule::clear_rule_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_id_.ClearToEmpty();
}
inline const std::string& Rule::rule_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.Rule.rule_id)
  return _internal_rule_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Rule::set_rule_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:anduril.communicationsmanager.v1.Rule.rule_id)
}
inline std::string* Rule::mutable_rule_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rule_id();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.Rule.rule_id)
  return _s;
}
inline const std::string& Rule::_internal_rule_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rule_id_.Get();
}
inline void Rule::_internal_set_rule_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_id_.Set(value, GetArena());
}
inline std::string* Rule::_internal_mutable_rule_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.rule_id_.Mutable( GetArena());
}
inline std::string* Rule::release_rule_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.Rule.rule_id)
  return _impl_.rule_id_.Release();
}
inline void Rule::set_allocated_rule_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.rule_id_.IsDefault()) {
          _impl_.rule_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.Rule.rule_id)
}

// int64 version_num = 2 [json_name = "versionNum"];
inline void Rule::clear_version_num() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_num_ = ::int64_t{0};
}
inline ::int64_t Rule::version_num() const {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.Rule.version_num)
  return _internal_version_num();
}
inline void Rule::set_version_num(::int64_t value) {
  _internal_set_version_num(value);
  // @@protoc_insertion_point(field_set:anduril.communicationsmanager.v1.Rule.version_num)
}
inline ::int64_t Rule::_internal_version_num() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_num_;
}
inline void Rule::_internal_set_version_num(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_num_ = value;
}

// bool enabled = 3 [json_name = "enabled"];
inline void Rule::clear_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enabled_ = false;
}
inline bool Rule::enabled() const {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.Rule.enabled)
  return _internal_enabled();
}
inline void Rule::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:anduril.communicationsmanager.v1.Rule.enabled)
}
inline bool Rule::_internal_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enabled_;
}
inline void Rule::_internal_set_enabled(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enabled_ = value;
}

// string name = 4 [json_name = "name"];
inline void Rule::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Rule::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.Rule.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Rule::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:anduril.communicationsmanager.v1.Rule.name)
}
inline std::string* Rule::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.Rule.name)
  return _s;
}
inline const std::string& Rule::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Rule::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Rule::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Rule::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.Rule.name)
  return _impl_.name_.Release();
}
inline void Rule::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.Rule.name)
}

// .anduril.communicationsmanager.v1.DistributionRule distribution_rule = 5 [json_name = "distributionRule"];
inline bool Rule::has_distribution_rule() const {
  return type_case() == kDistributionRule;
}
inline bool Rule::_internal_has_distribution_rule() const {
  return type_case() == kDistributionRule;
}
inline void Rule::set_has_distribution_rule() {
  _impl_._oneof_case_[0] = kDistributionRule;
}
inline void Rule::clear_distribution_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (type_case() == kDistributionRule) {
    if (GetArena() == nullptr) {
      delete _impl_.type_.distribution_rule_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.distribution_rule_);
    }
    clear_has_type();
  }
}
inline ::anduril::communicationsmanager::v1::DistributionRule* Rule::release_distribution_rule() {
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.Rule.distribution_rule)
  if (type_case() == kDistributionRule) {
    clear_has_type();
    auto* temp = _impl_.type_.distribution_rule_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_.distribution_rule_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::anduril::communicationsmanager::v1::DistributionRule& Rule::_internal_distribution_rule() const {
  return type_case() == kDistributionRule ? *_impl_.type_.distribution_rule_ : reinterpret_cast<::anduril::communicationsmanager::v1::DistributionRule&>(::anduril::communicationsmanager::v1::_DistributionRule_default_instance_);
}
inline const ::anduril::communicationsmanager::v1::DistributionRule& Rule::distribution_rule() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.Rule.distribution_rule)
  return _internal_distribution_rule();
}
inline ::anduril::communicationsmanager::v1::DistributionRule* Rule::unsafe_arena_release_distribution_rule() {
  // @@protoc_insertion_point(field_unsafe_arena_release:anduril.communicationsmanager.v1.Rule.distribution_rule)
  if (type_case() == kDistributionRule) {
    clear_has_type();
    auto* temp = _impl_.type_.distribution_rule_;
    _impl_.type_.distribution_rule_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rule::unsafe_arena_set_allocated_distribution_rule(::anduril::communicationsmanager::v1::DistributionRule* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_type();
  if (value) {
    set_has_distribution_rule();
    _impl_.type_.distribution_rule_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.Rule.distribution_rule)
}
inline ::anduril::communicationsmanager::v1::DistributionRule* Rule::_internal_mutable_distribution_rule() {
  if (type_case() != kDistributionRule) {
    clear_type();
    set_has_distribution_rule();
    _impl_.type_.distribution_rule_ =
        ::google::protobuf::Message::DefaultConstruct<::anduril::communicationsmanager::v1::DistributionRule>(GetArena());
  }
  return _impl_.type_.distribution_rule_;
}
inline ::anduril::communicationsmanager::v1::DistributionRule* Rule::mutable_distribution_rule() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::anduril::communicationsmanager::v1::DistributionRule* _msg = _internal_mutable_distribution_rule();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.Rule.distribution_rule)
  return _msg;
}

// .anduril.communicationsmanager.v1.IntegrationRule integration_rule = 6 [json_name = "integrationRule"];
inline bool Rule::has_integration_rule() const {
  return type_case() == kIntegrationRule;
}
inline bool Rule::_internal_has_integration_rule() const {
  return type_case() == kIntegrationRule;
}
inline void Rule::set_has_integration_rule() {
  _impl_._oneof_case_[0] = kIntegrationRule;
}
inline void Rule::clear_integration_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (type_case() == kIntegrationRule) {
    if (GetArena() == nullptr) {
      delete _impl_.type_.integration_rule_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.integration_rule_);
    }
    clear_has_type();
  }
}
inline ::anduril::communicationsmanager::v1::IntegrationRule* Rule::release_integration_rule() {
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.Rule.integration_rule)
  if (type_case() == kIntegrationRule) {
    clear_has_type();
    auto* temp = _impl_.type_.integration_rule_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_.integration_rule_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::anduril::communicationsmanager::v1::IntegrationRule& Rule::_internal_integration_rule() const {
  return type_case() == kIntegrationRule ? *_impl_.type_.integration_rule_ : reinterpret_cast<::anduril::communicationsmanager::v1::IntegrationRule&>(::anduril::communicationsmanager::v1::_IntegrationRule_default_instance_);
}
inline const ::anduril::communicationsmanager::v1::IntegrationRule& Rule::integration_rule() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.Rule.integration_rule)
  return _internal_integration_rule();
}
inline ::anduril::communicationsmanager::v1::IntegrationRule* Rule::unsafe_arena_release_integration_rule() {
  // @@protoc_insertion_point(field_unsafe_arena_release:anduril.communicationsmanager.v1.Rule.integration_rule)
  if (type_case() == kIntegrationRule) {
    clear_has_type();
    auto* temp = _impl_.type_.integration_rule_;
    _impl_.type_.integration_rule_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rule::unsafe_arena_set_allocated_integration_rule(::anduril::communicationsmanager::v1::IntegrationRule* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_type();
  if (value) {
    set_has_integration_rule();
    _impl_.type_.integration_rule_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.Rule.integration_rule)
}
inline ::anduril::communicationsmanager::v1::IntegrationRule* Rule::_internal_mutable_integration_rule() {
  if (type_case() != kIntegrationRule) {
    clear_type();
    set_has_integration_rule();
    _impl_.type_.integration_rule_ =
        ::google::protobuf::Message::DefaultConstruct<::anduril::communicationsmanager::v1::IntegrationRule>(GetArena());
  }
  return _impl_.type_.integration_rule_;
}
inline ::anduril::communicationsmanager::v1::IntegrationRule* Rule::mutable_integration_rule() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::anduril::communicationsmanager::v1::IntegrationRule* _msg = _internal_mutable_integration_rule();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.Rule.integration_rule)
  return _msg;
}

// .anduril.communicationsmanager.v1.CrossDomainRule cross_domain_rule = 9 [json_name = "crossDomainRule"];
inline bool Rule::has_cross_domain_rule() const {
  return type_case() == kCrossDomainRule;
}
inline bool Rule::_internal_has_cross_domain_rule() const {
  return type_case() == kCrossDomainRule;
}
inline void Rule::set_has_cross_domain_rule() {
  _impl_._oneof_case_[0] = kCrossDomainRule;
}
inline void Rule::clear_cross_domain_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (type_case() == kCrossDomainRule) {
    if (GetArena() == nullptr) {
      delete _impl_.type_.cross_domain_rule_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.cross_domain_rule_);
    }
    clear_has_type();
  }
}
inline ::anduril::communicationsmanager::v1::CrossDomainRule* Rule::release_cross_domain_rule() {
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.Rule.cross_domain_rule)
  if (type_case() == kCrossDomainRule) {
    clear_has_type();
    auto* temp = _impl_.type_.cross_domain_rule_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_.cross_domain_rule_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::anduril::communicationsmanager::v1::CrossDomainRule& Rule::_internal_cross_domain_rule() const {
  return type_case() == kCrossDomainRule ? *_impl_.type_.cross_domain_rule_ : reinterpret_cast<::anduril::communicationsmanager::v1::CrossDomainRule&>(::anduril::communicationsmanager::v1::_CrossDomainRule_default_instance_);
}
inline const ::anduril::communicationsmanager::v1::CrossDomainRule& Rule::cross_domain_rule() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.Rule.cross_domain_rule)
  return _internal_cross_domain_rule();
}
inline ::anduril::communicationsmanager::v1::CrossDomainRule* Rule::unsafe_arena_release_cross_domain_rule() {
  // @@protoc_insertion_point(field_unsafe_arena_release:anduril.communicationsmanager.v1.Rule.cross_domain_rule)
  if (type_case() == kCrossDomainRule) {
    clear_has_type();
    auto* temp = _impl_.type_.cross_domain_rule_;
    _impl_.type_.cross_domain_rule_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rule::unsafe_arena_set_allocated_cross_domain_rule(::anduril::communicationsmanager::v1::CrossDomainRule* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_type();
  if (value) {
    set_has_cross_domain_rule();
    _impl_.type_.cross_domain_rule_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.Rule.cross_domain_rule)
}
inline ::anduril::communicationsmanager::v1::CrossDomainRule* Rule::_internal_mutable_cross_domain_rule() {
  if (type_case() != kCrossDomainRule) {
    clear_type();
    set_has_cross_domain_rule();
    _impl_.type_.cross_domain_rule_ =
        ::google::protobuf::Message::DefaultConstruct<::anduril::communicationsmanager::v1::CrossDomainRule>(GetArena());
  }
  return _impl_.type_.cross_domain_rule_;
}
inline ::anduril::communicationsmanager::v1::CrossDomainRule* Rule::mutable_cross_domain_rule() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::anduril::communicationsmanager::v1::CrossDomainRule* _msg = _internal_mutable_cross_domain_rule();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.Rule.cross_domain_rule)
  return _msg;
}

// string last_modified_by_user = 7 [json_name = "lastModifiedByUser"];
inline void Rule::clear_last_modified_by_user() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_modified_by_user_.ClearToEmpty();
}
inline const std::string& Rule::last_modified_by_user() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.Rule.last_modified_by_user)
  return _internal_last_modified_by_user();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Rule::set_last_modified_by_user(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_modified_by_user_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:anduril.communicationsmanager.v1.Rule.last_modified_by_user)
}
inline std::string* Rule::mutable_last_modified_by_user() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_modified_by_user();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.Rule.last_modified_by_user)
  return _s;
}
inline const std::string& Rule::_internal_last_modified_by_user() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_modified_by_user_.Get();
}
inline void Rule::_internal_set_last_modified_by_user(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_modified_by_user_.Set(value, GetArena());
}
inline std::string* Rule::_internal_mutable_last_modified_by_user() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.last_modified_by_user_.Mutable( GetArena());
}
inline std::string* Rule::release_last_modified_by_user() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.Rule.last_modified_by_user)
  return _impl_.last_modified_by_user_.Release();
}
inline void Rule::set_allocated_last_modified_by_user(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_modified_by_user_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.last_modified_by_user_.IsDefault()) {
          _impl_.last_modified_by_user_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.Rule.last_modified_by_user)
}

// int64 last_modified_time_unix_epoch_ms = 8 [json_name = "lastModifiedTimeUnixEpochMs"];
inline void Rule::clear_last_modified_time_unix_epoch_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_modified_time_unix_epoch_ms_ = ::int64_t{0};
}
inline ::int64_t Rule::last_modified_time_unix_epoch_ms() const {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.Rule.last_modified_time_unix_epoch_ms)
  return _internal_last_modified_time_unix_epoch_ms();
}
inline void Rule::set_last_modified_time_unix_epoch_ms(::int64_t value) {
  _internal_set_last_modified_time_unix_epoch_ms(value);
  // @@protoc_insertion_point(field_set:anduril.communicationsmanager.v1.Rule.last_modified_time_unix_epoch_ms)
}
inline ::int64_t Rule::_internal_last_modified_time_unix_epoch_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_modified_time_unix_epoch_ms_;
}
inline void Rule::_internal_set_last_modified_time_unix_epoch_ms(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_modified_time_unix_epoch_ms_ = value;
}

inline bool Rule::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void Rule::clear_has_type() {
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}
inline Rule::TypeCase Rule::type_case() const {
  return Rule::TypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// IntegrationRule

// string integration_name = 1 [json_name = "integrationName"];
inline void IntegrationRule::clear_integration_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.integration_name_.ClearToEmpty();
}
inline const std::string& IntegrationRule::integration_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.IntegrationRule.integration_name)
  return _internal_integration_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IntegrationRule::set_integration_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.integration_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:anduril.communicationsmanager.v1.IntegrationRule.integration_name)
}
inline std::string* IntegrationRule::mutable_integration_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_integration_name();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.IntegrationRule.integration_name)
  return _s;
}
inline const std::string& IntegrationRule::_internal_integration_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.integration_name_.Get();
}
inline void IntegrationRule::_internal_set_integration_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.integration_name_.Set(value, GetArena());
}
inline std::string* IntegrationRule::_internal_mutable_integration_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.integration_name_.Mutable( GetArena());
}
inline std::string* IntegrationRule::release_integration_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.IntegrationRule.integration_name)
  return _impl_.integration_name_.Release();
}
inline void IntegrationRule::set_allocated_integration_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.integration_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.integration_name_.IsDefault()) {
          _impl_.integration_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.IntegrationRule.integration_name)
}

// string host_id = 2 [json_name = "hostId"];
inline void IntegrationRule::clear_host_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.host_id_.ClearToEmpty();
}
inline const std::string& IntegrationRule::host_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.IntegrationRule.host_id)
  return _internal_host_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IntegrationRule::set_host_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.host_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:anduril.communicationsmanager.v1.IntegrationRule.host_id)
}
inline std::string* IntegrationRule::mutable_host_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_host_id();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.IntegrationRule.host_id)
  return _s;
}
inline const std::string& IntegrationRule::_internal_host_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.host_id_.Get();
}
inline void IntegrationRule::_internal_set_host_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.host_id_.Set(value, GetArena());
}
inline std::string* IntegrationRule::_internal_mutable_host_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.host_id_.Mutable( GetArena());
}
inline std::string* IntegrationRule::release_host_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.IntegrationRule.host_id)
  return _impl_.host_id_.Release();
}
inline void IntegrationRule::set_allocated_host_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.host_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.host_id_.IsDefault()) {
          _impl_.host_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.IntegrationRule.host_id)
}

// .anduril.communicationsmanager.v1.EntityIntegrationRuleDetails entity_integration_rule_details = 3 [json_name = "entityIntegrationRuleDetails"];
inline bool IntegrationRule::has_entity_integration_rule_details() const {
  return details_case() == kEntityIntegrationRuleDetails;
}
inline bool IntegrationRule::_internal_has_entity_integration_rule_details() const {
  return details_case() == kEntityIntegrationRuleDetails;
}
inline void IntegrationRule::set_has_entity_integration_rule_details() {
  _impl_._oneof_case_[0] = kEntityIntegrationRuleDetails;
}
inline ::anduril::communicationsmanager::v1::EntityIntegrationRuleDetails* IntegrationRule::release_entity_integration_rule_details() {
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.IntegrationRule.entity_integration_rule_details)
  if (details_case() == kEntityIntegrationRuleDetails) {
    clear_has_details();
    auto* temp = _impl_.details_.entity_integration_rule_details_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.details_.entity_integration_rule_details_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::anduril::communicationsmanager::v1::EntityIntegrationRuleDetails& IntegrationRule::_internal_entity_integration_rule_details() const {
  return details_case() == kEntityIntegrationRuleDetails ? *_impl_.details_.entity_integration_rule_details_ : reinterpret_cast<::anduril::communicationsmanager::v1::EntityIntegrationRuleDetails&>(::anduril::communicationsmanager::v1::_EntityIntegrationRuleDetails_default_instance_);
}
inline const ::anduril::communicationsmanager::v1::EntityIntegrationRuleDetails& IntegrationRule::entity_integration_rule_details() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.IntegrationRule.entity_integration_rule_details)
  return _internal_entity_integration_rule_details();
}
inline ::anduril::communicationsmanager::v1::EntityIntegrationRuleDetails* IntegrationRule::unsafe_arena_release_entity_integration_rule_details() {
  // @@protoc_insertion_point(field_unsafe_arena_release:anduril.communicationsmanager.v1.IntegrationRule.entity_integration_rule_details)
  if (details_case() == kEntityIntegrationRuleDetails) {
    clear_has_details();
    auto* temp = _impl_.details_.entity_integration_rule_details_;
    _impl_.details_.entity_integration_rule_details_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void IntegrationRule::unsafe_arena_set_allocated_entity_integration_rule_details(::anduril::communicationsmanager::v1::EntityIntegrationRuleDetails* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_details();
  if (value) {
    set_has_entity_integration_rule_details();
    _impl_.details_.entity_integration_rule_details_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.IntegrationRule.entity_integration_rule_details)
}
inline ::anduril::communicationsmanager::v1::EntityIntegrationRuleDetails* IntegrationRule::_internal_mutable_entity_integration_rule_details() {
  if (details_case() != kEntityIntegrationRuleDetails) {
    clear_details();
    set_has_entity_integration_rule_details();
    _impl_.details_.entity_integration_rule_details_ =
        ::google::protobuf::Message::DefaultConstruct<::anduril::communicationsmanager::v1::EntityIntegrationRuleDetails>(GetArena());
  }
  return _impl_.details_.entity_integration_rule_details_;
}
inline ::anduril::communicationsmanager::v1::EntityIntegrationRuleDetails* IntegrationRule::mutable_entity_integration_rule_details() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::anduril::communicationsmanager::v1::EntityIntegrationRuleDetails* _msg = _internal_mutable_entity_integration_rule_details();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.IntegrationRule.entity_integration_rule_details)
  return _msg;
}

// .anduril.communicationsmanager.v1.BlobDistributionRuleDetails blob_integration_rule_details = 4 [json_name = "blobIntegrationRuleDetails"];
inline bool IntegrationRule::has_blob_integration_rule_details() const {
  return details_case() == kBlobIntegrationRuleDetails;
}
inline bool IntegrationRule::_internal_has_blob_integration_rule_details() const {
  return details_case() == kBlobIntegrationRuleDetails;
}
inline void IntegrationRule::set_has_blob_integration_rule_details() {
  _impl_._oneof_case_[0] = kBlobIntegrationRuleDetails;
}
inline void IntegrationRule::clear_blob_integration_rule_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (details_case() == kBlobIntegrationRuleDetails) {
    if (GetArena() == nullptr) {
      delete _impl_.details_.blob_integration_rule_details_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.details_.blob_integration_rule_details_);
    }
    clear_has_details();
  }
}
inline ::anduril::communicationsmanager::v1::BlobDistributionRuleDetails* IntegrationRule::release_blob_integration_rule_details() {
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.IntegrationRule.blob_integration_rule_details)
  if (details_case() == kBlobIntegrationRuleDetails) {
    clear_has_details();
    auto* temp = _impl_.details_.blob_integration_rule_details_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.details_.blob_integration_rule_details_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::anduril::communicationsmanager::v1::BlobDistributionRuleDetails& IntegrationRule::_internal_blob_integration_rule_details() const {
  return details_case() == kBlobIntegrationRuleDetails ? *_impl_.details_.blob_integration_rule_details_ : reinterpret_cast<::anduril::communicationsmanager::v1::BlobDistributionRuleDetails&>(::anduril::communicationsmanager::v1::_BlobDistributionRuleDetails_default_instance_);
}
inline const ::anduril::communicationsmanager::v1::BlobDistributionRuleDetails& IntegrationRule::blob_integration_rule_details() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.IntegrationRule.blob_integration_rule_details)
  return _internal_blob_integration_rule_details();
}
inline ::anduril::communicationsmanager::v1::BlobDistributionRuleDetails* IntegrationRule::unsafe_arena_release_blob_integration_rule_details() {
  // @@protoc_insertion_point(field_unsafe_arena_release:anduril.communicationsmanager.v1.IntegrationRule.blob_integration_rule_details)
  if (details_case() == kBlobIntegrationRuleDetails) {
    clear_has_details();
    auto* temp = _impl_.details_.blob_integration_rule_details_;
    _impl_.details_.blob_integration_rule_details_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void IntegrationRule::unsafe_arena_set_allocated_blob_integration_rule_details(::anduril::communicationsmanager::v1::BlobDistributionRuleDetails* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_details();
  if (value) {
    set_has_blob_integration_rule_details();
    _impl_.details_.blob_integration_rule_details_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.IntegrationRule.blob_integration_rule_details)
}
inline ::anduril::communicationsmanager::v1::BlobDistributionRuleDetails* IntegrationRule::_internal_mutable_blob_integration_rule_details() {
  if (details_case() != kBlobIntegrationRuleDetails) {
    clear_details();
    set_has_blob_integration_rule_details();
    _impl_.details_.blob_integration_rule_details_ =
        ::google::protobuf::Message::DefaultConstruct<::anduril::communicationsmanager::v1::BlobDistributionRuleDetails>(GetArena());
  }
  return _impl_.details_.blob_integration_rule_details_;
}
inline ::anduril::communicationsmanager::v1::BlobDistributionRuleDetails* IntegrationRule::mutable_blob_integration_rule_details() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::anduril::communicationsmanager::v1::BlobDistributionRuleDetails* _msg = _internal_mutable_blob_integration_rule_details();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.IntegrationRule.blob_integration_rule_details)
  return _msg;
}

inline bool IntegrationRule::has_details() const {
  return details_case() != DETAILS_NOT_SET;
}
inline void IntegrationRule::clear_has_details() {
  _impl_._oneof_case_[0] = DETAILS_NOT_SET;
}
inline IntegrationRule::DetailsCase IntegrationRule::details_case() const {
  return IntegrationRule::DetailsCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// DistributionRule

// string rule_id = 1 [json_name = "ruleId"];
inline void DistributionRule::clear_rule_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_id_.ClearToEmpty();
}
inline const std::string& DistributionRule::rule_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.DistributionRule.rule_id)
  return _internal_rule_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DistributionRule::set_rule_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:anduril.communicationsmanager.v1.DistributionRule.rule_id)
}
inline std::string* DistributionRule::mutable_rule_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rule_id();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.DistributionRule.rule_id)
  return _s;
}
inline const std::string& DistributionRule::_internal_rule_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rule_id_.Get();
}
inline void DistributionRule::_internal_set_rule_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_id_.Set(value, GetArena());
}
inline std::string* DistributionRule::_internal_mutable_rule_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.rule_id_.Mutable( GetArena());
}
inline std::string* DistributionRule::release_rule_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.DistributionRule.rule_id)
  return _impl_.rule_id_.Release();
}
inline void DistributionRule::set_allocated_rule_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.rule_id_.IsDefault()) {
          _impl_.rule_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.DistributionRule.rule_id)
}

// string version = 2 [json_name = "version", deprecated = true];
inline void DistributionRule::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.ClearToEmpty();
}
inline const std::string& DistributionRule::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.DistributionRule.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DistributionRule::set_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:anduril.communicationsmanager.v1.DistributionRule.version)
}
inline std::string* DistributionRule::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.DistributionRule.version)
  return _s;
}
inline const std::string& DistributionRule::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_.Get();
}
inline void DistributionRule::_internal_set_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(value, GetArena());
}
inline std::string* DistributionRule::_internal_mutable_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.version_.Mutable( GetArena());
}
inline std::string* DistributionRule::release_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.DistributionRule.version)
  return _impl_.version_.Release();
}
inline void DistributionRule::set_allocated_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.DistributionRule.version)
}

// bool enabled = 3 [json_name = "enabled"];
inline void DistributionRule::clear_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enabled_ = false;
}
inline bool DistributionRule::enabled() const {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.DistributionRule.enabled)
  return _internal_enabled();
}
inline void DistributionRule::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:anduril.communicationsmanager.v1.DistributionRule.enabled)
}
inline bool DistributionRule::_internal_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enabled_;
}
inline void DistributionRule::_internal_set_enabled(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enabled_ = value;
}

// .anduril.communicationsmanager.v1.Source source = 4 [json_name = "source", deprecated = true];
inline bool DistributionRule::has_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.source_ != nullptr);
  return value;
}
inline void DistributionRule::clear_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.source_ != nullptr) _impl_.source_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::anduril::communicationsmanager::v1::Source& DistributionRule::_internal_source() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::anduril::communicationsmanager::v1::Source* p = _impl_.source_;
  return p != nullptr ? *p : reinterpret_cast<const ::anduril::communicationsmanager::v1::Source&>(::anduril::communicationsmanager::v1::_Source_default_instance_);
}
inline const ::anduril::communicationsmanager::v1::Source& DistributionRule::source() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.DistributionRule.source)
  return _internal_source();
}
inline void DistributionRule::unsafe_arena_set_allocated_source(::anduril::communicationsmanager::v1::Source* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.source_);
  }
  _impl_.source_ = reinterpret_cast<::anduril::communicationsmanager::v1::Source*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.DistributionRule.source)
}
inline ::anduril::communicationsmanager::v1::Source* DistributionRule::release_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::communicationsmanager::v1::Source* released = _impl_.source_;
  _impl_.source_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::anduril::communicationsmanager::v1::Source* DistributionRule::unsafe_arena_release_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.DistributionRule.source)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::communicationsmanager::v1::Source* temp = _impl_.source_;
  _impl_.source_ = nullptr;
  return temp;
}
inline ::anduril::communicationsmanager::v1::Source* DistributionRule::_internal_mutable_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.source_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::anduril::communicationsmanager::v1::Source>(GetArena());
    _impl_.source_ = reinterpret_cast<::anduril::communicationsmanager::v1::Source*>(p);
  }
  return _impl_.source_;
}
inline ::anduril::communicationsmanager::v1::Source* DistributionRule::mutable_source() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::anduril::communicationsmanager::v1::Source* _msg = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.DistributionRule.source)
  return _msg;
}
inline void DistributionRule::set_allocated_source(::anduril::communicationsmanager::v1::Source* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.source_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.source_ = reinterpret_cast<::anduril::communicationsmanager::v1::Source*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.DistributionRule.source)
}

// repeated .anduril.communicationsmanager.v1.Source sources = 8 [json_name = "sources", deprecated = true];
inline int DistributionRule::_internal_sources_size() const {
  return _internal_sources().size();
}
inline int DistributionRule::sources_size() const {
  return _internal_sources_size();
}
inline void DistributionRule::clear_sources() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sources_.Clear();
}
inline ::anduril::communicationsmanager::v1::Source* DistributionRule::mutable_sources(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.DistributionRule.sources)
  return _internal_mutable_sources()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::anduril::communicationsmanager::v1::Source>* DistributionRule::mutable_sources()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:anduril.communicationsmanager.v1.DistributionRule.sources)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_sources();
}
inline const ::anduril::communicationsmanager::v1::Source& DistributionRule::sources(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.DistributionRule.sources)
  return _internal_sources().Get(index);
}
inline ::anduril::communicationsmanager::v1::Source* DistributionRule::add_sources() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::anduril::communicationsmanager::v1::Source* _add = _internal_mutable_sources()->Add();
  // @@protoc_insertion_point(field_add:anduril.communicationsmanager.v1.DistributionRule.sources)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::anduril::communicationsmanager::v1::Source>& DistributionRule::sources() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:anduril.communicationsmanager.v1.DistributionRule.sources)
  return _internal_sources();
}
inline const ::google::protobuf::RepeatedPtrField<::anduril::communicationsmanager::v1::Source>&
DistributionRule::_internal_sources() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sources_;
}
inline ::google::protobuf::RepeatedPtrField<::anduril::communicationsmanager::v1::Source>*
DistributionRule::_internal_mutable_sources() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.sources_;
}

// .anduril.communicationsmanager.v1.Destination destination = 5 [json_name = "destination", deprecated = true];
inline bool DistributionRule::has_destination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.destination_ != nullptr);
  return value;
}
inline void DistributionRule::clear_destination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.destination_ != nullptr) _impl_.destination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::anduril::communicationsmanager::v1::Destination& DistributionRule::_internal_destination() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::anduril::communicationsmanager::v1::Destination* p = _impl_.destination_;
  return p != nullptr ? *p : reinterpret_cast<const ::anduril::communicationsmanager::v1::Destination&>(::anduril::communicationsmanager::v1::_Destination_default_instance_);
}
inline const ::anduril::communicationsmanager::v1::Destination& DistributionRule::destination() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.DistributionRule.destination)
  return _internal_destination();
}
inline void DistributionRule::unsafe_arena_set_allocated_destination(::anduril::communicationsmanager::v1::Destination* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.destination_);
  }
  _impl_.destination_ = reinterpret_cast<::anduril::communicationsmanager::v1::Destination*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.DistributionRule.destination)
}
inline ::anduril::communicationsmanager::v1::Destination* DistributionRule::release_destination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::anduril::communicationsmanager::v1::Destination* released = _impl_.destination_;
  _impl_.destination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::anduril::communicationsmanager::v1::Destination* DistributionRule::unsafe_arena_release_destination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.DistributionRule.destination)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::anduril::communicationsmanager::v1::Destination* temp = _impl_.destination_;
  _impl_.destination_ = nullptr;
  return temp;
}
inline ::anduril::communicationsmanager::v1::Destination* DistributionRule::_internal_mutable_destination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.destination_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::anduril::communicationsmanager::v1::Destination>(GetArena());
    _impl_.destination_ = reinterpret_cast<::anduril::communicationsmanager::v1::Destination*>(p);
  }
  return _impl_.destination_;
}
inline ::anduril::communicationsmanager::v1::Destination* DistributionRule::mutable_destination() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::anduril::communicationsmanager::v1::Destination* _msg = _internal_mutable_destination();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.DistributionRule.destination)
  return _msg;
}
inline void DistributionRule::set_allocated_destination(::anduril::communicationsmanager::v1::Destination* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.destination_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.destination_ = reinterpret_cast<::anduril::communicationsmanager::v1::Destination*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.DistributionRule.destination)
}

// .anduril.communicationsmanager.v1.EntityDistributionRuleDetails entity_details = 6 [json_name = "entityDetails"];
inline bool DistributionRule::has_entity_details() const {
  return details_case() == kEntityDetails;
}
inline bool DistributionRule::_internal_has_entity_details() const {
  return details_case() == kEntityDetails;
}
inline void DistributionRule::set_has_entity_details() {
  _impl_._oneof_case_[0] = kEntityDetails;
}
inline void DistributionRule::clear_entity_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (details_case() == kEntityDetails) {
    if (GetArena() == nullptr) {
      delete _impl_.details_.entity_details_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.details_.entity_details_);
    }
    clear_has_details();
  }
}
inline ::anduril::communicationsmanager::v1::EntityDistributionRuleDetails* DistributionRule::release_entity_details() {
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.DistributionRule.entity_details)
  if (details_case() == kEntityDetails) {
    clear_has_details();
    auto* temp = _impl_.details_.entity_details_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.details_.entity_details_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::anduril::communicationsmanager::v1::EntityDistributionRuleDetails& DistributionRule::_internal_entity_details() const {
  return details_case() == kEntityDetails ? *_impl_.details_.entity_details_ : reinterpret_cast<::anduril::communicationsmanager::v1::EntityDistributionRuleDetails&>(::anduril::communicationsmanager::v1::_EntityDistributionRuleDetails_default_instance_);
}
inline const ::anduril::communicationsmanager::v1::EntityDistributionRuleDetails& DistributionRule::entity_details() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.DistributionRule.entity_details)
  return _internal_entity_details();
}
inline ::anduril::communicationsmanager::v1::EntityDistributionRuleDetails* DistributionRule::unsafe_arena_release_entity_details() {
  // @@protoc_insertion_point(field_unsafe_arena_release:anduril.communicationsmanager.v1.DistributionRule.entity_details)
  if (details_case() == kEntityDetails) {
    clear_has_details();
    auto* temp = _impl_.details_.entity_details_;
    _impl_.details_.entity_details_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DistributionRule::unsafe_arena_set_allocated_entity_details(::anduril::communicationsmanager::v1::EntityDistributionRuleDetails* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_details();
  if (value) {
    set_has_entity_details();
    _impl_.details_.entity_details_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.DistributionRule.entity_details)
}
inline ::anduril::communicationsmanager::v1::EntityDistributionRuleDetails* DistributionRule::_internal_mutable_entity_details() {
  if (details_case() != kEntityDetails) {
    clear_details();
    set_has_entity_details();
    _impl_.details_.entity_details_ =
        ::google::protobuf::Message::DefaultConstruct<::anduril::communicationsmanager::v1::EntityDistributionRuleDetails>(GetArena());
  }
  return _impl_.details_.entity_details_;
}
inline ::anduril::communicationsmanager::v1::EntityDistributionRuleDetails* DistributionRule::mutable_entity_details() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::anduril::communicationsmanager::v1::EntityDistributionRuleDetails* _msg = _internal_mutable_entity_details();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.DistributionRule.entity_details)
  return _msg;
}

// .anduril.communicationsmanager.v1.BlobDistributionRuleDetails blob_details = 13 [json_name = "blobDetails"];
inline bool DistributionRule::has_blob_details() const {
  return details_case() == kBlobDetails;
}
inline bool DistributionRule::_internal_has_blob_details() const {
  return details_case() == kBlobDetails;
}
inline void DistributionRule::set_has_blob_details() {
  _impl_._oneof_case_[0] = kBlobDetails;
}
inline void DistributionRule::clear_blob_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (details_case() == kBlobDetails) {
    if (GetArena() == nullptr) {
      delete _impl_.details_.blob_details_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.details_.blob_details_);
    }
    clear_has_details();
  }
}
inline ::anduril::communicationsmanager::v1::BlobDistributionRuleDetails* DistributionRule::release_blob_details() {
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.DistributionRule.blob_details)
  if (details_case() == kBlobDetails) {
    clear_has_details();
    auto* temp = _impl_.details_.blob_details_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.details_.blob_details_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::anduril::communicationsmanager::v1::BlobDistributionRuleDetails& DistributionRule::_internal_blob_details() const {
  return details_case() == kBlobDetails ? *_impl_.details_.blob_details_ : reinterpret_cast<::anduril::communicationsmanager::v1::BlobDistributionRuleDetails&>(::anduril::communicationsmanager::v1::_BlobDistributionRuleDetails_default_instance_);
}
inline const ::anduril::communicationsmanager::v1::BlobDistributionRuleDetails& DistributionRule::blob_details() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.DistributionRule.blob_details)
  return _internal_blob_details();
}
inline ::anduril::communicationsmanager::v1::BlobDistributionRuleDetails* DistributionRule::unsafe_arena_release_blob_details() {
  // @@protoc_insertion_point(field_unsafe_arena_release:anduril.communicationsmanager.v1.DistributionRule.blob_details)
  if (details_case() == kBlobDetails) {
    clear_has_details();
    auto* temp = _impl_.details_.blob_details_;
    _impl_.details_.blob_details_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DistributionRule::unsafe_arena_set_allocated_blob_details(::anduril::communicationsmanager::v1::BlobDistributionRuleDetails* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_details();
  if (value) {
    set_has_blob_details();
    _impl_.details_.blob_details_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.DistributionRule.blob_details)
}
inline ::anduril::communicationsmanager::v1::BlobDistributionRuleDetails* DistributionRule::_internal_mutable_blob_details() {
  if (details_case() != kBlobDetails) {
    clear_details();
    set_has_blob_details();
    _impl_.details_.blob_details_ =
        ::google::protobuf::Message::DefaultConstruct<::anduril::communicationsmanager::v1::BlobDistributionRuleDetails>(GetArena());
  }
  return _impl_.details_.blob_details_;
}
inline ::anduril::communicationsmanager::v1::BlobDistributionRuleDetails* DistributionRule::mutable_blob_details() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::anduril::communicationsmanager::v1::BlobDistributionRuleDetails* _msg = _internal_mutable_blob_details();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.DistributionRule.blob_details)
  return _msg;
}

// uint32 priority = 7 [json_name = "priority"];
inline void DistributionRule::clear_priority() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.priority_ = 0u;
}
inline ::uint32_t DistributionRule::priority() const {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.DistributionRule.priority)
  return _internal_priority();
}
inline void DistributionRule::set_priority(::uint32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:anduril.communicationsmanager.v1.DistributionRule.priority)
}
inline ::uint32_t DistributionRule::_internal_priority() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.priority_;
}
inline void DistributionRule::_internal_set_priority(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.priority_ = value;
}

// string description = 9 [json_name = "description"];
inline void DistributionRule::clear_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& DistributionRule::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.DistributionRule.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DistributionRule::set_description(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:anduril.communicationsmanager.v1.DistributionRule.description)
}
inline std::string* DistributionRule::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.DistributionRule.description)
  return _s;
}
inline const std::string& DistributionRule::_internal_description() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.description_.Get();
}
inline void DistributionRule::_internal_set_description(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(value, GetArena());
}
inline std::string* DistributionRule::_internal_mutable_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* DistributionRule::release_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.DistributionRule.description)
  return _impl_.description_.Release();
}
inline void DistributionRule::set_allocated_description(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.DistributionRule.description)
}

// string name = 10 [json_name = "name"];
inline void DistributionRule::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DistributionRule::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.DistributionRule.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DistributionRule::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:anduril.communicationsmanager.v1.DistributionRule.name)
}
inline std::string* DistributionRule::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.DistributionRule.name)
  return _s;
}
inline const std::string& DistributionRule::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void DistributionRule::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* DistributionRule::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* DistributionRule::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.DistributionRule.name)
  return _impl_.name_.Release();
}
inline void DistributionRule::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.DistributionRule.name)
}

// int64 version_num = 11 [json_name = "versionNum"];
inline void DistributionRule::clear_version_num() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_num_ = ::int64_t{0};
}
inline ::int64_t DistributionRule::version_num() const {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.DistributionRule.version_num)
  return _internal_version_num();
}
inline void DistributionRule::set_version_num(::int64_t value) {
  _internal_set_version_num(value);
  // @@protoc_insertion_point(field_set:anduril.communicationsmanager.v1.DistributionRule.version_num)
}
inline ::int64_t DistributionRule::_internal_version_num() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_num_;
}
inline void DistributionRule::_internal_set_version_num(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_num_ = value;
}

// .anduril.communicationsmanager.v1.SourceDestinationDirectionalControl source_destination_directional_control = 12 [json_name = "sourceDestinationDirectionalControl"];
inline bool DistributionRule::has_source_destination_directional_control() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.source_destination_directional_control_ != nullptr);
  return value;
}
inline void DistributionRule::clear_source_destination_directional_control() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.source_destination_directional_control_ != nullptr) _impl_.source_destination_directional_control_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::anduril::communicationsmanager::v1::SourceDestinationDirectionalControl& DistributionRule::_internal_source_destination_directional_control() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::anduril::communicationsmanager::v1::SourceDestinationDirectionalControl* p = _impl_.source_destination_directional_control_;
  return p != nullptr ? *p : reinterpret_cast<const ::anduril::communicationsmanager::v1::SourceDestinationDirectionalControl&>(::anduril::communicationsmanager::v1::_SourceDestinationDirectionalControl_default_instance_);
}
inline const ::anduril::communicationsmanager::v1::SourceDestinationDirectionalControl& DistributionRule::source_destination_directional_control() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.DistributionRule.source_destination_directional_control)
  return _internal_source_destination_directional_control();
}
inline void DistributionRule::unsafe_arena_set_allocated_source_destination_directional_control(::anduril::communicationsmanager::v1::SourceDestinationDirectionalControl* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.source_destination_directional_control_);
  }
  _impl_.source_destination_directional_control_ = reinterpret_cast<::anduril::communicationsmanager::v1::SourceDestinationDirectionalControl*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.DistributionRule.source_destination_directional_control)
}
inline ::anduril::communicationsmanager::v1::SourceDestinationDirectionalControl* DistributionRule::release_source_destination_directional_control() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::anduril::communicationsmanager::v1::SourceDestinationDirectionalControl* released = _impl_.source_destination_directional_control_;
  _impl_.source_destination_directional_control_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::anduril::communicationsmanager::v1::SourceDestinationDirectionalControl* DistributionRule::unsafe_arena_release_source_destination_directional_control() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.DistributionRule.source_destination_directional_control)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::anduril::communicationsmanager::v1::SourceDestinationDirectionalControl* temp = _impl_.source_destination_directional_control_;
  _impl_.source_destination_directional_control_ = nullptr;
  return temp;
}
inline ::anduril::communicationsmanager::v1::SourceDestinationDirectionalControl* DistributionRule::_internal_mutable_source_destination_directional_control() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.source_destination_directional_control_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::anduril::communicationsmanager::v1::SourceDestinationDirectionalControl>(GetArena());
    _impl_.source_destination_directional_control_ = reinterpret_cast<::anduril::communicationsmanager::v1::SourceDestinationDirectionalControl*>(p);
  }
  return _impl_.source_destination_directional_control_;
}
inline ::anduril::communicationsmanager::v1::SourceDestinationDirectionalControl* DistributionRule::mutable_source_destination_directional_control() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::anduril::communicationsmanager::v1::SourceDestinationDirectionalControl* _msg = _internal_mutable_source_destination_directional_control();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.DistributionRule.source_destination_directional_control)
  return _msg;
}
inline void DistributionRule::set_allocated_source_destination_directional_control(::anduril::communicationsmanager::v1::SourceDestinationDirectionalControl* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.source_destination_directional_control_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.source_destination_directional_control_ = reinterpret_cast<::anduril::communicationsmanager::v1::SourceDestinationDirectionalControl*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.DistributionRule.source_destination_directional_control)
}

inline bool DistributionRule::has_details() const {
  return details_case() != DETAILS_NOT_SET;
}
inline void DistributionRule::clear_has_details() {
  _impl_._oneof_case_[0] = DETAILS_NOT_SET;
}
inline DistributionRule::DetailsCase DistributionRule::details_case() const {
  return DistributionRule::DetailsCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// SourceDestinationDirectionalControl

// .anduril.communicationsmanager.v1.InboundRuleSourceDestination inbound_rule_source_destination = 1 [json_name = "inboundRuleSourceDestination"];
inline bool SourceDestinationDirectionalControl::has_inbound_rule_source_destination() const {
  return source_destination_case() == kInboundRuleSourceDestination;
}
inline bool SourceDestinationDirectionalControl::_internal_has_inbound_rule_source_destination() const {
  return source_destination_case() == kInboundRuleSourceDestination;
}
inline void SourceDestinationDirectionalControl::set_has_inbound_rule_source_destination() {
  _impl_._oneof_case_[0] = kInboundRuleSourceDestination;
}
inline void SourceDestinationDirectionalControl::clear_inbound_rule_source_destination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (source_destination_case() == kInboundRuleSourceDestination) {
    if (GetArena() == nullptr) {
      delete _impl_.source_destination_.inbound_rule_source_destination_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.source_destination_.inbound_rule_source_destination_);
    }
    clear_has_source_destination();
  }
}
inline ::anduril::communicationsmanager::v1::InboundRuleSourceDestination* SourceDestinationDirectionalControl::release_inbound_rule_source_destination() {
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.SourceDestinationDirectionalControl.inbound_rule_source_destination)
  if (source_destination_case() == kInboundRuleSourceDestination) {
    clear_has_source_destination();
    auto* temp = _impl_.source_destination_.inbound_rule_source_destination_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.source_destination_.inbound_rule_source_destination_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::anduril::communicationsmanager::v1::InboundRuleSourceDestination& SourceDestinationDirectionalControl::_internal_inbound_rule_source_destination() const {
  return source_destination_case() == kInboundRuleSourceDestination ? *_impl_.source_destination_.inbound_rule_source_destination_ : reinterpret_cast<::anduril::communicationsmanager::v1::InboundRuleSourceDestination&>(::anduril::communicationsmanager::v1::_InboundRuleSourceDestination_default_instance_);
}
inline const ::anduril::communicationsmanager::v1::InboundRuleSourceDestination& SourceDestinationDirectionalControl::inbound_rule_source_destination() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.SourceDestinationDirectionalControl.inbound_rule_source_destination)
  return _internal_inbound_rule_source_destination();
}
inline ::anduril::communicationsmanager::v1::InboundRuleSourceDestination* SourceDestinationDirectionalControl::unsafe_arena_release_inbound_rule_source_destination() {
  // @@protoc_insertion_point(field_unsafe_arena_release:anduril.communicationsmanager.v1.SourceDestinationDirectionalControl.inbound_rule_source_destination)
  if (source_destination_case() == kInboundRuleSourceDestination) {
    clear_has_source_destination();
    auto* temp = _impl_.source_destination_.inbound_rule_source_destination_;
    _impl_.source_destination_.inbound_rule_source_destination_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SourceDestinationDirectionalControl::unsafe_arena_set_allocated_inbound_rule_source_destination(::anduril::communicationsmanager::v1::InboundRuleSourceDestination* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_source_destination();
  if (value) {
    set_has_inbound_rule_source_destination();
    _impl_.source_destination_.inbound_rule_source_destination_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.SourceDestinationDirectionalControl.inbound_rule_source_destination)
}
inline ::anduril::communicationsmanager::v1::InboundRuleSourceDestination* SourceDestinationDirectionalControl::_internal_mutable_inbound_rule_source_destination() {
  if (source_destination_case() != kInboundRuleSourceDestination) {
    clear_source_destination();
    set_has_inbound_rule_source_destination();
    _impl_.source_destination_.inbound_rule_source_destination_ =
        ::google::protobuf::Message::DefaultConstruct<::anduril::communicationsmanager::v1::InboundRuleSourceDestination>(GetArena());
  }
  return _impl_.source_destination_.inbound_rule_source_destination_;
}
inline ::anduril::communicationsmanager::v1::InboundRuleSourceDestination* SourceDestinationDirectionalControl::mutable_inbound_rule_source_destination() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::anduril::communicationsmanager::v1::InboundRuleSourceDestination* _msg = _internal_mutable_inbound_rule_source_destination();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.SourceDestinationDirectionalControl.inbound_rule_source_destination)
  return _msg;
}

// .anduril.communicationsmanager.v1.OutboundRuleSourceDestination outbound_rule_source_destination = 2 [json_name = "outboundRuleSourceDestination"];
inline bool SourceDestinationDirectionalControl::has_outbound_rule_source_destination() const {
  return source_destination_case() == kOutboundRuleSourceDestination;
}
inline bool SourceDestinationDirectionalControl::_internal_has_outbound_rule_source_destination() const {
  return source_destination_case() == kOutboundRuleSourceDestination;
}
inline void SourceDestinationDirectionalControl::set_has_outbound_rule_source_destination() {
  _impl_._oneof_case_[0] = kOutboundRuleSourceDestination;
}
inline void SourceDestinationDirectionalControl::clear_outbound_rule_source_destination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (source_destination_case() == kOutboundRuleSourceDestination) {
    if (GetArena() == nullptr) {
      delete _impl_.source_destination_.outbound_rule_source_destination_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.source_destination_.outbound_rule_source_destination_);
    }
    clear_has_source_destination();
  }
}
inline ::anduril::communicationsmanager::v1::OutboundRuleSourceDestination* SourceDestinationDirectionalControl::release_outbound_rule_source_destination() {
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.SourceDestinationDirectionalControl.outbound_rule_source_destination)
  if (source_destination_case() == kOutboundRuleSourceDestination) {
    clear_has_source_destination();
    auto* temp = _impl_.source_destination_.outbound_rule_source_destination_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.source_destination_.outbound_rule_source_destination_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::anduril::communicationsmanager::v1::OutboundRuleSourceDestination& SourceDestinationDirectionalControl::_internal_outbound_rule_source_destination() const {
  return source_destination_case() == kOutboundRuleSourceDestination ? *_impl_.source_destination_.outbound_rule_source_destination_ : reinterpret_cast<::anduril::communicationsmanager::v1::OutboundRuleSourceDestination&>(::anduril::communicationsmanager::v1::_OutboundRuleSourceDestination_default_instance_);
}
inline const ::anduril::communicationsmanager::v1::OutboundRuleSourceDestination& SourceDestinationDirectionalControl::outbound_rule_source_destination() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.SourceDestinationDirectionalControl.outbound_rule_source_destination)
  return _internal_outbound_rule_source_destination();
}
inline ::anduril::communicationsmanager::v1::OutboundRuleSourceDestination* SourceDestinationDirectionalControl::unsafe_arena_release_outbound_rule_source_destination() {
  // @@protoc_insertion_point(field_unsafe_arena_release:anduril.communicationsmanager.v1.SourceDestinationDirectionalControl.outbound_rule_source_destination)
  if (source_destination_case() == kOutboundRuleSourceDestination) {
    clear_has_source_destination();
    auto* temp = _impl_.source_destination_.outbound_rule_source_destination_;
    _impl_.source_destination_.outbound_rule_source_destination_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SourceDestinationDirectionalControl::unsafe_arena_set_allocated_outbound_rule_source_destination(::anduril::communicationsmanager::v1::OutboundRuleSourceDestination* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_source_destination();
  if (value) {
    set_has_outbound_rule_source_destination();
    _impl_.source_destination_.outbound_rule_source_destination_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.SourceDestinationDirectionalControl.outbound_rule_source_destination)
}
inline ::anduril::communicationsmanager::v1::OutboundRuleSourceDestination* SourceDestinationDirectionalControl::_internal_mutable_outbound_rule_source_destination() {
  if (source_destination_case() != kOutboundRuleSourceDestination) {
    clear_source_destination();
    set_has_outbound_rule_source_destination();
    _impl_.source_destination_.outbound_rule_source_destination_ =
        ::google::protobuf::Message::DefaultConstruct<::anduril::communicationsmanager::v1::OutboundRuleSourceDestination>(GetArena());
  }
  return _impl_.source_destination_.outbound_rule_source_destination_;
}
inline ::anduril::communicationsmanager::v1::OutboundRuleSourceDestination* SourceDestinationDirectionalControl::mutable_outbound_rule_source_destination() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::anduril::communicationsmanager::v1::OutboundRuleSourceDestination* _msg = _internal_mutable_outbound_rule_source_destination();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.SourceDestinationDirectionalControl.outbound_rule_source_destination)
  return _msg;
}

inline bool SourceDestinationDirectionalControl::has_source_destination() const {
  return source_destination_case() != SOURCE_DESTINATION_NOT_SET;
}
inline void SourceDestinationDirectionalControl::clear_has_source_destination() {
  _impl_._oneof_case_[0] = SOURCE_DESTINATION_NOT_SET;
}
inline SourceDestinationDirectionalControl::SourceDestinationCase SourceDestinationDirectionalControl::source_destination_case() const {
  return SourceDestinationDirectionalControl::SourceDestinationCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// OutboundRuleSourceDestination

// .anduril.communicationsmanager.v1.Source source = 1 [json_name = "source"];
inline bool OutboundRuleSourceDestination::has_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.source_ != nullptr);
  return value;
}
inline void OutboundRuleSourceDestination::clear_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.source_ != nullptr) _impl_.source_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::anduril::communicationsmanager::v1::Source& OutboundRuleSourceDestination::_internal_source() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::anduril::communicationsmanager::v1::Source* p = _impl_.source_;
  return p != nullptr ? *p : reinterpret_cast<const ::anduril::communicationsmanager::v1::Source&>(::anduril::communicationsmanager::v1::_Source_default_instance_);
}
inline const ::anduril::communicationsmanager::v1::Source& OutboundRuleSourceDestination::source() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.OutboundRuleSourceDestination.source)
  return _internal_source();
}
inline void OutboundRuleSourceDestination::unsafe_arena_set_allocated_source(::anduril::communicationsmanager::v1::Source* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.source_);
  }
  _impl_.source_ = reinterpret_cast<::anduril::communicationsmanager::v1::Source*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.OutboundRuleSourceDestination.source)
}
inline ::anduril::communicationsmanager::v1::Source* OutboundRuleSourceDestination::release_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::communicationsmanager::v1::Source* released = _impl_.source_;
  _impl_.source_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::anduril::communicationsmanager::v1::Source* OutboundRuleSourceDestination::unsafe_arena_release_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.OutboundRuleSourceDestination.source)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::communicationsmanager::v1::Source* temp = _impl_.source_;
  _impl_.source_ = nullptr;
  return temp;
}
inline ::anduril::communicationsmanager::v1::Source* OutboundRuleSourceDestination::_internal_mutable_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.source_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::anduril::communicationsmanager::v1::Source>(GetArena());
    _impl_.source_ = reinterpret_cast<::anduril::communicationsmanager::v1::Source*>(p);
  }
  return _impl_.source_;
}
inline ::anduril::communicationsmanager::v1::Source* OutboundRuleSourceDestination::mutable_source() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::anduril::communicationsmanager::v1::Source* _msg = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.OutboundRuleSourceDestination.source)
  return _msg;
}
inline void OutboundRuleSourceDestination::set_allocated_source(::anduril::communicationsmanager::v1::Source* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.source_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.source_ = reinterpret_cast<::anduril::communicationsmanager::v1::Source*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.OutboundRuleSourceDestination.source)
}

// repeated .anduril.communicationsmanager.v1.Destination destinations = 2 [json_name = "destinations"];
inline int OutboundRuleSourceDestination::_internal_destinations_size() const {
  return _internal_destinations().size();
}
inline int OutboundRuleSourceDestination::destinations_size() const {
  return _internal_destinations_size();
}
inline void OutboundRuleSourceDestination::clear_destinations() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destinations_.Clear();
}
inline ::anduril::communicationsmanager::v1::Destination* OutboundRuleSourceDestination::mutable_destinations(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.OutboundRuleSourceDestination.destinations)
  return _internal_mutable_destinations()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::anduril::communicationsmanager::v1::Destination>* OutboundRuleSourceDestination::mutable_destinations()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:anduril.communicationsmanager.v1.OutboundRuleSourceDestination.destinations)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_destinations();
}
inline const ::anduril::communicationsmanager::v1::Destination& OutboundRuleSourceDestination::destinations(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.OutboundRuleSourceDestination.destinations)
  return _internal_destinations().Get(index);
}
inline ::anduril::communicationsmanager::v1::Destination* OutboundRuleSourceDestination::add_destinations() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::anduril::communicationsmanager::v1::Destination* _add = _internal_mutable_destinations()->Add();
  // @@protoc_insertion_point(field_add:anduril.communicationsmanager.v1.OutboundRuleSourceDestination.destinations)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::anduril::communicationsmanager::v1::Destination>& OutboundRuleSourceDestination::destinations() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:anduril.communicationsmanager.v1.OutboundRuleSourceDestination.destinations)
  return _internal_destinations();
}
inline const ::google::protobuf::RepeatedPtrField<::anduril::communicationsmanager::v1::Destination>&
OutboundRuleSourceDestination::_internal_destinations() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.destinations_;
}
inline ::google::protobuf::RepeatedPtrField<::anduril::communicationsmanager::v1::Destination>*
OutboundRuleSourceDestination::_internal_mutable_destinations() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.destinations_;
}

// -------------------------------------------------------------------

// InboundRuleSourceDestination

// repeated .anduril.communicationsmanager.v1.Source sources = 1 [json_name = "sources"];
inline int InboundRuleSourceDestination::_internal_sources_size() const {
  return _internal_sources().size();
}
inline int InboundRuleSourceDestination::sources_size() const {
  return _internal_sources_size();
}
inline void InboundRuleSourceDestination::clear_sources() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sources_.Clear();
}
inline ::anduril::communicationsmanager::v1::Source* InboundRuleSourceDestination::mutable_sources(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.InboundRuleSourceDestination.sources)
  return _internal_mutable_sources()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::anduril::communicationsmanager::v1::Source>* InboundRuleSourceDestination::mutable_sources()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:anduril.communicationsmanager.v1.InboundRuleSourceDestination.sources)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_sources();
}
inline const ::anduril::communicationsmanager::v1::Source& InboundRuleSourceDestination::sources(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.InboundRuleSourceDestination.sources)
  return _internal_sources().Get(index);
}
inline ::anduril::communicationsmanager::v1::Source* InboundRuleSourceDestination::add_sources() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::anduril::communicationsmanager::v1::Source* _add = _internal_mutable_sources()->Add();
  // @@protoc_insertion_point(field_add:anduril.communicationsmanager.v1.InboundRuleSourceDestination.sources)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::anduril::communicationsmanager::v1::Source>& InboundRuleSourceDestination::sources() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:anduril.communicationsmanager.v1.InboundRuleSourceDestination.sources)
  return _internal_sources();
}
inline const ::google::protobuf::RepeatedPtrField<::anduril::communicationsmanager::v1::Source>&
InboundRuleSourceDestination::_internal_sources() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sources_;
}
inline ::google::protobuf::RepeatedPtrField<::anduril::communicationsmanager::v1::Source>*
InboundRuleSourceDestination::_internal_mutable_sources() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.sources_;
}

// .anduril.communicationsmanager.v1.Destination destination = 2 [json_name = "destination"];
inline bool InboundRuleSourceDestination::has_destination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.destination_ != nullptr);
  return value;
}
inline void InboundRuleSourceDestination::clear_destination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.destination_ != nullptr) _impl_.destination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::anduril::communicationsmanager::v1::Destination& InboundRuleSourceDestination::_internal_destination() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::anduril::communicationsmanager::v1::Destination* p = _impl_.destination_;
  return p != nullptr ? *p : reinterpret_cast<const ::anduril::communicationsmanager::v1::Destination&>(::anduril::communicationsmanager::v1::_Destination_default_instance_);
}
inline const ::anduril::communicationsmanager::v1::Destination& InboundRuleSourceDestination::destination() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.InboundRuleSourceDestination.destination)
  return _internal_destination();
}
inline void InboundRuleSourceDestination::unsafe_arena_set_allocated_destination(::anduril::communicationsmanager::v1::Destination* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.destination_);
  }
  _impl_.destination_ = reinterpret_cast<::anduril::communicationsmanager::v1::Destination*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.InboundRuleSourceDestination.destination)
}
inline ::anduril::communicationsmanager::v1::Destination* InboundRuleSourceDestination::release_destination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::communicationsmanager::v1::Destination* released = _impl_.destination_;
  _impl_.destination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::anduril::communicationsmanager::v1::Destination* InboundRuleSourceDestination::unsafe_arena_release_destination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.InboundRuleSourceDestination.destination)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::communicationsmanager::v1::Destination* temp = _impl_.destination_;
  _impl_.destination_ = nullptr;
  return temp;
}
inline ::anduril::communicationsmanager::v1::Destination* InboundRuleSourceDestination::_internal_mutable_destination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.destination_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::anduril::communicationsmanager::v1::Destination>(GetArena());
    _impl_.destination_ = reinterpret_cast<::anduril::communicationsmanager::v1::Destination*>(p);
  }
  return _impl_.destination_;
}
inline ::anduril::communicationsmanager::v1::Destination* InboundRuleSourceDestination::mutable_destination() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::anduril::communicationsmanager::v1::Destination* _msg = _internal_mutable_destination();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.InboundRuleSourceDestination.destination)
  return _msg;
}
inline void InboundRuleSourceDestination::set_allocated_destination(::anduril::communicationsmanager::v1::Destination* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.destination_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.destination_ = reinterpret_cast<::anduril::communicationsmanager::v1::Destination*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.InboundRuleSourceDestination.destination)
}

// -------------------------------------------------------------------

// Source

// string asset_id = 1 [json_name = "assetId", deprecated = true];
inline bool Source::has_asset_id() const {
  return source_case() == kAssetId;
}
inline void Source::set_has_asset_id() {
  _impl_._oneof_case_[0] = kAssetId;
}
inline void Source::clear_asset_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (source_case() == kAssetId) {
    _impl_.source_.asset_id_.Destroy();
    clear_has_source();
  }
}
inline const std::string& Source::asset_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.Source.asset_id)
  return _internal_asset_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Source::set_asset_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (source_case() != kAssetId) {
    clear_source();

    set_has_asset_id();
    _impl_.source_.asset_id_.InitDefault();
  }
  _impl_.source_.asset_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:anduril.communicationsmanager.v1.Source.asset_id)
}
inline std::string* Source::mutable_asset_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_asset_id();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.Source.asset_id)
  return _s;
}
inline const std::string& Source::_internal_asset_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (source_case() != kAssetId) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.source_.asset_id_.Get();
}
inline void Source::_internal_set_asset_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (source_case() != kAssetId) {
    clear_source();

    set_has_asset_id();
    _impl_.source_.asset_id_.InitDefault();
  }
  _impl_.source_.asset_id_.Set(value, GetArena());
}
inline std::string* Source::_internal_mutable_asset_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (source_case() != kAssetId) {
    clear_source();

    set_has_asset_id();
    _impl_.source_.asset_id_.InitDefault();
  }
  return _impl_.source_.asset_id_.Mutable( GetArena());
}
inline std::string* Source::release_asset_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.Source.asset_id)
  if (source_case() != kAssetId) {
    return nullptr;
  }
  clear_has_source();
  return _impl_.source_.asset_id_.Release();
}
inline void Source::set_allocated_asset_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_source()) {
    clear_source();
  }
  if (value != nullptr) {
    set_has_asset_id();
    _impl_.source_.asset_id_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.Source.asset_id)
}

// bool all = 2 [json_name = "all"];
inline bool Source::has_all() const {
  return source_case() == kAll;
}
inline void Source::set_has_all() {
  _impl_._oneof_case_[0] = kAll;
}
inline void Source::clear_all() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (source_case() == kAll) {
    _impl_.source_.all_ = false;
    clear_has_source();
  }
}
inline bool Source::all() const {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.Source.all)
  return _internal_all();
}
inline void Source::set_all(bool value) {
  if (source_case() != kAll) {
    clear_source();
    set_has_all();
  }
  _impl_.source_.all_ = value;
  // @@protoc_insertion_point(field_set:anduril.communicationsmanager.v1.Source.all)
}
inline bool Source::_internal_all() const {
  if (source_case() == kAll) {
    return _impl_.source_.all_;
  }
  return false;
}

// string host_id = 3 [json_name = "hostId"];
inline bool Source::has_host_id() const {
  return source_case() == kHostId;
}
inline void Source::set_has_host_id() {
  _impl_._oneof_case_[0] = kHostId;
}
inline void Source::clear_host_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (source_case() == kHostId) {
    _impl_.source_.host_id_.Destroy();
    clear_has_source();
  }
}
inline const std::string& Source::host_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.Source.host_id)
  return _internal_host_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Source::set_host_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (source_case() != kHostId) {
    clear_source();

    set_has_host_id();
    _impl_.source_.host_id_.InitDefault();
  }
  _impl_.source_.host_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:anduril.communicationsmanager.v1.Source.host_id)
}
inline std::string* Source::mutable_host_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_host_id();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.Source.host_id)
  return _s;
}
inline const std::string& Source::_internal_host_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (source_case() != kHostId) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.source_.host_id_.Get();
}
inline void Source::_internal_set_host_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (source_case() != kHostId) {
    clear_source();

    set_has_host_id();
    _impl_.source_.host_id_.InitDefault();
  }
  _impl_.source_.host_id_.Set(value, GetArena());
}
inline std::string* Source::_internal_mutable_host_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (source_case() != kHostId) {
    clear_source();

    set_has_host_id();
    _impl_.source_.host_id_.InitDefault();
  }
  return _impl_.source_.host_id_.Mutable( GetArena());
}
inline std::string* Source::release_host_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.Source.host_id)
  if (source_case() != kHostId) {
    return nullptr;
  }
  clear_has_source();
  return _impl_.source_.host_id_.Release();
}
inline void Source::set_allocated_host_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_source()) {
    clear_source();
  }
  if (value != nullptr) {
    set_has_host_id();
    _impl_.source_.host_id_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.Source.host_id)
}

inline bool Source::has_source() const {
  return source_case() != SOURCE_NOT_SET;
}
inline void Source::clear_has_source() {
  _impl_._oneof_case_[0] = SOURCE_NOT_SET;
}
inline Source::SourceCase Source::source_case() const {
  return Source::SourceCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Destination

// string asset_id = 1 [json_name = "assetId", deprecated = true];
inline bool Destination::has_asset_id() const {
  return destination_case() == kAssetId;
}
inline void Destination::set_has_asset_id() {
  _impl_._oneof_case_[0] = kAssetId;
}
inline void Destination::clear_asset_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (destination_case() == kAssetId) {
    _impl_.destination_.asset_id_.Destroy();
    clear_has_destination();
  }
}
inline const std::string& Destination::asset_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.Destination.asset_id)
  return _internal_asset_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Destination::set_asset_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (destination_case() != kAssetId) {
    clear_destination();

    set_has_asset_id();
    _impl_.destination_.asset_id_.InitDefault();
  }
  _impl_.destination_.asset_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:anduril.communicationsmanager.v1.Destination.asset_id)
}
inline std::string* Destination::mutable_asset_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_asset_id();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.Destination.asset_id)
  return _s;
}
inline const std::string& Destination::_internal_asset_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (destination_case() != kAssetId) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.destination_.asset_id_.Get();
}
inline void Destination::_internal_set_asset_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (destination_case() != kAssetId) {
    clear_destination();

    set_has_asset_id();
    _impl_.destination_.asset_id_.InitDefault();
  }
  _impl_.destination_.asset_id_.Set(value, GetArena());
}
inline std::string* Destination::_internal_mutable_asset_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (destination_case() != kAssetId) {
    clear_destination();

    set_has_asset_id();
    _impl_.destination_.asset_id_.InitDefault();
  }
  return _impl_.destination_.asset_id_.Mutable( GetArena());
}
inline std::string* Destination::release_asset_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.Destination.asset_id)
  if (destination_case() != kAssetId) {
    return nullptr;
  }
  clear_has_destination();
  return _impl_.destination_.asset_id_.Release();
}
inline void Destination::set_allocated_asset_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_destination()) {
    clear_destination();
  }
  if (value != nullptr) {
    set_has_asset_id();
    _impl_.destination_.asset_id_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.Destination.asset_id)
}

// string host_id = 2 [json_name = "hostId"];
inline bool Destination::has_host_id() const {
  return destination_case() == kHostId;
}
inline void Destination::set_has_host_id() {
  _impl_._oneof_case_[0] = kHostId;
}
inline void Destination::clear_host_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (destination_case() == kHostId) {
    _impl_.destination_.host_id_.Destroy();
    clear_has_destination();
  }
}
inline const std::string& Destination::host_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.Destination.host_id)
  return _internal_host_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Destination::set_host_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (destination_case() != kHostId) {
    clear_destination();

    set_has_host_id();
    _impl_.destination_.host_id_.InitDefault();
  }
  _impl_.destination_.host_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:anduril.communicationsmanager.v1.Destination.host_id)
}
inline std::string* Destination::mutable_host_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_host_id();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.Destination.host_id)
  return _s;
}
inline const std::string& Destination::_internal_host_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (destination_case() != kHostId) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.destination_.host_id_.Get();
}
inline void Destination::_internal_set_host_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (destination_case() != kHostId) {
    clear_destination();

    set_has_host_id();
    _impl_.destination_.host_id_.InitDefault();
  }
  _impl_.destination_.host_id_.Set(value, GetArena());
}
inline std::string* Destination::_internal_mutable_host_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (destination_case() != kHostId) {
    clear_destination();

    set_has_host_id();
    _impl_.destination_.host_id_.InitDefault();
  }
  return _impl_.destination_.host_id_.Mutable( GetArena());
}
inline std::string* Destination::release_host_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.Destination.host_id)
  if (destination_case() != kHostId) {
    return nullptr;
  }
  clear_has_destination();
  return _impl_.destination_.host_id_.Release();
}
inline void Destination::set_allocated_host_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_destination()) {
    clear_destination();
  }
  if (value != nullptr) {
    set_has_host_id();
    _impl_.destination_.host_id_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.Destination.host_id)
}

// bool all = 3 [json_name = "all"];
inline bool Destination::has_all() const {
  return destination_case() == kAll;
}
inline void Destination::set_has_all() {
  _impl_._oneof_case_[0] = kAll;
}
inline void Destination::clear_all() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (destination_case() == kAll) {
    _impl_.destination_.all_ = false;
    clear_has_destination();
  }
}
inline bool Destination::all() const {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.Destination.all)
  return _internal_all();
}
inline void Destination::set_all(bool value) {
  if (destination_case() != kAll) {
    clear_destination();
    set_has_all();
  }
  _impl_.destination_.all_ = value;
  // @@protoc_insertion_point(field_set:anduril.communicationsmanager.v1.Destination.all)
}
inline bool Destination::_internal_all() const {
  if (destination_case() == kAll) {
    return _impl_.destination_.all_;
  }
  return false;
}

inline bool Destination::has_destination() const {
  return destination_case() != DESTINATION_NOT_SET;
}
inline void Destination::clear_has_destination() {
  _impl_._oneof_case_[0] = DESTINATION_NOT_SET;
}
inline Destination::DestinationCase Destination::destination_case() const {
  return Destination::DestinationCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// EntityDistributionRuleDetails

// .anduril.entitymanager.v1.Statement entity_filter = 1 [json_name = "entityFilter"];
inline bool EntityDistributionRuleDetails::has_entity_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.entity_filter_ != nullptr);
  return value;
}
inline const ::anduril::entitymanager::v1::Statement& EntityDistributionRuleDetails::_internal_entity_filter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::anduril::entitymanager::v1::Statement* p = _impl_.entity_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::anduril::entitymanager::v1::Statement&>(::anduril::entitymanager::v1::_Statement_default_instance_);
}
inline const ::anduril::entitymanager::v1::Statement& EntityDistributionRuleDetails::entity_filter() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.EntityDistributionRuleDetails.entity_filter)
  return _internal_entity_filter();
}
inline void EntityDistributionRuleDetails::unsafe_arena_set_allocated_entity_filter(::anduril::entitymanager::v1::Statement* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.entity_filter_);
  }
  _impl_.entity_filter_ = reinterpret_cast<::anduril::entitymanager::v1::Statement*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.EntityDistributionRuleDetails.entity_filter)
}
inline ::anduril::entitymanager::v1::Statement* EntityDistributionRuleDetails::release_entity_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::entitymanager::v1::Statement* released = _impl_.entity_filter_;
  _impl_.entity_filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::anduril::entitymanager::v1::Statement* EntityDistributionRuleDetails::unsafe_arena_release_entity_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.EntityDistributionRuleDetails.entity_filter)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::entitymanager::v1::Statement* temp = _impl_.entity_filter_;
  _impl_.entity_filter_ = nullptr;
  return temp;
}
inline ::anduril::entitymanager::v1::Statement* EntityDistributionRuleDetails::_internal_mutable_entity_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.entity_filter_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::anduril::entitymanager::v1::Statement>(GetArena());
    _impl_.entity_filter_ = reinterpret_cast<::anduril::entitymanager::v1::Statement*>(p);
  }
  return _impl_.entity_filter_;
}
inline ::anduril::entitymanager::v1::Statement* EntityDistributionRuleDetails::mutable_entity_filter() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::anduril::entitymanager::v1::Statement* _msg = _internal_mutable_entity_filter();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.EntityDistributionRuleDetails.entity_filter)
  return _msg;
}
inline void EntityDistributionRuleDetails::set_allocated_entity_filter(::anduril::entitymanager::v1::Statement* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.entity_filter_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.entity_filter_ = reinterpret_cast<::anduril::entitymanager::v1::Statement*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.EntityDistributionRuleDetails.entity_filter)
}

// .anduril.entitymanager.v1.Statement static_statement = 2 [json_name = "staticStatement"];
inline bool EntityDistributionRuleDetails::has_static_statement() const {
  return entity_filter_selection_case() == kStaticStatement;
}
inline bool EntityDistributionRuleDetails::_internal_has_static_statement() const {
  return entity_filter_selection_case() == kStaticStatement;
}
inline void EntityDistributionRuleDetails::set_has_static_statement() {
  _impl_._oneof_case_[0] = kStaticStatement;
}
inline ::anduril::entitymanager::v1::Statement* EntityDistributionRuleDetails::release_static_statement() {
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.EntityDistributionRuleDetails.static_statement)
  if (entity_filter_selection_case() == kStaticStatement) {
    clear_has_entity_filter_selection();
    auto* temp = _impl_.entity_filter_selection_.static_statement_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.entity_filter_selection_.static_statement_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::anduril::entitymanager::v1::Statement& EntityDistributionRuleDetails::_internal_static_statement() const {
  return entity_filter_selection_case() == kStaticStatement ? *_impl_.entity_filter_selection_.static_statement_ : reinterpret_cast<::anduril::entitymanager::v1::Statement&>(::anduril::entitymanager::v1::_Statement_default_instance_);
}
inline const ::anduril::entitymanager::v1::Statement& EntityDistributionRuleDetails::static_statement() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.EntityDistributionRuleDetails.static_statement)
  return _internal_static_statement();
}
inline ::anduril::entitymanager::v1::Statement* EntityDistributionRuleDetails::unsafe_arena_release_static_statement() {
  // @@protoc_insertion_point(field_unsafe_arena_release:anduril.communicationsmanager.v1.EntityDistributionRuleDetails.static_statement)
  if (entity_filter_selection_case() == kStaticStatement) {
    clear_has_entity_filter_selection();
    auto* temp = _impl_.entity_filter_selection_.static_statement_;
    _impl_.entity_filter_selection_.static_statement_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntityDistributionRuleDetails::unsafe_arena_set_allocated_static_statement(::anduril::entitymanager::v1::Statement* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_entity_filter_selection();
  if (value) {
    set_has_static_statement();
    _impl_.entity_filter_selection_.static_statement_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.EntityDistributionRuleDetails.static_statement)
}
inline ::anduril::entitymanager::v1::Statement* EntityDistributionRuleDetails::_internal_mutable_static_statement() {
  if (entity_filter_selection_case() != kStaticStatement) {
    clear_entity_filter_selection();
    set_has_static_statement();
    _impl_.entity_filter_selection_.static_statement_ =
        ::google::protobuf::Message::DefaultConstruct<::anduril::entitymanager::v1::Statement>(GetArena());
  }
  return _impl_.entity_filter_selection_.static_statement_;
}
inline ::anduril::entitymanager::v1::Statement* EntityDistributionRuleDetails::mutable_static_statement() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::anduril::entitymanager::v1::Statement* _msg = _internal_mutable_static_statement();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.EntityDistributionRuleDetails.static_statement)
  return _msg;
}

// .anduril.entitymanager.v1.DynamicStatement dynamic_statement = 3 [json_name = "dynamicStatement"];
inline bool EntityDistributionRuleDetails::has_dynamic_statement() const {
  return entity_filter_selection_case() == kDynamicStatement;
}
inline bool EntityDistributionRuleDetails::_internal_has_dynamic_statement() const {
  return entity_filter_selection_case() == kDynamicStatement;
}
inline void EntityDistributionRuleDetails::set_has_dynamic_statement() {
  _impl_._oneof_case_[0] = kDynamicStatement;
}
inline ::anduril::entitymanager::v1::DynamicStatement* EntityDistributionRuleDetails::release_dynamic_statement() {
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.EntityDistributionRuleDetails.dynamic_statement)
  if (entity_filter_selection_case() == kDynamicStatement) {
    clear_has_entity_filter_selection();
    auto* temp = _impl_.entity_filter_selection_.dynamic_statement_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.entity_filter_selection_.dynamic_statement_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::anduril::entitymanager::v1::DynamicStatement& EntityDistributionRuleDetails::_internal_dynamic_statement() const {
  return entity_filter_selection_case() == kDynamicStatement ? *_impl_.entity_filter_selection_.dynamic_statement_ : reinterpret_cast<::anduril::entitymanager::v1::DynamicStatement&>(::anduril::entitymanager::v1::_DynamicStatement_default_instance_);
}
inline const ::anduril::entitymanager::v1::DynamicStatement& EntityDistributionRuleDetails::dynamic_statement() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.EntityDistributionRuleDetails.dynamic_statement)
  return _internal_dynamic_statement();
}
inline ::anduril::entitymanager::v1::DynamicStatement* EntityDistributionRuleDetails::unsafe_arena_release_dynamic_statement() {
  // @@protoc_insertion_point(field_unsafe_arena_release:anduril.communicationsmanager.v1.EntityDistributionRuleDetails.dynamic_statement)
  if (entity_filter_selection_case() == kDynamicStatement) {
    clear_has_entity_filter_selection();
    auto* temp = _impl_.entity_filter_selection_.dynamic_statement_;
    _impl_.entity_filter_selection_.dynamic_statement_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntityDistributionRuleDetails::unsafe_arena_set_allocated_dynamic_statement(::anduril::entitymanager::v1::DynamicStatement* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_entity_filter_selection();
  if (value) {
    set_has_dynamic_statement();
    _impl_.entity_filter_selection_.dynamic_statement_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.EntityDistributionRuleDetails.dynamic_statement)
}
inline ::anduril::entitymanager::v1::DynamicStatement* EntityDistributionRuleDetails::_internal_mutable_dynamic_statement() {
  if (entity_filter_selection_case() != kDynamicStatement) {
    clear_entity_filter_selection();
    set_has_dynamic_statement();
    _impl_.entity_filter_selection_.dynamic_statement_ =
        ::google::protobuf::Message::DefaultConstruct<::anduril::entitymanager::v1::DynamicStatement>(GetArena());
  }
  return _impl_.entity_filter_selection_.dynamic_statement_;
}
inline ::anduril::entitymanager::v1::DynamicStatement* EntityDistributionRuleDetails::mutable_dynamic_statement() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::anduril::entitymanager::v1::DynamicStatement* _msg = _internal_mutable_dynamic_statement();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.EntityDistributionRuleDetails.dynamic_statement)
  return _msg;
}

inline bool EntityDistributionRuleDetails::has_entity_filter_selection() const {
  return entity_filter_selection_case() != ENTITY_FILTER_SELECTION_NOT_SET;
}
inline void EntityDistributionRuleDetails::clear_has_entity_filter_selection() {
  _impl_._oneof_case_[0] = ENTITY_FILTER_SELECTION_NOT_SET;
}
inline EntityDistributionRuleDetails::EntityFilterSelectionCase EntityDistributionRuleDetails::entity_filter_selection_case() const {
  return EntityDistributionRuleDetails::EntityFilterSelectionCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// BlobDistributionRuleDetails

// .anduril.blobs.v1.Statement blob_filter = 1 [json_name = "blobFilter", deprecated = true];
inline bool BlobDistributionRuleDetails::has_blob_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.blob_filter_ != nullptr);
  return value;
}
inline const ::anduril::blobs::v1::Statement& BlobDistributionRuleDetails::_internal_blob_filter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::anduril::blobs::v1::Statement* p = _impl_.blob_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::anduril::blobs::v1::Statement&>(::anduril::blobs::v1::_Statement_default_instance_);
}
inline const ::anduril::blobs::v1::Statement& BlobDistributionRuleDetails::blob_filter() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.BlobDistributionRuleDetails.blob_filter)
  return _internal_blob_filter();
}
inline void BlobDistributionRuleDetails::unsafe_arena_set_allocated_blob_filter(::anduril::blobs::v1::Statement* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.blob_filter_);
  }
  _impl_.blob_filter_ = reinterpret_cast<::anduril::blobs::v1::Statement*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.BlobDistributionRuleDetails.blob_filter)
}
inline ::anduril::blobs::v1::Statement* BlobDistributionRuleDetails::release_blob_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::blobs::v1::Statement* released = _impl_.blob_filter_;
  _impl_.blob_filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::anduril::blobs::v1::Statement* BlobDistributionRuleDetails::unsafe_arena_release_blob_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.BlobDistributionRuleDetails.blob_filter)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::blobs::v1::Statement* temp = _impl_.blob_filter_;
  _impl_.blob_filter_ = nullptr;
  return temp;
}
inline ::anduril::blobs::v1::Statement* BlobDistributionRuleDetails::_internal_mutable_blob_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.blob_filter_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::anduril::blobs::v1::Statement>(GetArena());
    _impl_.blob_filter_ = reinterpret_cast<::anduril::blobs::v1::Statement*>(p);
  }
  return _impl_.blob_filter_;
}
inline ::anduril::blobs::v1::Statement* BlobDistributionRuleDetails::mutable_blob_filter() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::anduril::blobs::v1::Statement* _msg = _internal_mutable_blob_filter();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.BlobDistributionRuleDetails.blob_filter)
  return _msg;
}
inline void BlobDistributionRuleDetails::set_allocated_blob_filter(::anduril::blobs::v1::Statement* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.blob_filter_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.blob_filter_ = reinterpret_cast<::anduril::blobs::v1::Statement*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.BlobDistributionRuleDetails.blob_filter)
}

// repeated .anduril.blobs.v1.Statement blob_filters = 2 [json_name = "blobFilters"];
inline int BlobDistributionRuleDetails::_internal_blob_filters_size() const {
  return _internal_blob_filters().size();
}
inline int BlobDistributionRuleDetails::blob_filters_size() const {
  return _internal_blob_filters_size();
}
inline ::anduril::blobs::v1::Statement* BlobDistributionRuleDetails::mutable_blob_filters(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.BlobDistributionRuleDetails.blob_filters)
  return _internal_mutable_blob_filters()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::anduril::blobs::v1::Statement>* BlobDistributionRuleDetails::mutable_blob_filters()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:anduril.communicationsmanager.v1.BlobDistributionRuleDetails.blob_filters)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_blob_filters();
}
inline const ::anduril::blobs::v1::Statement& BlobDistributionRuleDetails::blob_filters(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.BlobDistributionRuleDetails.blob_filters)
  return _internal_blob_filters().Get(index);
}
inline ::anduril::blobs::v1::Statement* BlobDistributionRuleDetails::add_blob_filters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::anduril::blobs::v1::Statement* _add = _internal_mutable_blob_filters()->Add();
  // @@protoc_insertion_point(field_add:anduril.communicationsmanager.v1.BlobDistributionRuleDetails.blob_filters)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::anduril::blobs::v1::Statement>& BlobDistributionRuleDetails::blob_filters() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:anduril.communicationsmanager.v1.BlobDistributionRuleDetails.blob_filters)
  return _internal_blob_filters();
}
inline const ::google::protobuf::RepeatedPtrField<::anduril::blobs::v1::Statement>&
BlobDistributionRuleDetails::_internal_blob_filters() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.blob_filters_;
}
inline ::google::protobuf::RepeatedPtrField<::anduril::blobs::v1::Statement>*
BlobDistributionRuleDetails::_internal_mutable_blob_filters() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.blob_filters_;
}

// -------------------------------------------------------------------

// CommunicationsManagerError

// string message = 1 [json_name = "message"];
inline void CommunicationsManagerError::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& CommunicationsManagerError::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.CommunicationsManagerError.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommunicationsManagerError::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:anduril.communicationsmanager.v1.CommunicationsManagerError.message)
}
inline std::string* CommunicationsManagerError::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.CommunicationsManagerError.message)
  return _s;
}
inline const std::string& CommunicationsManagerError::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void CommunicationsManagerError::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* CommunicationsManagerError::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* CommunicationsManagerError::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.CommunicationsManagerError.message)
  return _impl_.message_.Release();
}
inline void CommunicationsManagerError::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.CommunicationsManagerError.message)
}

// -------------------------------------------------------------------

// CrossDomainRule

// .anduril.communicationsmanager.v1.EntityDistributionRuleDetails entity_details = 1 [json_name = "entityDetails"];
inline bool CrossDomainRule::has_entity_details() const {
  return details_case() == kEntityDetails;
}
inline bool CrossDomainRule::_internal_has_entity_details() const {
  return details_case() == kEntityDetails;
}
inline void CrossDomainRule::set_has_entity_details() {
  _impl_._oneof_case_[0] = kEntityDetails;
}
inline void CrossDomainRule::clear_entity_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (details_case() == kEntityDetails) {
    if (GetArena() == nullptr) {
      delete _impl_.details_.entity_details_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.details_.entity_details_);
    }
    clear_has_details();
  }
}
inline ::anduril::communicationsmanager::v1::EntityDistributionRuleDetails* CrossDomainRule::release_entity_details() {
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.CrossDomainRule.entity_details)
  if (details_case() == kEntityDetails) {
    clear_has_details();
    auto* temp = _impl_.details_.entity_details_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.details_.entity_details_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::anduril::communicationsmanager::v1::EntityDistributionRuleDetails& CrossDomainRule::_internal_entity_details() const {
  return details_case() == kEntityDetails ? *_impl_.details_.entity_details_ : reinterpret_cast<::anduril::communicationsmanager::v1::EntityDistributionRuleDetails&>(::anduril::communicationsmanager::v1::_EntityDistributionRuleDetails_default_instance_);
}
inline const ::anduril::communicationsmanager::v1::EntityDistributionRuleDetails& CrossDomainRule::entity_details() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.CrossDomainRule.entity_details)
  return _internal_entity_details();
}
inline ::anduril::communicationsmanager::v1::EntityDistributionRuleDetails* CrossDomainRule::unsafe_arena_release_entity_details() {
  // @@protoc_insertion_point(field_unsafe_arena_release:anduril.communicationsmanager.v1.CrossDomainRule.entity_details)
  if (details_case() == kEntityDetails) {
    clear_has_details();
    auto* temp = _impl_.details_.entity_details_;
    _impl_.details_.entity_details_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CrossDomainRule::unsafe_arena_set_allocated_entity_details(::anduril::communicationsmanager::v1::EntityDistributionRuleDetails* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_details();
  if (value) {
    set_has_entity_details();
    _impl_.details_.entity_details_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.CrossDomainRule.entity_details)
}
inline ::anduril::communicationsmanager::v1::EntityDistributionRuleDetails* CrossDomainRule::_internal_mutable_entity_details() {
  if (details_case() != kEntityDetails) {
    clear_details();
    set_has_entity_details();
    _impl_.details_.entity_details_ =
        ::google::protobuf::Message::DefaultConstruct<::anduril::communicationsmanager::v1::EntityDistributionRuleDetails>(GetArena());
  }
  return _impl_.details_.entity_details_;
}
inline ::anduril::communicationsmanager::v1::EntityDistributionRuleDetails* CrossDomainRule::mutable_entity_details() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::anduril::communicationsmanager::v1::EntityDistributionRuleDetails* _msg = _internal_mutable_entity_details();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.CrossDomainRule.entity_details)
  return _msg;
}

// .anduril.communicationsmanager.v1.CdsDestination cds_destination = 2 [json_name = "cdsDestination"];
inline bool CrossDomainRule::has_cds_destination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cds_destination_ != nullptr);
  return value;
}
inline const ::anduril::communicationsmanager::v1::CdsDestination& CrossDomainRule::_internal_cds_destination() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::anduril::communicationsmanager::v1::CdsDestination* p = _impl_.cds_destination_;
  return p != nullptr ? *p : reinterpret_cast<const ::anduril::communicationsmanager::v1::CdsDestination&>(::anduril::communicationsmanager::v1::_CdsDestination_default_instance_);
}
inline const ::anduril::communicationsmanager::v1::CdsDestination& CrossDomainRule::cds_destination() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.CrossDomainRule.cds_destination)
  return _internal_cds_destination();
}
inline void CrossDomainRule::unsafe_arena_set_allocated_cds_destination(::anduril::communicationsmanager::v1::CdsDestination* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cds_destination_);
  }
  _impl_.cds_destination_ = reinterpret_cast<::anduril::communicationsmanager::v1::CdsDestination*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.CrossDomainRule.cds_destination)
}
inline ::anduril::communicationsmanager::v1::CdsDestination* CrossDomainRule::release_cds_destination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::communicationsmanager::v1::CdsDestination* released = _impl_.cds_destination_;
  _impl_.cds_destination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::anduril::communicationsmanager::v1::CdsDestination* CrossDomainRule::unsafe_arena_release_cds_destination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.CrossDomainRule.cds_destination)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::communicationsmanager::v1::CdsDestination* temp = _impl_.cds_destination_;
  _impl_.cds_destination_ = nullptr;
  return temp;
}
inline ::anduril::communicationsmanager::v1::CdsDestination* CrossDomainRule::_internal_mutable_cds_destination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cds_destination_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::anduril::communicationsmanager::v1::CdsDestination>(GetArena());
    _impl_.cds_destination_ = reinterpret_cast<::anduril::communicationsmanager::v1::CdsDestination*>(p);
  }
  return _impl_.cds_destination_;
}
inline ::anduril::communicationsmanager::v1::CdsDestination* CrossDomainRule::mutable_cds_destination() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::anduril::communicationsmanager::v1::CdsDestination* _msg = _internal_mutable_cds_destination();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.CrossDomainRule.cds_destination)
  return _msg;
}
inline void CrossDomainRule::set_allocated_cds_destination(::anduril::communicationsmanager::v1::CdsDestination* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cds_destination_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.cds_destination_ = reinterpret_cast<::anduril::communicationsmanager::v1::CdsDestination*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.CrossDomainRule.cds_destination)
}

inline bool CrossDomainRule::has_details() const {
  return details_case() != DETAILS_NOT_SET;
}
inline void CrossDomainRule::clear_has_details() {
  _impl_._oneof_case_[0] = DETAILS_NOT_SET;
}
inline CrossDomainRule::DetailsCase CrossDomainRule::details_case() const {
  return CrossDomainRule::DetailsCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace communicationsmanager
}  // namespace anduril


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::anduril::communicationsmanager::v1::EventType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::anduril::communicationsmanager::v1::EventType>() {
  return ::anduril::communicationsmanager::v1::EventType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_anduril_2fcommunicationsmanager_2fv1_2fcommon_2epub_2eproto_2epb_2eh
