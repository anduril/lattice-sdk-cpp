// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: anduril/communicationsmanager/v1/communications_manager_api.pub.proto
// Protobuf C++ Version: 5.27.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "anduril/communicationsmanager/v1/common.pub.pb.h"
#include "anduril/communicationsmanager/v1/integration.pub.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto;
namespace anduril {
namespace communicationsmanager {
namespace v1 {
class DeleteRuleRequest;
struct DeleteRuleRequestDefaultTypeInternal;
extern DeleteRuleRequestDefaultTypeInternal _DeleteRuleRequest_default_instance_;
class DeleteRuleResponse;
struct DeleteRuleResponseDefaultTypeInternal;
extern DeleteRuleResponseDefaultTypeInternal _DeleteRuleResponse_default_instance_;
class PutRuleRequest;
struct PutRuleRequestDefaultTypeInternal;
extern PutRuleRequestDefaultTypeInternal _PutRuleRequest_default_instance_;
class PutRuleResponse;
struct PutRuleResponseDefaultTypeInternal;
extern PutRuleResponseDefaultTypeInternal _PutRuleResponse_default_instance_;
class StreamRulesRequest;
struct StreamRulesRequestDefaultTypeInternal;
extern StreamRulesRequestDefaultTypeInternal _StreamRulesRequest_default_instance_;
class StreamRulesResponse;
struct StreamRulesResponseDefaultTypeInternal;
extern StreamRulesResponseDefaultTypeInternal _StreamRulesResponse_default_instance_;
}  // namespace v1
}  // namespace communicationsmanager
}  // namespace anduril
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace anduril {
namespace communicationsmanager {
namespace v1 {
enum RuleType : int {
  RULE_TYPE_INVALID = 0,
  RULE_TYPE_ENTITY = 1,
  RULE_TYPE_BLOB = 2,
  RULE_TYPE_INTEGRATION = 3,
  RuleType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RuleType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RuleType_IsValid(int value);
extern const uint32_t RuleType_internal_data_[];
constexpr RuleType RuleType_MIN = static_cast<RuleType>(0);
constexpr RuleType RuleType_MAX = static_cast<RuleType>(3);
constexpr int RuleType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
RuleType_descriptor();
template <typename T>
const std::string& RuleType_Name(T value) {
  static_assert(std::is_same<T, RuleType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RuleType_Name().");
  return RuleType_Name(static_cast<RuleType>(value));
}
template <>
inline const std::string& RuleType_Name(RuleType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RuleType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool RuleType_Parse(absl::string_view name, RuleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RuleType>(
      RuleType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class StreamRulesRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.communicationsmanager.v1.StreamRulesRequest) */ {
 public:
  inline StreamRulesRequest() : StreamRulesRequest(nullptr) {}
  ~StreamRulesRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StreamRulesRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline StreamRulesRequest(const StreamRulesRequest& from) : StreamRulesRequest(nullptr, from) {}
  inline StreamRulesRequest(StreamRulesRequest&& from) noexcept
      : StreamRulesRequest(nullptr, std::move(from)) {}
  inline StreamRulesRequest& operator=(const StreamRulesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamRulesRequest& operator=(StreamRulesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamRulesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamRulesRequest* internal_default_instance() {
    return reinterpret_cast<const StreamRulesRequest*>(
        &_StreamRulesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(StreamRulesRequest& a, StreamRulesRequest& b) { a.Swap(&b); }
  inline void Swap(StreamRulesRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamRulesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamRulesRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<StreamRulesRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreamRulesRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StreamRulesRequest& from) { StreamRulesRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StreamRulesRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "anduril.communicationsmanager.v1.StreamRulesRequest"; }

 protected:
  explicit StreamRulesRequest(::google::protobuf::Arena* arena);
  StreamRulesRequest(::google::protobuf::Arena* arena, const StreamRulesRequest& from);
  StreamRulesRequest(::google::protobuf::Arena* arena, StreamRulesRequest&& from) noexcept
      : StreamRulesRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRuleTypeFieldNumber = 1,
    kPreexistingOnlyFieldNumber = 2,
  };
  // repeated .anduril.communicationsmanager.v1.RuleType rule_type = 1 [json_name = "ruleType"];
  int rule_type_size() const;
  private:
  int _internal_rule_type_size() const;

  public:
  void clear_rule_type() ;
  public:
  ::anduril::communicationsmanager::v1::RuleType rule_type(int index) const;
  void set_rule_type(int index, ::anduril::communicationsmanager::v1::RuleType value);
  void add_rule_type(::anduril::communicationsmanager::v1::RuleType value);
  const ::google::protobuf::RepeatedField<int>& rule_type() const;
  ::google::protobuf::RepeatedField<int>* mutable_rule_type();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_rule_type() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_rule_type();

  public:
  // bool preexisting_only = 2 [json_name = "preexistingOnly"];
  void clear_preexisting_only() ;
  bool preexisting_only() const;
  void set_preexisting_only(bool value);

  private:
  bool _internal_preexisting_only() const;
  void _internal_set_preexisting_only(bool value);

  public:
  // @@protoc_insertion_point(class_scope:anduril.communicationsmanager.v1.StreamRulesRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_StreamRulesRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StreamRulesRequest& from_msg);
    ::google::protobuf::RepeatedField<int> rule_type_;
    mutable ::google::protobuf::internal::CachedSize _rule_type_cached_byte_size_;
    bool preexisting_only_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto;
};
// -------------------------------------------------------------------

class PutRuleResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.communicationsmanager.v1.PutRuleResponse) */ {
 public:
  inline PutRuleResponse() : PutRuleResponse(nullptr) {}
  ~PutRuleResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PutRuleResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PutRuleResponse(const PutRuleResponse& from) : PutRuleResponse(nullptr, from) {}
  inline PutRuleResponse(PutRuleResponse&& from) noexcept
      : PutRuleResponse(nullptr, std::move(from)) {}
  inline PutRuleResponse& operator=(const PutRuleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutRuleResponse& operator=(PutRuleResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PutRuleResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PutRuleResponse* internal_default_instance() {
    return reinterpret_cast<const PutRuleResponse*>(
        &_PutRuleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(PutRuleResponse& a, PutRuleResponse& b) { a.Swap(&b); }
  inline void Swap(PutRuleResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutRuleResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PutRuleResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PutRuleResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PutRuleResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PutRuleResponse& from) { PutRuleResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PutRuleResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "anduril.communicationsmanager.v1.PutRuleResponse"; }

 protected:
  explicit PutRuleResponse(::google::protobuf::Arena* arena);
  PutRuleResponse(::google::protobuf::Arena* arena, const PutRuleResponse& from);
  PutRuleResponse(::google::protobuf::Arena* arena, PutRuleResponse&& from) noexcept
      : PutRuleResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDistributionRuleFieldNumber = 1,
    kErrorFieldNumber = 2,
    kRuleFieldNumber = 3,
  };
  // .anduril.communicationsmanager.v1.DistributionRule distribution_rule = 1 [json_name = "distributionRule"];
  bool has_distribution_rule() const;
  void clear_distribution_rule() ;
  const ::anduril::communicationsmanager::v1::DistributionRule& distribution_rule() const;
  PROTOBUF_NODISCARD ::anduril::communicationsmanager::v1::DistributionRule* release_distribution_rule();
  ::anduril::communicationsmanager::v1::DistributionRule* mutable_distribution_rule();
  void set_allocated_distribution_rule(::anduril::communicationsmanager::v1::DistributionRule* value);
  void unsafe_arena_set_allocated_distribution_rule(::anduril::communicationsmanager::v1::DistributionRule* value);
  ::anduril::communicationsmanager::v1::DistributionRule* unsafe_arena_release_distribution_rule();

  private:
  const ::anduril::communicationsmanager::v1::DistributionRule& _internal_distribution_rule() const;
  ::anduril::communicationsmanager::v1::DistributionRule* _internal_mutable_distribution_rule();

  public:
  // .anduril.communicationsmanager.v1.CommunicationsManagerError error = 2 [json_name = "error"];
  bool has_error() const;
  void clear_error() ;
  const ::anduril::communicationsmanager::v1::CommunicationsManagerError& error() const;
  PROTOBUF_NODISCARD ::anduril::communicationsmanager::v1::CommunicationsManagerError* release_error();
  ::anduril::communicationsmanager::v1::CommunicationsManagerError* mutable_error();
  void set_allocated_error(::anduril::communicationsmanager::v1::CommunicationsManagerError* value);
  void unsafe_arena_set_allocated_error(::anduril::communicationsmanager::v1::CommunicationsManagerError* value);
  ::anduril::communicationsmanager::v1::CommunicationsManagerError* unsafe_arena_release_error();

  private:
  const ::anduril::communicationsmanager::v1::CommunicationsManagerError& _internal_error() const;
  ::anduril::communicationsmanager::v1::CommunicationsManagerError* _internal_mutable_error();

  public:
  // .anduril.communicationsmanager.v1.Rule rule = 3 [json_name = "rule"];
  bool has_rule() const;
  void clear_rule() ;
  const ::anduril::communicationsmanager::v1::Rule& rule() const;
  PROTOBUF_NODISCARD ::anduril::communicationsmanager::v1::Rule* release_rule();
  ::anduril::communicationsmanager::v1::Rule* mutable_rule();
  void set_allocated_rule(::anduril::communicationsmanager::v1::Rule* value);
  void unsafe_arena_set_allocated_rule(::anduril::communicationsmanager::v1::Rule* value);
  ::anduril::communicationsmanager::v1::Rule* unsafe_arena_release_rule();

  private:
  const ::anduril::communicationsmanager::v1::Rule& _internal_rule() const;
  ::anduril::communicationsmanager::v1::Rule* _internal_mutable_rule();

  public:
  // @@protoc_insertion_point(class_scope:anduril.communicationsmanager.v1.PutRuleResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PutRuleResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PutRuleResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::anduril::communicationsmanager::v1::DistributionRule* distribution_rule_;
    ::anduril::communicationsmanager::v1::CommunicationsManagerError* error_;
    ::anduril::communicationsmanager::v1::Rule* rule_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto;
};
// -------------------------------------------------------------------

class PutRuleRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.communicationsmanager.v1.PutRuleRequest) */ {
 public:
  inline PutRuleRequest() : PutRuleRequest(nullptr) {}
  ~PutRuleRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PutRuleRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PutRuleRequest(const PutRuleRequest& from) : PutRuleRequest(nullptr, from) {}
  inline PutRuleRequest(PutRuleRequest&& from) noexcept
      : PutRuleRequest(nullptr, std::move(from)) {}
  inline PutRuleRequest& operator=(const PutRuleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutRuleRequest& operator=(PutRuleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PutRuleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PutRuleRequest* internal_default_instance() {
    return reinterpret_cast<const PutRuleRequest*>(
        &_PutRuleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(PutRuleRequest& a, PutRuleRequest& b) { a.Swap(&b); }
  inline void Swap(PutRuleRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutRuleRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PutRuleRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PutRuleRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PutRuleRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PutRuleRequest& from) { PutRuleRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PutRuleRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "anduril.communicationsmanager.v1.PutRuleRequest"; }

 protected:
  explicit PutRuleRequest(::google::protobuf::Arena* arena);
  PutRuleRequest(::google::protobuf::Arena* arena, const PutRuleRequest& from);
  PutRuleRequest(::google::protobuf::Arena* arena, PutRuleRequest&& from) noexcept
      : PutRuleRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDistributionRuleFieldNumber = 1,
    kRuleFieldNumber = 2,
  };
  // .anduril.communicationsmanager.v1.DistributionRule distribution_rule = 1 [json_name = "distributionRule"];
  bool has_distribution_rule() const;
  void clear_distribution_rule() ;
  const ::anduril::communicationsmanager::v1::DistributionRule& distribution_rule() const;
  PROTOBUF_NODISCARD ::anduril::communicationsmanager::v1::DistributionRule* release_distribution_rule();
  ::anduril::communicationsmanager::v1::DistributionRule* mutable_distribution_rule();
  void set_allocated_distribution_rule(::anduril::communicationsmanager::v1::DistributionRule* value);
  void unsafe_arena_set_allocated_distribution_rule(::anduril::communicationsmanager::v1::DistributionRule* value);
  ::anduril::communicationsmanager::v1::DistributionRule* unsafe_arena_release_distribution_rule();

  private:
  const ::anduril::communicationsmanager::v1::DistributionRule& _internal_distribution_rule() const;
  ::anduril::communicationsmanager::v1::DistributionRule* _internal_mutable_distribution_rule();

  public:
  // .anduril.communicationsmanager.v1.Rule rule = 2 [json_name = "rule"];
  bool has_rule() const;
  void clear_rule() ;
  const ::anduril::communicationsmanager::v1::Rule& rule() const;
  PROTOBUF_NODISCARD ::anduril::communicationsmanager::v1::Rule* release_rule();
  ::anduril::communicationsmanager::v1::Rule* mutable_rule();
  void set_allocated_rule(::anduril::communicationsmanager::v1::Rule* value);
  void unsafe_arena_set_allocated_rule(::anduril::communicationsmanager::v1::Rule* value);
  ::anduril::communicationsmanager::v1::Rule* unsafe_arena_release_rule();

  private:
  const ::anduril::communicationsmanager::v1::Rule& _internal_rule() const;
  ::anduril::communicationsmanager::v1::Rule* _internal_mutable_rule();

  public:
  // @@protoc_insertion_point(class_scope:anduril.communicationsmanager.v1.PutRuleRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PutRuleRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PutRuleRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::anduril::communicationsmanager::v1::DistributionRule* distribution_rule_;
    ::anduril::communicationsmanager::v1::Rule* rule_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto;
};
// -------------------------------------------------------------------

class DeleteRuleResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.communicationsmanager.v1.DeleteRuleResponse) */ {
 public:
  inline DeleteRuleResponse() : DeleteRuleResponse(nullptr) {}
  ~DeleteRuleResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DeleteRuleResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline DeleteRuleResponse(const DeleteRuleResponse& from) : DeleteRuleResponse(nullptr, from) {}
  inline DeleteRuleResponse(DeleteRuleResponse&& from) noexcept
      : DeleteRuleResponse(nullptr, std::move(from)) {}
  inline DeleteRuleResponse& operator=(const DeleteRuleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRuleResponse& operator=(DeleteRuleResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRuleResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRuleResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteRuleResponse*>(
        &_DeleteRuleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(DeleteRuleResponse& a, DeleteRuleResponse& b) { a.Swap(&b); }
  inline void Swap(DeleteRuleResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRuleResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteRuleResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<DeleteRuleResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeleteRuleResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DeleteRuleResponse& from) { DeleteRuleResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeleteRuleResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "anduril.communicationsmanager.v1.DeleteRuleResponse"; }

 protected:
  explicit DeleteRuleResponse(::google::protobuf::Arena* arena);
  DeleteRuleResponse(::google::protobuf::Arena* arena, const DeleteRuleResponse& from);
  DeleteRuleResponse(::google::protobuf::Arena* arena, DeleteRuleResponse&& from) noexcept
      : DeleteRuleResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDistributionRuleFieldNumber = 1,
    kErrorFieldNumber = 2,
    kRuleFieldNumber = 3,
  };
  // .anduril.communicationsmanager.v1.DistributionRule distribution_rule = 1 [json_name = "distributionRule"];
  bool has_distribution_rule() const;
  void clear_distribution_rule() ;
  const ::anduril::communicationsmanager::v1::DistributionRule& distribution_rule() const;
  PROTOBUF_NODISCARD ::anduril::communicationsmanager::v1::DistributionRule* release_distribution_rule();
  ::anduril::communicationsmanager::v1::DistributionRule* mutable_distribution_rule();
  void set_allocated_distribution_rule(::anduril::communicationsmanager::v1::DistributionRule* value);
  void unsafe_arena_set_allocated_distribution_rule(::anduril::communicationsmanager::v1::DistributionRule* value);
  ::anduril::communicationsmanager::v1::DistributionRule* unsafe_arena_release_distribution_rule();

  private:
  const ::anduril::communicationsmanager::v1::DistributionRule& _internal_distribution_rule() const;
  ::anduril::communicationsmanager::v1::DistributionRule* _internal_mutable_distribution_rule();

  public:
  // .anduril.communicationsmanager.v1.CommunicationsManagerError error = 2 [json_name = "error"];
  bool has_error() const;
  void clear_error() ;
  const ::anduril::communicationsmanager::v1::CommunicationsManagerError& error() const;
  PROTOBUF_NODISCARD ::anduril::communicationsmanager::v1::CommunicationsManagerError* release_error();
  ::anduril::communicationsmanager::v1::CommunicationsManagerError* mutable_error();
  void set_allocated_error(::anduril::communicationsmanager::v1::CommunicationsManagerError* value);
  void unsafe_arena_set_allocated_error(::anduril::communicationsmanager::v1::CommunicationsManagerError* value);
  ::anduril::communicationsmanager::v1::CommunicationsManagerError* unsafe_arena_release_error();

  private:
  const ::anduril::communicationsmanager::v1::CommunicationsManagerError& _internal_error() const;
  ::anduril::communicationsmanager::v1::CommunicationsManagerError* _internal_mutable_error();

  public:
  // .anduril.communicationsmanager.v1.Rule rule = 3 [json_name = "rule"];
  bool has_rule() const;
  void clear_rule() ;
  const ::anduril::communicationsmanager::v1::Rule& rule() const;
  PROTOBUF_NODISCARD ::anduril::communicationsmanager::v1::Rule* release_rule();
  ::anduril::communicationsmanager::v1::Rule* mutable_rule();
  void set_allocated_rule(::anduril::communicationsmanager::v1::Rule* value);
  void unsafe_arena_set_allocated_rule(::anduril::communicationsmanager::v1::Rule* value);
  ::anduril::communicationsmanager::v1::Rule* unsafe_arena_release_rule();

  private:
  const ::anduril::communicationsmanager::v1::Rule& _internal_rule() const;
  ::anduril::communicationsmanager::v1::Rule* _internal_mutable_rule();

  public:
  // @@protoc_insertion_point(class_scope:anduril.communicationsmanager.v1.DeleteRuleResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DeleteRuleResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DeleteRuleResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::anduril::communicationsmanager::v1::DistributionRule* distribution_rule_;
    ::anduril::communicationsmanager::v1::CommunicationsManagerError* error_;
    ::anduril::communicationsmanager::v1::Rule* rule_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto;
};
// -------------------------------------------------------------------

class DeleteRuleRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.communicationsmanager.v1.DeleteRuleRequest) */ {
 public:
  inline DeleteRuleRequest() : DeleteRuleRequest(nullptr) {}
  ~DeleteRuleRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DeleteRuleRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline DeleteRuleRequest(const DeleteRuleRequest& from) : DeleteRuleRequest(nullptr, from) {}
  inline DeleteRuleRequest(DeleteRuleRequest&& from) noexcept
      : DeleteRuleRequest(nullptr, std::move(from)) {}
  inline DeleteRuleRequest& operator=(const DeleteRuleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRuleRequest& operator=(DeleteRuleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRuleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRuleRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRuleRequest*>(
        &_DeleteRuleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(DeleteRuleRequest& a, DeleteRuleRequest& b) { a.Swap(&b); }
  inline void Swap(DeleteRuleRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRuleRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteRuleRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<DeleteRuleRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeleteRuleRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DeleteRuleRequest& from) { DeleteRuleRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeleteRuleRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "anduril.communicationsmanager.v1.DeleteRuleRequest"; }

 protected:
  explicit DeleteRuleRequest(::google::protobuf::Arena* arena);
  DeleteRuleRequest(::google::protobuf::Arena* arena, const DeleteRuleRequest& from);
  DeleteRuleRequest(::google::protobuf::Arena* arena, DeleteRuleRequest&& from) noexcept
      : DeleteRuleRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDistributionRuleFieldNumber = 1,
    kRuleFieldNumber = 2,
  };
  // .anduril.communicationsmanager.v1.DistributionRule distribution_rule = 1 [json_name = "distributionRule"];
  bool has_distribution_rule() const;
  void clear_distribution_rule() ;
  const ::anduril::communicationsmanager::v1::DistributionRule& distribution_rule() const;
  PROTOBUF_NODISCARD ::anduril::communicationsmanager::v1::DistributionRule* release_distribution_rule();
  ::anduril::communicationsmanager::v1::DistributionRule* mutable_distribution_rule();
  void set_allocated_distribution_rule(::anduril::communicationsmanager::v1::DistributionRule* value);
  void unsafe_arena_set_allocated_distribution_rule(::anduril::communicationsmanager::v1::DistributionRule* value);
  ::anduril::communicationsmanager::v1::DistributionRule* unsafe_arena_release_distribution_rule();

  private:
  const ::anduril::communicationsmanager::v1::DistributionRule& _internal_distribution_rule() const;
  ::anduril::communicationsmanager::v1::DistributionRule* _internal_mutable_distribution_rule();

  public:
  // .anduril.communicationsmanager.v1.Rule rule = 2 [json_name = "rule"];
  bool has_rule() const;
  void clear_rule() ;
  const ::anduril::communicationsmanager::v1::Rule& rule() const;
  PROTOBUF_NODISCARD ::anduril::communicationsmanager::v1::Rule* release_rule();
  ::anduril::communicationsmanager::v1::Rule* mutable_rule();
  void set_allocated_rule(::anduril::communicationsmanager::v1::Rule* value);
  void unsafe_arena_set_allocated_rule(::anduril::communicationsmanager::v1::Rule* value);
  ::anduril::communicationsmanager::v1::Rule* unsafe_arena_release_rule();

  private:
  const ::anduril::communicationsmanager::v1::Rule& _internal_rule() const;
  ::anduril::communicationsmanager::v1::Rule* _internal_mutable_rule();

  public:
  // @@protoc_insertion_point(class_scope:anduril.communicationsmanager.v1.DeleteRuleRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DeleteRuleRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DeleteRuleRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::anduril::communicationsmanager::v1::DistributionRule* distribution_rule_;
    ::anduril::communicationsmanager::v1::Rule* rule_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto;
};
// -------------------------------------------------------------------

class StreamRulesResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.communicationsmanager.v1.StreamRulesResponse) */ {
 public:
  inline StreamRulesResponse() : StreamRulesResponse(nullptr) {}
  ~StreamRulesResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StreamRulesResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline StreamRulesResponse(const StreamRulesResponse& from) : StreamRulesResponse(nullptr, from) {}
  inline StreamRulesResponse(StreamRulesResponse&& from) noexcept
      : StreamRulesResponse(nullptr, std::move(from)) {}
  inline StreamRulesResponse& operator=(const StreamRulesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamRulesResponse& operator=(StreamRulesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamRulesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamRulesResponse* internal_default_instance() {
    return reinterpret_cast<const StreamRulesResponse*>(
        &_StreamRulesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(StreamRulesResponse& a, StreamRulesResponse& b) { a.Swap(&b); }
  inline void Swap(StreamRulesResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamRulesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamRulesResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<StreamRulesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreamRulesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StreamRulesResponse& from) { StreamRulesResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StreamRulesResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "anduril.communicationsmanager.v1.StreamRulesResponse"; }

 protected:
  explicit StreamRulesResponse(::google::protobuf::Arena* arena);
  StreamRulesResponse(::google::protobuf::Arena* arena, const StreamRulesResponse& from);
  StreamRulesResponse(::google::protobuf::Arena* arena, StreamRulesResponse&& from) noexcept
      : StreamRulesResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDistributionRuleEventFieldNumber = 1,
    kRuleEventFieldNumber = 2,
  };
  // .anduril.communicationsmanager.v1.DistributionRuleEvent distribution_rule_event = 1 [json_name = "distributionRuleEvent"];
  bool has_distribution_rule_event() const;
  void clear_distribution_rule_event() ;
  const ::anduril::communicationsmanager::v1::DistributionRuleEvent& distribution_rule_event() const;
  PROTOBUF_NODISCARD ::anduril::communicationsmanager::v1::DistributionRuleEvent* release_distribution_rule_event();
  ::anduril::communicationsmanager::v1::DistributionRuleEvent* mutable_distribution_rule_event();
  void set_allocated_distribution_rule_event(::anduril::communicationsmanager::v1::DistributionRuleEvent* value);
  void unsafe_arena_set_allocated_distribution_rule_event(::anduril::communicationsmanager::v1::DistributionRuleEvent* value);
  ::anduril::communicationsmanager::v1::DistributionRuleEvent* unsafe_arena_release_distribution_rule_event();

  private:
  const ::anduril::communicationsmanager::v1::DistributionRuleEvent& _internal_distribution_rule_event() const;
  ::anduril::communicationsmanager::v1::DistributionRuleEvent* _internal_mutable_distribution_rule_event();

  public:
  // .anduril.communicationsmanager.v1.RuleEvent rule_event = 2 [json_name = "ruleEvent"];
  bool has_rule_event() const;
  void clear_rule_event() ;
  const ::anduril::communicationsmanager::v1::RuleEvent& rule_event() const;
  PROTOBUF_NODISCARD ::anduril::communicationsmanager::v1::RuleEvent* release_rule_event();
  ::anduril::communicationsmanager::v1::RuleEvent* mutable_rule_event();
  void set_allocated_rule_event(::anduril::communicationsmanager::v1::RuleEvent* value);
  void unsafe_arena_set_allocated_rule_event(::anduril::communicationsmanager::v1::RuleEvent* value);
  ::anduril::communicationsmanager::v1::RuleEvent* unsafe_arena_release_rule_event();

  private:
  const ::anduril::communicationsmanager::v1::RuleEvent& _internal_rule_event() const;
  ::anduril::communicationsmanager::v1::RuleEvent* _internal_mutable_rule_event();

  public:
  // @@protoc_insertion_point(class_scope:anduril.communicationsmanager.v1.StreamRulesResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_StreamRulesResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StreamRulesResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::anduril::communicationsmanager::v1::DistributionRuleEvent* distribution_rule_event_;
    ::anduril::communicationsmanager::v1::RuleEvent* rule_event_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PutRuleRequest

// .anduril.communicationsmanager.v1.Rule rule = 2 [json_name = "rule"];
inline bool PutRuleRequest::has_rule() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rule_ != nullptr);
  return value;
}
inline const ::anduril::communicationsmanager::v1::Rule& PutRuleRequest::_internal_rule() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::anduril::communicationsmanager::v1::Rule* p = _impl_.rule_;
  return p != nullptr ? *p : reinterpret_cast<const ::anduril::communicationsmanager::v1::Rule&>(::anduril::communicationsmanager::v1::_Rule_default_instance_);
}
inline const ::anduril::communicationsmanager::v1::Rule& PutRuleRequest::rule() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.PutRuleRequest.rule)
  return _internal_rule();
}
inline void PutRuleRequest::unsafe_arena_set_allocated_rule(::anduril::communicationsmanager::v1::Rule* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rule_);
  }
  _impl_.rule_ = reinterpret_cast<::anduril::communicationsmanager::v1::Rule*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.PutRuleRequest.rule)
}
inline ::anduril::communicationsmanager::v1::Rule* PutRuleRequest::release_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::anduril::communicationsmanager::v1::Rule* released = _impl_.rule_;
  _impl_.rule_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::anduril::communicationsmanager::v1::Rule* PutRuleRequest::unsafe_arena_release_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.PutRuleRequest.rule)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::anduril::communicationsmanager::v1::Rule* temp = _impl_.rule_;
  _impl_.rule_ = nullptr;
  return temp;
}
inline ::anduril::communicationsmanager::v1::Rule* PutRuleRequest::_internal_mutable_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rule_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::anduril::communicationsmanager::v1::Rule>(GetArena());
    _impl_.rule_ = reinterpret_cast<::anduril::communicationsmanager::v1::Rule*>(p);
  }
  return _impl_.rule_;
}
inline ::anduril::communicationsmanager::v1::Rule* PutRuleRequest::mutable_rule() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::anduril::communicationsmanager::v1::Rule* _msg = _internal_mutable_rule();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.PutRuleRequest.rule)
  return _msg;
}
inline void PutRuleRequest::set_allocated_rule(::anduril::communicationsmanager::v1::Rule* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rule_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.rule_ = reinterpret_cast<::anduril::communicationsmanager::v1::Rule*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.PutRuleRequest.rule)
}

// .anduril.communicationsmanager.v1.DistributionRule distribution_rule = 1 [json_name = "distributionRule"];
inline bool PutRuleRequest::has_distribution_rule() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.distribution_rule_ != nullptr);
  return value;
}
inline const ::anduril::communicationsmanager::v1::DistributionRule& PutRuleRequest::_internal_distribution_rule() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::anduril::communicationsmanager::v1::DistributionRule* p = _impl_.distribution_rule_;
  return p != nullptr ? *p : reinterpret_cast<const ::anduril::communicationsmanager::v1::DistributionRule&>(::anduril::communicationsmanager::v1::_DistributionRule_default_instance_);
}
inline const ::anduril::communicationsmanager::v1::DistributionRule& PutRuleRequest::distribution_rule() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.PutRuleRequest.distribution_rule)
  return _internal_distribution_rule();
}
inline void PutRuleRequest::unsafe_arena_set_allocated_distribution_rule(::anduril::communicationsmanager::v1::DistributionRule* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.distribution_rule_);
  }
  _impl_.distribution_rule_ = reinterpret_cast<::anduril::communicationsmanager::v1::DistributionRule*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.PutRuleRequest.distribution_rule)
}
inline ::anduril::communicationsmanager::v1::DistributionRule* PutRuleRequest::release_distribution_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::communicationsmanager::v1::DistributionRule* released = _impl_.distribution_rule_;
  _impl_.distribution_rule_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::anduril::communicationsmanager::v1::DistributionRule* PutRuleRequest::unsafe_arena_release_distribution_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.PutRuleRequest.distribution_rule)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::communicationsmanager::v1::DistributionRule* temp = _impl_.distribution_rule_;
  _impl_.distribution_rule_ = nullptr;
  return temp;
}
inline ::anduril::communicationsmanager::v1::DistributionRule* PutRuleRequest::_internal_mutable_distribution_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.distribution_rule_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::anduril::communicationsmanager::v1::DistributionRule>(GetArena());
    _impl_.distribution_rule_ = reinterpret_cast<::anduril::communicationsmanager::v1::DistributionRule*>(p);
  }
  return _impl_.distribution_rule_;
}
inline ::anduril::communicationsmanager::v1::DistributionRule* PutRuleRequest::mutable_distribution_rule() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::anduril::communicationsmanager::v1::DistributionRule* _msg = _internal_mutable_distribution_rule();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.PutRuleRequest.distribution_rule)
  return _msg;
}
inline void PutRuleRequest::set_allocated_distribution_rule(::anduril::communicationsmanager::v1::DistributionRule* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.distribution_rule_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.distribution_rule_ = reinterpret_cast<::anduril::communicationsmanager::v1::DistributionRule*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.PutRuleRequest.distribution_rule)
}

// -------------------------------------------------------------------

// PutRuleResponse

// .anduril.communicationsmanager.v1.Rule rule = 3 [json_name = "rule"];
inline bool PutRuleResponse::has_rule() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rule_ != nullptr);
  return value;
}
inline const ::anduril::communicationsmanager::v1::Rule& PutRuleResponse::_internal_rule() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::anduril::communicationsmanager::v1::Rule* p = _impl_.rule_;
  return p != nullptr ? *p : reinterpret_cast<const ::anduril::communicationsmanager::v1::Rule&>(::anduril::communicationsmanager::v1::_Rule_default_instance_);
}
inline const ::anduril::communicationsmanager::v1::Rule& PutRuleResponse::rule() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.PutRuleResponse.rule)
  return _internal_rule();
}
inline void PutRuleResponse::unsafe_arena_set_allocated_rule(::anduril::communicationsmanager::v1::Rule* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rule_);
  }
  _impl_.rule_ = reinterpret_cast<::anduril::communicationsmanager::v1::Rule*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.PutRuleResponse.rule)
}
inline ::anduril::communicationsmanager::v1::Rule* PutRuleResponse::release_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::anduril::communicationsmanager::v1::Rule* released = _impl_.rule_;
  _impl_.rule_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::anduril::communicationsmanager::v1::Rule* PutRuleResponse::unsafe_arena_release_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.PutRuleResponse.rule)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::anduril::communicationsmanager::v1::Rule* temp = _impl_.rule_;
  _impl_.rule_ = nullptr;
  return temp;
}
inline ::anduril::communicationsmanager::v1::Rule* PutRuleResponse::_internal_mutable_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rule_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::anduril::communicationsmanager::v1::Rule>(GetArena());
    _impl_.rule_ = reinterpret_cast<::anduril::communicationsmanager::v1::Rule*>(p);
  }
  return _impl_.rule_;
}
inline ::anduril::communicationsmanager::v1::Rule* PutRuleResponse::mutable_rule() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::anduril::communicationsmanager::v1::Rule* _msg = _internal_mutable_rule();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.PutRuleResponse.rule)
  return _msg;
}
inline void PutRuleResponse::set_allocated_rule(::anduril::communicationsmanager::v1::Rule* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rule_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.rule_ = reinterpret_cast<::anduril::communicationsmanager::v1::Rule*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.PutRuleResponse.rule)
}

// .anduril.communicationsmanager.v1.CommunicationsManagerError error = 2 [json_name = "error"];
inline bool PutRuleResponse::has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.error_ != nullptr);
  return value;
}
inline const ::anduril::communicationsmanager::v1::CommunicationsManagerError& PutRuleResponse::_internal_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::anduril::communicationsmanager::v1::CommunicationsManagerError* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::anduril::communicationsmanager::v1::CommunicationsManagerError&>(::anduril::communicationsmanager::v1::_CommunicationsManagerError_default_instance_);
}
inline const ::anduril::communicationsmanager::v1::CommunicationsManagerError& PutRuleResponse::error() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.PutRuleResponse.error)
  return _internal_error();
}
inline void PutRuleResponse::unsafe_arena_set_allocated_error(::anduril::communicationsmanager::v1::CommunicationsManagerError* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = reinterpret_cast<::anduril::communicationsmanager::v1::CommunicationsManagerError*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.PutRuleResponse.error)
}
inline ::anduril::communicationsmanager::v1::CommunicationsManagerError* PutRuleResponse::release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::anduril::communicationsmanager::v1::CommunicationsManagerError* released = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::anduril::communicationsmanager::v1::CommunicationsManagerError* PutRuleResponse::unsafe_arena_release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.PutRuleResponse.error)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::anduril::communicationsmanager::v1::CommunicationsManagerError* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::anduril::communicationsmanager::v1::CommunicationsManagerError* PutRuleResponse::_internal_mutable_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.error_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::anduril::communicationsmanager::v1::CommunicationsManagerError>(GetArena());
    _impl_.error_ = reinterpret_cast<::anduril::communicationsmanager::v1::CommunicationsManagerError*>(p);
  }
  return _impl_.error_;
}
inline ::anduril::communicationsmanager::v1::CommunicationsManagerError* PutRuleResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::anduril::communicationsmanager::v1::CommunicationsManagerError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.PutRuleResponse.error)
  return _msg;
}
inline void PutRuleResponse::set_allocated_error(::anduril::communicationsmanager::v1::CommunicationsManagerError* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.error_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.error_ = reinterpret_cast<::anduril::communicationsmanager::v1::CommunicationsManagerError*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.PutRuleResponse.error)
}

// .anduril.communicationsmanager.v1.DistributionRule distribution_rule = 1 [json_name = "distributionRule"];
inline bool PutRuleResponse::has_distribution_rule() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.distribution_rule_ != nullptr);
  return value;
}
inline const ::anduril::communicationsmanager::v1::DistributionRule& PutRuleResponse::_internal_distribution_rule() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::anduril::communicationsmanager::v1::DistributionRule* p = _impl_.distribution_rule_;
  return p != nullptr ? *p : reinterpret_cast<const ::anduril::communicationsmanager::v1::DistributionRule&>(::anduril::communicationsmanager::v1::_DistributionRule_default_instance_);
}
inline const ::anduril::communicationsmanager::v1::DistributionRule& PutRuleResponse::distribution_rule() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.PutRuleResponse.distribution_rule)
  return _internal_distribution_rule();
}
inline void PutRuleResponse::unsafe_arena_set_allocated_distribution_rule(::anduril::communicationsmanager::v1::DistributionRule* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.distribution_rule_);
  }
  _impl_.distribution_rule_ = reinterpret_cast<::anduril::communicationsmanager::v1::DistributionRule*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.PutRuleResponse.distribution_rule)
}
inline ::anduril::communicationsmanager::v1::DistributionRule* PutRuleResponse::release_distribution_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::communicationsmanager::v1::DistributionRule* released = _impl_.distribution_rule_;
  _impl_.distribution_rule_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::anduril::communicationsmanager::v1::DistributionRule* PutRuleResponse::unsafe_arena_release_distribution_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.PutRuleResponse.distribution_rule)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::communicationsmanager::v1::DistributionRule* temp = _impl_.distribution_rule_;
  _impl_.distribution_rule_ = nullptr;
  return temp;
}
inline ::anduril::communicationsmanager::v1::DistributionRule* PutRuleResponse::_internal_mutable_distribution_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.distribution_rule_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::anduril::communicationsmanager::v1::DistributionRule>(GetArena());
    _impl_.distribution_rule_ = reinterpret_cast<::anduril::communicationsmanager::v1::DistributionRule*>(p);
  }
  return _impl_.distribution_rule_;
}
inline ::anduril::communicationsmanager::v1::DistributionRule* PutRuleResponse::mutable_distribution_rule() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::anduril::communicationsmanager::v1::DistributionRule* _msg = _internal_mutable_distribution_rule();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.PutRuleResponse.distribution_rule)
  return _msg;
}
inline void PutRuleResponse::set_allocated_distribution_rule(::anduril::communicationsmanager::v1::DistributionRule* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.distribution_rule_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.distribution_rule_ = reinterpret_cast<::anduril::communicationsmanager::v1::DistributionRule*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.PutRuleResponse.distribution_rule)
}

// -------------------------------------------------------------------

// StreamRulesRequest

// repeated .anduril.communicationsmanager.v1.RuleType rule_type = 1 [json_name = "ruleType"];
inline int StreamRulesRequest::_internal_rule_type_size() const {
  return _internal_rule_type().size();
}
inline int StreamRulesRequest::rule_type_size() const {
  return _internal_rule_type_size();
}
inline void StreamRulesRequest::clear_rule_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_type_.Clear();
}
inline ::anduril::communicationsmanager::v1::RuleType StreamRulesRequest::rule_type(int index) const {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.StreamRulesRequest.rule_type)
  return static_cast<::anduril::communicationsmanager::v1::RuleType>(_internal_rule_type().Get(index));
}
inline void StreamRulesRequest::set_rule_type(int index, ::anduril::communicationsmanager::v1::RuleType value) {
  _internal_mutable_rule_type()->Set(index, value);
  // @@protoc_insertion_point(field_set:anduril.communicationsmanager.v1.StreamRulesRequest.rule_type)
}
inline void StreamRulesRequest::add_rule_type(::anduril::communicationsmanager::v1::RuleType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_rule_type()->Add(value);
  // @@protoc_insertion_point(field_add:anduril.communicationsmanager.v1.StreamRulesRequest.rule_type)
}
inline const ::google::protobuf::RepeatedField<int>& StreamRulesRequest::rule_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:anduril.communicationsmanager.v1.StreamRulesRequest.rule_type)
  return _internal_rule_type();
}
inline ::google::protobuf::RepeatedField<int>* StreamRulesRequest::mutable_rule_type()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:anduril.communicationsmanager.v1.StreamRulesRequest.rule_type)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_rule_type();
}
inline const ::google::protobuf::RepeatedField<int>& StreamRulesRequest::_internal_rule_type()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rule_type_;
}
inline ::google::protobuf::RepeatedField<int>* StreamRulesRequest::_internal_mutable_rule_type() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.rule_type_;
}

// bool preexisting_only = 2 [json_name = "preexistingOnly"];
inline void StreamRulesRequest::clear_preexisting_only() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preexisting_only_ = false;
}
inline bool StreamRulesRequest::preexisting_only() const {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.StreamRulesRequest.preexisting_only)
  return _internal_preexisting_only();
}
inline void StreamRulesRequest::set_preexisting_only(bool value) {
  _internal_set_preexisting_only(value);
  // @@protoc_insertion_point(field_set:anduril.communicationsmanager.v1.StreamRulesRequest.preexisting_only)
}
inline bool StreamRulesRequest::_internal_preexisting_only() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.preexisting_only_;
}
inline void StreamRulesRequest::_internal_set_preexisting_only(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preexisting_only_ = value;
}

// -------------------------------------------------------------------

// StreamRulesResponse

// .anduril.communicationsmanager.v1.RuleEvent rule_event = 2 [json_name = "ruleEvent"];
inline bool StreamRulesResponse::has_rule_event() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rule_event_ != nullptr);
  return value;
}
inline const ::anduril::communicationsmanager::v1::RuleEvent& StreamRulesResponse::_internal_rule_event() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::anduril::communicationsmanager::v1::RuleEvent* p = _impl_.rule_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::anduril::communicationsmanager::v1::RuleEvent&>(::anduril::communicationsmanager::v1::_RuleEvent_default_instance_);
}
inline const ::anduril::communicationsmanager::v1::RuleEvent& StreamRulesResponse::rule_event() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.StreamRulesResponse.rule_event)
  return _internal_rule_event();
}
inline void StreamRulesResponse::unsafe_arena_set_allocated_rule_event(::anduril::communicationsmanager::v1::RuleEvent* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rule_event_);
  }
  _impl_.rule_event_ = reinterpret_cast<::anduril::communicationsmanager::v1::RuleEvent*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.StreamRulesResponse.rule_event)
}
inline ::anduril::communicationsmanager::v1::RuleEvent* StreamRulesResponse::release_rule_event() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::anduril::communicationsmanager::v1::RuleEvent* released = _impl_.rule_event_;
  _impl_.rule_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::anduril::communicationsmanager::v1::RuleEvent* StreamRulesResponse::unsafe_arena_release_rule_event() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.StreamRulesResponse.rule_event)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::anduril::communicationsmanager::v1::RuleEvent* temp = _impl_.rule_event_;
  _impl_.rule_event_ = nullptr;
  return temp;
}
inline ::anduril::communicationsmanager::v1::RuleEvent* StreamRulesResponse::_internal_mutable_rule_event() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rule_event_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::anduril::communicationsmanager::v1::RuleEvent>(GetArena());
    _impl_.rule_event_ = reinterpret_cast<::anduril::communicationsmanager::v1::RuleEvent*>(p);
  }
  return _impl_.rule_event_;
}
inline ::anduril::communicationsmanager::v1::RuleEvent* StreamRulesResponse::mutable_rule_event() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::anduril::communicationsmanager::v1::RuleEvent* _msg = _internal_mutable_rule_event();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.StreamRulesResponse.rule_event)
  return _msg;
}
inline void StreamRulesResponse::set_allocated_rule_event(::anduril::communicationsmanager::v1::RuleEvent* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rule_event_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.rule_event_ = reinterpret_cast<::anduril::communicationsmanager::v1::RuleEvent*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.StreamRulesResponse.rule_event)
}

// .anduril.communicationsmanager.v1.DistributionRuleEvent distribution_rule_event = 1 [json_name = "distributionRuleEvent"];
inline bool StreamRulesResponse::has_distribution_rule_event() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.distribution_rule_event_ != nullptr);
  return value;
}
inline const ::anduril::communicationsmanager::v1::DistributionRuleEvent& StreamRulesResponse::_internal_distribution_rule_event() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::anduril::communicationsmanager::v1::DistributionRuleEvent* p = _impl_.distribution_rule_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::anduril::communicationsmanager::v1::DistributionRuleEvent&>(::anduril::communicationsmanager::v1::_DistributionRuleEvent_default_instance_);
}
inline const ::anduril::communicationsmanager::v1::DistributionRuleEvent& StreamRulesResponse::distribution_rule_event() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.StreamRulesResponse.distribution_rule_event)
  return _internal_distribution_rule_event();
}
inline void StreamRulesResponse::unsafe_arena_set_allocated_distribution_rule_event(::anduril::communicationsmanager::v1::DistributionRuleEvent* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.distribution_rule_event_);
  }
  _impl_.distribution_rule_event_ = reinterpret_cast<::anduril::communicationsmanager::v1::DistributionRuleEvent*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.StreamRulesResponse.distribution_rule_event)
}
inline ::anduril::communicationsmanager::v1::DistributionRuleEvent* StreamRulesResponse::release_distribution_rule_event() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::communicationsmanager::v1::DistributionRuleEvent* released = _impl_.distribution_rule_event_;
  _impl_.distribution_rule_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::anduril::communicationsmanager::v1::DistributionRuleEvent* StreamRulesResponse::unsafe_arena_release_distribution_rule_event() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.StreamRulesResponse.distribution_rule_event)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::communicationsmanager::v1::DistributionRuleEvent* temp = _impl_.distribution_rule_event_;
  _impl_.distribution_rule_event_ = nullptr;
  return temp;
}
inline ::anduril::communicationsmanager::v1::DistributionRuleEvent* StreamRulesResponse::_internal_mutable_distribution_rule_event() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.distribution_rule_event_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::anduril::communicationsmanager::v1::DistributionRuleEvent>(GetArena());
    _impl_.distribution_rule_event_ = reinterpret_cast<::anduril::communicationsmanager::v1::DistributionRuleEvent*>(p);
  }
  return _impl_.distribution_rule_event_;
}
inline ::anduril::communicationsmanager::v1::DistributionRuleEvent* StreamRulesResponse::mutable_distribution_rule_event() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::anduril::communicationsmanager::v1::DistributionRuleEvent* _msg = _internal_mutable_distribution_rule_event();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.StreamRulesResponse.distribution_rule_event)
  return _msg;
}
inline void StreamRulesResponse::set_allocated_distribution_rule_event(::anduril::communicationsmanager::v1::DistributionRuleEvent* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.distribution_rule_event_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.distribution_rule_event_ = reinterpret_cast<::anduril::communicationsmanager::v1::DistributionRuleEvent*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.StreamRulesResponse.distribution_rule_event)
}

// -------------------------------------------------------------------

// DeleteRuleRequest

// .anduril.communicationsmanager.v1.Rule rule = 2 [json_name = "rule"];
inline bool DeleteRuleRequest::has_rule() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rule_ != nullptr);
  return value;
}
inline const ::anduril::communicationsmanager::v1::Rule& DeleteRuleRequest::_internal_rule() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::anduril::communicationsmanager::v1::Rule* p = _impl_.rule_;
  return p != nullptr ? *p : reinterpret_cast<const ::anduril::communicationsmanager::v1::Rule&>(::anduril::communicationsmanager::v1::_Rule_default_instance_);
}
inline const ::anduril::communicationsmanager::v1::Rule& DeleteRuleRequest::rule() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.DeleteRuleRequest.rule)
  return _internal_rule();
}
inline void DeleteRuleRequest::unsafe_arena_set_allocated_rule(::anduril::communicationsmanager::v1::Rule* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rule_);
  }
  _impl_.rule_ = reinterpret_cast<::anduril::communicationsmanager::v1::Rule*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.DeleteRuleRequest.rule)
}
inline ::anduril::communicationsmanager::v1::Rule* DeleteRuleRequest::release_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::anduril::communicationsmanager::v1::Rule* released = _impl_.rule_;
  _impl_.rule_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::anduril::communicationsmanager::v1::Rule* DeleteRuleRequest::unsafe_arena_release_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.DeleteRuleRequest.rule)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::anduril::communicationsmanager::v1::Rule* temp = _impl_.rule_;
  _impl_.rule_ = nullptr;
  return temp;
}
inline ::anduril::communicationsmanager::v1::Rule* DeleteRuleRequest::_internal_mutable_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rule_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::anduril::communicationsmanager::v1::Rule>(GetArena());
    _impl_.rule_ = reinterpret_cast<::anduril::communicationsmanager::v1::Rule*>(p);
  }
  return _impl_.rule_;
}
inline ::anduril::communicationsmanager::v1::Rule* DeleteRuleRequest::mutable_rule() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::anduril::communicationsmanager::v1::Rule* _msg = _internal_mutable_rule();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.DeleteRuleRequest.rule)
  return _msg;
}
inline void DeleteRuleRequest::set_allocated_rule(::anduril::communicationsmanager::v1::Rule* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rule_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.rule_ = reinterpret_cast<::anduril::communicationsmanager::v1::Rule*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.DeleteRuleRequest.rule)
}

// .anduril.communicationsmanager.v1.DistributionRule distribution_rule = 1 [json_name = "distributionRule"];
inline bool DeleteRuleRequest::has_distribution_rule() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.distribution_rule_ != nullptr);
  return value;
}
inline const ::anduril::communicationsmanager::v1::DistributionRule& DeleteRuleRequest::_internal_distribution_rule() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::anduril::communicationsmanager::v1::DistributionRule* p = _impl_.distribution_rule_;
  return p != nullptr ? *p : reinterpret_cast<const ::anduril::communicationsmanager::v1::DistributionRule&>(::anduril::communicationsmanager::v1::_DistributionRule_default_instance_);
}
inline const ::anduril::communicationsmanager::v1::DistributionRule& DeleteRuleRequest::distribution_rule() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.DeleteRuleRequest.distribution_rule)
  return _internal_distribution_rule();
}
inline void DeleteRuleRequest::unsafe_arena_set_allocated_distribution_rule(::anduril::communicationsmanager::v1::DistributionRule* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.distribution_rule_);
  }
  _impl_.distribution_rule_ = reinterpret_cast<::anduril::communicationsmanager::v1::DistributionRule*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.DeleteRuleRequest.distribution_rule)
}
inline ::anduril::communicationsmanager::v1::DistributionRule* DeleteRuleRequest::release_distribution_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::communicationsmanager::v1::DistributionRule* released = _impl_.distribution_rule_;
  _impl_.distribution_rule_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::anduril::communicationsmanager::v1::DistributionRule* DeleteRuleRequest::unsafe_arena_release_distribution_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.DeleteRuleRequest.distribution_rule)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::communicationsmanager::v1::DistributionRule* temp = _impl_.distribution_rule_;
  _impl_.distribution_rule_ = nullptr;
  return temp;
}
inline ::anduril::communicationsmanager::v1::DistributionRule* DeleteRuleRequest::_internal_mutable_distribution_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.distribution_rule_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::anduril::communicationsmanager::v1::DistributionRule>(GetArena());
    _impl_.distribution_rule_ = reinterpret_cast<::anduril::communicationsmanager::v1::DistributionRule*>(p);
  }
  return _impl_.distribution_rule_;
}
inline ::anduril::communicationsmanager::v1::DistributionRule* DeleteRuleRequest::mutable_distribution_rule() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::anduril::communicationsmanager::v1::DistributionRule* _msg = _internal_mutable_distribution_rule();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.DeleteRuleRequest.distribution_rule)
  return _msg;
}
inline void DeleteRuleRequest::set_allocated_distribution_rule(::anduril::communicationsmanager::v1::DistributionRule* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.distribution_rule_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.distribution_rule_ = reinterpret_cast<::anduril::communicationsmanager::v1::DistributionRule*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.DeleteRuleRequest.distribution_rule)
}

// -------------------------------------------------------------------

// DeleteRuleResponse

// .anduril.communicationsmanager.v1.Rule rule = 3 [json_name = "rule"];
inline bool DeleteRuleResponse::has_rule() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rule_ != nullptr);
  return value;
}
inline const ::anduril::communicationsmanager::v1::Rule& DeleteRuleResponse::_internal_rule() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::anduril::communicationsmanager::v1::Rule* p = _impl_.rule_;
  return p != nullptr ? *p : reinterpret_cast<const ::anduril::communicationsmanager::v1::Rule&>(::anduril::communicationsmanager::v1::_Rule_default_instance_);
}
inline const ::anduril::communicationsmanager::v1::Rule& DeleteRuleResponse::rule() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.DeleteRuleResponse.rule)
  return _internal_rule();
}
inline void DeleteRuleResponse::unsafe_arena_set_allocated_rule(::anduril::communicationsmanager::v1::Rule* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rule_);
  }
  _impl_.rule_ = reinterpret_cast<::anduril::communicationsmanager::v1::Rule*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.DeleteRuleResponse.rule)
}
inline ::anduril::communicationsmanager::v1::Rule* DeleteRuleResponse::release_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::anduril::communicationsmanager::v1::Rule* released = _impl_.rule_;
  _impl_.rule_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::anduril::communicationsmanager::v1::Rule* DeleteRuleResponse::unsafe_arena_release_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.DeleteRuleResponse.rule)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::anduril::communicationsmanager::v1::Rule* temp = _impl_.rule_;
  _impl_.rule_ = nullptr;
  return temp;
}
inline ::anduril::communicationsmanager::v1::Rule* DeleteRuleResponse::_internal_mutable_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rule_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::anduril::communicationsmanager::v1::Rule>(GetArena());
    _impl_.rule_ = reinterpret_cast<::anduril::communicationsmanager::v1::Rule*>(p);
  }
  return _impl_.rule_;
}
inline ::anduril::communicationsmanager::v1::Rule* DeleteRuleResponse::mutable_rule() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::anduril::communicationsmanager::v1::Rule* _msg = _internal_mutable_rule();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.DeleteRuleResponse.rule)
  return _msg;
}
inline void DeleteRuleResponse::set_allocated_rule(::anduril::communicationsmanager::v1::Rule* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rule_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.rule_ = reinterpret_cast<::anduril::communicationsmanager::v1::Rule*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.DeleteRuleResponse.rule)
}

// .anduril.communicationsmanager.v1.CommunicationsManagerError error = 2 [json_name = "error"];
inline bool DeleteRuleResponse::has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.error_ != nullptr);
  return value;
}
inline const ::anduril::communicationsmanager::v1::CommunicationsManagerError& DeleteRuleResponse::_internal_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::anduril::communicationsmanager::v1::CommunicationsManagerError* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::anduril::communicationsmanager::v1::CommunicationsManagerError&>(::anduril::communicationsmanager::v1::_CommunicationsManagerError_default_instance_);
}
inline const ::anduril::communicationsmanager::v1::CommunicationsManagerError& DeleteRuleResponse::error() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.DeleteRuleResponse.error)
  return _internal_error();
}
inline void DeleteRuleResponse::unsafe_arena_set_allocated_error(::anduril::communicationsmanager::v1::CommunicationsManagerError* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = reinterpret_cast<::anduril::communicationsmanager::v1::CommunicationsManagerError*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.DeleteRuleResponse.error)
}
inline ::anduril::communicationsmanager::v1::CommunicationsManagerError* DeleteRuleResponse::release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::anduril::communicationsmanager::v1::CommunicationsManagerError* released = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::anduril::communicationsmanager::v1::CommunicationsManagerError* DeleteRuleResponse::unsafe_arena_release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.DeleteRuleResponse.error)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::anduril::communicationsmanager::v1::CommunicationsManagerError* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::anduril::communicationsmanager::v1::CommunicationsManagerError* DeleteRuleResponse::_internal_mutable_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.error_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::anduril::communicationsmanager::v1::CommunicationsManagerError>(GetArena());
    _impl_.error_ = reinterpret_cast<::anduril::communicationsmanager::v1::CommunicationsManagerError*>(p);
  }
  return _impl_.error_;
}
inline ::anduril::communicationsmanager::v1::CommunicationsManagerError* DeleteRuleResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::anduril::communicationsmanager::v1::CommunicationsManagerError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.DeleteRuleResponse.error)
  return _msg;
}
inline void DeleteRuleResponse::set_allocated_error(::anduril::communicationsmanager::v1::CommunicationsManagerError* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.error_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.error_ = reinterpret_cast<::anduril::communicationsmanager::v1::CommunicationsManagerError*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.DeleteRuleResponse.error)
}

// .anduril.communicationsmanager.v1.DistributionRule distribution_rule = 1 [json_name = "distributionRule"];
inline bool DeleteRuleResponse::has_distribution_rule() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.distribution_rule_ != nullptr);
  return value;
}
inline const ::anduril::communicationsmanager::v1::DistributionRule& DeleteRuleResponse::_internal_distribution_rule() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::anduril::communicationsmanager::v1::DistributionRule* p = _impl_.distribution_rule_;
  return p != nullptr ? *p : reinterpret_cast<const ::anduril::communicationsmanager::v1::DistributionRule&>(::anduril::communicationsmanager::v1::_DistributionRule_default_instance_);
}
inline const ::anduril::communicationsmanager::v1::DistributionRule& DeleteRuleResponse::distribution_rule() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.communicationsmanager.v1.DeleteRuleResponse.distribution_rule)
  return _internal_distribution_rule();
}
inline void DeleteRuleResponse::unsafe_arena_set_allocated_distribution_rule(::anduril::communicationsmanager::v1::DistributionRule* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.distribution_rule_);
  }
  _impl_.distribution_rule_ = reinterpret_cast<::anduril::communicationsmanager::v1::DistributionRule*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.communicationsmanager.v1.DeleteRuleResponse.distribution_rule)
}
inline ::anduril::communicationsmanager::v1::DistributionRule* DeleteRuleResponse::release_distribution_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::communicationsmanager::v1::DistributionRule* released = _impl_.distribution_rule_;
  _impl_.distribution_rule_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::anduril::communicationsmanager::v1::DistributionRule* DeleteRuleResponse::unsafe_arena_release_distribution_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.communicationsmanager.v1.DeleteRuleResponse.distribution_rule)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::communicationsmanager::v1::DistributionRule* temp = _impl_.distribution_rule_;
  _impl_.distribution_rule_ = nullptr;
  return temp;
}
inline ::anduril::communicationsmanager::v1::DistributionRule* DeleteRuleResponse::_internal_mutable_distribution_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.distribution_rule_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::anduril::communicationsmanager::v1::DistributionRule>(GetArena());
    _impl_.distribution_rule_ = reinterpret_cast<::anduril::communicationsmanager::v1::DistributionRule*>(p);
  }
  return _impl_.distribution_rule_;
}
inline ::anduril::communicationsmanager::v1::DistributionRule* DeleteRuleResponse::mutable_distribution_rule() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::anduril::communicationsmanager::v1::DistributionRule* _msg = _internal_mutable_distribution_rule();
  // @@protoc_insertion_point(field_mutable:anduril.communicationsmanager.v1.DeleteRuleResponse.distribution_rule)
  return _msg;
}
inline void DeleteRuleResponse::set_allocated_distribution_rule(::anduril::communicationsmanager::v1::DistributionRule* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.distribution_rule_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.distribution_rule_ = reinterpret_cast<::anduril::communicationsmanager::v1::DistributionRule*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.communicationsmanager.v1.DeleteRuleResponse.distribution_rule)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace communicationsmanager
}  // namespace anduril


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::anduril::communicationsmanager::v1::RuleType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::anduril::communicationsmanager::v1::RuleType>() {
  return ::anduril::communicationsmanager::v1::RuleType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_anduril_2fcommunicationsmanager_2fv1_2fcommunications_5fmanager_5fapi_2epub_2eproto_2epb_2eh
