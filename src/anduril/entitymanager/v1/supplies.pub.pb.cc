// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: anduril/entitymanager/v1/supplies.pub.proto

#include "anduril/entitymanager/v1/supplies.pub.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace anduril {
namespace entitymanager {
namespace v1 {

inline constexpr Munition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        munition_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        data_source_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        data_classification_{nullptr},
        quantity_units_{0u},
        condition_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Munition::Munition(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MunitionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MunitionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MunitionDefaultTypeInternal() {}
  union {
    Munition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MunitionDefaultTypeInternal _Munition_default_instance_;

inline constexpr Fuel::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        fuel_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        data_source_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        reported_date_{nullptr},
        data_classification_{nullptr},
        amount_gallons_{0u},
        max_authorized_capacity_gallons_{0u},
        operational_requirement_gallons_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR Fuel::Fuel(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FuelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FuelDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FuelDefaultTypeInternal() {}
  union {
    Fuel _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FuelDefaultTypeInternal _Fuel_default_instance_;

inline constexpr Supplies::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : munitions_{},
        fuel_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Supplies::Supplies(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SuppliesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SuppliesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SuppliesDefaultTypeInternal() {}
  union {
    Supplies _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SuppliesDefaultTypeInternal _Supplies_default_instance_;
}  // namespace v1
}  // namespace entitymanager
}  // namespace anduril
static ::_pb::Metadata file_level_metadata_anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto = nullptr;
const ::uint32_t TableStruct_anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::Supplies, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::Supplies, _impl_.munitions_),
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::Supplies, _impl_.fuel_),
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::Munition, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::Munition, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::Munition, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::Munition, _impl_.munition_id_),
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::Munition, _impl_.name_),
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::Munition, _impl_.quantity_units_),
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::Munition, _impl_.data_classification_),
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::Munition, _impl_.data_source_),
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::Munition, _impl_.condition_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::Fuel, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::Fuel, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::Fuel, _impl_.fuel_id_),
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::Fuel, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::Fuel, _impl_.reported_date_),
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::Fuel, _impl_.amount_gallons_),
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::Fuel, _impl_.max_authorized_capacity_gallons_),
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::Fuel, _impl_.operational_requirement_gallons_),
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::Fuel, _impl_.data_classification_),
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::Fuel, _impl_.data_source_),
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    1,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::anduril::entitymanager::v1::Supplies)},
        {10, 25, -1, sizeof(::anduril::entitymanager::v1::Munition)},
        {31, 47, -1, sizeof(::anduril::entitymanager::v1::Fuel)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::anduril::entitymanager::v1::_Supplies_default_instance_._instance,
    &::anduril::entitymanager::v1::_Munition_default_instance_._instance,
    &::anduril::entitymanager::v1::_Fuel_default_instance_._instance,
};
const char descriptor_table_protodef_anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n+anduril/entitymanager/v1/supplies.pub."
    "proto\022\030anduril.entitymanager.v1\0321anduril"
    "/entitymanager/v1/classification.pub.pro"
    "to\032*anduril/entitymanager/v1/options.pub"
    ".proto\032\037google/protobuf/timestamp.proto\""
    "\212\001\n\010Supplies\022E\n\tmunitions\030\001 \003(\0132\".anduri"
    "l.entitymanager.v1.MunitionB\003\310>\001R\tmuniti"
    "ons\0227\n\004fuel\030\002 \003(\0132\036.anduril.entitymanage"
    "r.v1.FuelB\003\310>\001R\004fuel\"\313\002\n\010Munition\022\037\n\013mun"
    "ition_id\030\001 \001(\tR\nmunitionId\022\022\n\004name\030\002 \001(\t"
    "R\004name\022Z\n\022dod_condition_code\030\003 \001(\0162*.and"
    "uril.entitymanager.v1.DODConditionCodeH\000"
    "R\020dodConditionCode\022%\n\016quantity_units\030\004 \001"
    "(\rR\rquantityUnits\022Y\n\023data_classification"
    "\030\005 \001(\0132(.anduril.entitymanager.v1.Classi"
    "ficationR\022dataClassification\022\037\n\013data_sou"
    "rce\030\006 \001(\tR\ndataSourceB\013\n\tcondition\"\253\003\n\004F"
    "uel\022\034\n\007fuel_id\030\001 \001(\tB\003\320>\001R\006fuelId\022\022\n\004nam"
    "e\030\002 \001(\tR\004name\022\?\n\rreported_date\030\003 \001(\0132\032.g"
    "oogle.protobuf.TimestampR\014reportedDate\022%"
    "\n\016amount_gallons\030\004 \001(\rR\ramountGallons\022E\n"
    "\037max_authorized_capacity_gallons\030\005 \001(\rR\034"
    "maxAuthorizedCapacityGallons\022F\n\037operatio"
    "nal_requirement_gallons\030\006 \001(\rR\035operation"
    "alRequirementGallons\022Y\n\023data_classificat"
    "ion\030\007 \001(\0132(.anduril.entitymanager.v1.Cla"
    "ssificationR\022dataClassification\022\037\n\013data_"
    "source\030\010 \001(\tR\ndataSource*\272\004\n\020DODConditio"
    "nCode\022\036\n\032DOD_CONDITION_CODE_INVALID\020\000\022\030\n"
    "\024DOD_CONDITION_CODE_A\020\001\022\030\n\024DOD_CONDITION"
    "_CODE_B\020\002\022\030\n\024DOD_CONDITION_CODE_C\020\003\022\030\n\024D"
    "OD_CONDITION_CODE_D\020\004\022\030\n\024DOD_CONDITION_C"
    "ODE_E\020\005\022\030\n\024DOD_CONDITION_CODE_F\020\006\022\030\n\024DOD"
    "_CONDITION_CODE_G\020\007\022\030\n\024DOD_CONDITION_COD"
    "E_H\020\010\022\030\n\024DOD_CONDITION_CODE_Q\020\t\022\030\n\024DOD_C"
    "ONDITION_CODE_S\020\n\022\030\n\024DOD_CONDITION_CODE_"
    "J\020\013\022\030\n\024DOD_CONDITION_CODE_K\020\014\022\030\n\024DOD_CON"
    "DITION_CODE_L\020\r\022\030\n\024DOD_CONDITION_CODE_M\020"
    "\016\022\030\n\024DOD_CONDITION_CODE_N\020\017\022\030\n\024DOD_CONDI"
    "TION_CODE_P\020\020\022\030\n\024DOD_CONDITION_CODE_R\020\021\022"
    "\030\n\024DOD_CONDITION_CODE_T\020\022\022\030\n\024DOD_CONDITI"
    "ON_CODE_V\020\023\022\030\n\024DOD_CONDITION_CODE_X\020\024B\201\002"
    "\n\034com.anduril.entitymanager.v1B\020Supplies"
    "PubProtoP\001ZMghe.anduril.dev/anduril/andu"
    "rilapis-go/anduril/entitymanager/v1;enti"
    "tymanager\242\002\003AEX\252\002\030Anduril.Entitymanager."
    "V1\312\002\030Anduril\\Entitymanager\\V1\342\002$Anduril\\"
    "Entitymanager\\V1\\GPBMetadata\352\002\032Anduril::"
    "Entitymanager::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto_deps[3] =
    {
        &::descriptor_table_anduril_2fentitymanager_2fv1_2fclassification_2epub_2eproto,
        &::descriptor_table_anduril_2fentitymanager_2fv1_2foptions_2epub_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto = {
    false,
    false,
    1945,
    descriptor_table_protodef_anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto,
    "anduril/entitymanager/v1/supplies.pub.proto",
    &descriptor_table_anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto_once,
    descriptor_table_anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto_deps,
    3,
    3,
    schemas,
    file_default_instances,
    TableStruct_anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto::offsets,
    file_level_metadata_anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto,
    file_level_enum_descriptors_anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto,
    file_level_service_descriptors_anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto_getter() {
  return &descriptor_table_anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto(&descriptor_table_anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto);
namespace anduril {
namespace entitymanager {
namespace v1 {
const ::google::protobuf::EnumDescriptor* DODConditionCode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto);
  return file_level_enum_descriptors_anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t DODConditionCode_internal_data_[] = {
    1376256u, 0u, };
bool DODConditionCode_IsValid(int value) {
  return 0 <= value && value <= 20;
}
// ===================================================================

class Supplies::_Internal {
 public:
};

Supplies::Supplies(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anduril.entitymanager.v1.Supplies)
}
inline PROTOBUF_NDEBUG_INLINE Supplies::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : munitions_{visibility, arena, from.munitions_},
        fuel_{visibility, arena, from.fuel_},
        _cached_size_{0} {}

Supplies::Supplies(
    ::google::protobuf::Arena* arena,
    const Supplies& from)
    : ::google::protobuf::Message(arena) {
  Supplies* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:anduril.entitymanager.v1.Supplies)
}
inline PROTOBUF_NDEBUG_INLINE Supplies::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : munitions_{visibility, arena},
        fuel_{visibility, arena},
        _cached_size_{0} {}

inline void Supplies::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Supplies::~Supplies() {
  // @@protoc_insertion_point(destructor:anduril.entitymanager.v1.Supplies)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Supplies::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Supplies::Clear() {
// @@protoc_insertion_point(message_clear_start:anduril.entitymanager.v1.Supplies)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.munitions_.Clear();
  _impl_.fuel_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Supplies::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> Supplies::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Supplies_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .anduril.entitymanager.v1.Fuel fuel = 2 [json_name = "fuel", (.anduril.entitymanager.v1.overridable) = true];
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(Supplies, _impl_.fuel_)}},
    // repeated .anduril.entitymanager.v1.Munition munitions = 1 [json_name = "munitions", (.anduril.entitymanager.v1.overridable) = true];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Supplies, _impl_.munitions_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .anduril.entitymanager.v1.Munition munitions = 1 [json_name = "munitions", (.anduril.entitymanager.v1.overridable) = true];
    {PROTOBUF_FIELD_OFFSET(Supplies, _impl_.munitions_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .anduril.entitymanager.v1.Fuel fuel = 2 [json_name = "fuel", (.anduril.entitymanager.v1.overridable) = true];
    {PROTOBUF_FIELD_OFFSET(Supplies, _impl_.fuel_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::anduril::entitymanager::v1::Munition>()},
    {::_pbi::TcParser::GetTable<::anduril::entitymanager::v1::Fuel>()},
  }}, {{
  }},
};

::uint8_t* Supplies::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anduril.entitymanager.v1.Supplies)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .anduril.entitymanager.v1.Munition munitions = 1 [json_name = "munitions", (.anduril.entitymanager.v1.overridable) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_munitions_size()); i < n; i++) {
    const auto& repfield = this->_internal_munitions().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .anduril.entitymanager.v1.Fuel fuel = 2 [json_name = "fuel", (.anduril.entitymanager.v1.overridable) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fuel_size()); i < n; i++) {
    const auto& repfield = this->_internal_fuel().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anduril.entitymanager.v1.Supplies)
  return target;
}

::size_t Supplies::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anduril.entitymanager.v1.Supplies)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .anduril.entitymanager.v1.Munition munitions = 1 [json_name = "munitions", (.anduril.entitymanager.v1.overridable) = true];
  total_size += 1UL * this->_internal_munitions_size();
  for (const auto& msg : this->_internal_munitions()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .anduril.entitymanager.v1.Fuel fuel = 2 [json_name = "fuel", (.anduril.entitymanager.v1.overridable) = true];
  total_size += 1UL * this->_internal_fuel_size();
  for (const auto& msg : this->_internal_fuel()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Supplies::_class_data_ = {
    Supplies::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Supplies::GetClassData() const {
  return &_class_data_;
}

void Supplies::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Supplies*>(&to_msg);
  auto& from = static_cast<const Supplies&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anduril.entitymanager.v1.Supplies)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_munitions()->MergeFrom(
      from._internal_munitions());
  _this->_internal_mutable_fuel()->MergeFrom(
      from._internal_fuel());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Supplies::CopyFrom(const Supplies& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anduril.entitymanager.v1.Supplies)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Supplies::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Supplies::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Supplies::InternalSwap(Supplies* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.munitions_.InternalSwap(&other->_impl_.munitions_);
  _impl_.fuel_.InternalSwap(&other->_impl_.fuel_);
}

::google::protobuf::Metadata Supplies::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto_getter, &descriptor_table_anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto_once,
      file_level_metadata_anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto[0]);
}
// ===================================================================

class Munition::_Internal {
 public:
  using HasBits = decltype(std::declval<Munition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Munition, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::Munition, _impl_._oneof_case_);
  static const ::anduril::entitymanager::v1::Classification& data_classification(const Munition* msg);
  static void set_has_data_classification(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::anduril::entitymanager::v1::Classification& Munition::_Internal::data_classification(const Munition* msg) {
  return *msg->_impl_.data_classification_;
}
void Munition::clear_data_classification() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.data_classification_ != nullptr) _impl_.data_classification_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Munition::Munition(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anduril.entitymanager.v1.Munition)
}
inline PROTOBUF_NDEBUG_INLINE Munition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        munition_id_(arena, from.munition_id_),
        name_(arena, from.name_),
        data_source_(arena, from.data_source_),
        condition_{},
        _oneof_case_{from._oneof_case_[0]} {}

Munition::Munition(
    ::google::protobuf::Arena* arena,
    const Munition& from)
    : ::google::protobuf::Message(arena) {
  Munition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.data_classification_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::anduril::entitymanager::v1::Classification>(arena, *from._impl_.data_classification_)
                : nullptr;
  _impl_.quantity_units_ = from._impl_.quantity_units_;
  switch (condition_case()) {
    case CONDITION_NOT_SET:
      break;
      case kDodConditionCode:
        _impl_.condition_.dod_condition_code_ = from._impl_.condition_.dod_condition_code_;
        break;
  }

  // @@protoc_insertion_point(copy_constructor:anduril.entitymanager.v1.Munition)
}
inline PROTOBUF_NDEBUG_INLINE Munition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        munition_id_(arena),
        name_(arena),
        data_source_(arena),
        condition_{},
        _oneof_case_{} {}

inline void Munition::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, data_classification_),
           0,
           offsetof(Impl_, quantity_units_) -
               offsetof(Impl_, data_classification_) +
               sizeof(Impl_::quantity_units_));
}
Munition::~Munition() {
  // @@protoc_insertion_point(destructor:anduril.entitymanager.v1.Munition)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Munition::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.munition_id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.data_source_.Destroy();
  delete _impl_.data_classification_;
  if (has_condition()) {
    clear_condition();
  }
  _impl_.~Impl_();
}

void Munition::clear_condition() {
// @@protoc_insertion_point(one_of_clear_start:anduril.entitymanager.v1.Munition)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (condition_case()) {
    case kDodConditionCode: {
      // No need to clear
      break;
    }
    case CONDITION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = CONDITION_NOT_SET;
}


PROTOBUF_NOINLINE void Munition::Clear() {
// @@protoc_insertion_point(message_clear_start:anduril.entitymanager.v1.Munition)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.munition_id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.data_source_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.data_classification_ != nullptr);
    _impl_.data_classification_->Clear();
  }
  _impl_.quantity_units_ = 0u;
  clear_condition();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Munition::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 68, 2> Munition::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Munition, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Munition_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string munition_id = 1 [json_name = "munitionId"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Munition, _impl_.munition_id_)}},
    // string name = 2 [json_name = "name"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Munition, _impl_.name_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 quantity_units = 4 [json_name = "quantityUnits"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Munition, _impl_.quantity_units_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Munition, _impl_.quantity_units_)}},
    // .anduril.entitymanager.v1.Classification data_classification = 5 [json_name = "dataClassification"];
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(Munition, _impl_.data_classification_)}},
    // string data_source = 6 [json_name = "dataSource"];
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Munition, _impl_.data_source_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string munition_id = 1 [json_name = "munitionId"];
    {PROTOBUF_FIELD_OFFSET(Munition, _impl_.munition_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name = 2 [json_name = "name"];
    {PROTOBUF_FIELD_OFFSET(Munition, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .anduril.entitymanager.v1.DODConditionCode dod_condition_code = 3 [json_name = "dodConditionCode"];
    {PROTOBUF_FIELD_OFFSET(Munition, _impl_.condition_.dod_condition_code_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kOpenEnum)},
    // uint32 quantity_units = 4 [json_name = "quantityUnits"];
    {PROTOBUF_FIELD_OFFSET(Munition, _impl_.quantity_units_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .anduril.entitymanager.v1.Classification data_classification = 5 [json_name = "dataClassification"];
    {PROTOBUF_FIELD_OFFSET(Munition, _impl_.data_classification_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string data_source = 6 [json_name = "dataSource"];
    {PROTOBUF_FIELD_OFFSET(Munition, _impl_.data_source_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::anduril::entitymanager::v1::Classification>()},
  }}, {{
    "\41\13\4\0\0\0\13\0"
    "anduril.entitymanager.v1.Munition"
    "munition_id"
    "name"
    "data_source"
  }},
};

::uint8_t* Munition::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anduril.entitymanager.v1.Munition)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string munition_id = 1 [json_name = "munitionId"];
  if (!this->_internal_munition_id().empty()) {
    const std::string& _s = this->_internal_munition_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "anduril.entitymanager.v1.Munition.munition_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "anduril.entitymanager.v1.Munition.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .anduril.entitymanager.v1.DODConditionCode dod_condition_code = 3 [json_name = "dodConditionCode"];
  if (condition_case() == kDodConditionCode) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_dod_condition_code(), target);
  }

  // uint32 quantity_units = 4 [json_name = "quantityUnits"];
  if (this->_internal_quantity_units() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_quantity_units(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .anduril.entitymanager.v1.Classification data_classification = 5 [json_name = "dataClassification"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::data_classification(this),
        _Internal::data_classification(this).GetCachedSize(), target, stream);
  }

  // string data_source = 6 [json_name = "dataSource"];
  if (!this->_internal_data_source().empty()) {
    const std::string& _s = this->_internal_data_source();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "anduril.entitymanager.v1.Munition.data_source");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anduril.entitymanager.v1.Munition)
  return target;
}

::size_t Munition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anduril.entitymanager.v1.Munition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string munition_id = 1 [json_name = "munitionId"];
  if (!this->_internal_munition_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_munition_id());
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string data_source = 6 [json_name = "dataSource"];
  if (!this->_internal_data_source().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_data_source());
  }

  // .anduril.entitymanager.v1.Classification data_classification = 5 [json_name = "dataClassification"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.data_classification_);
  }

  // uint32 quantity_units = 4 [json_name = "quantityUnits"];
  if (this->_internal_quantity_units() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_quantity_units());
  }

  switch (condition_case()) {
    // .anduril.entitymanager.v1.DODConditionCode dod_condition_code = 3 [json_name = "dodConditionCode"];
    case kDodConditionCode: {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_dod_condition_code());
      break;
    }
    case CONDITION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Munition::_class_data_ = {
    Munition::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Munition::GetClassData() const {
  return &_class_data_;
}

void Munition::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Munition*>(&to_msg);
  auto& from = static_cast<const Munition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anduril.entitymanager.v1.Munition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_munition_id().empty()) {
    _this->_internal_set_munition_id(from._internal_munition_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_data_source().empty()) {
    _this->_internal_set_data_source(from._internal_data_source());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_data_classification()->::anduril::entitymanager::v1::Classification::MergeFrom(
        from._internal_data_classification());
  }
  if (from._internal_quantity_units() != 0) {
    _this->_internal_set_quantity_units(from._internal_quantity_units());
  }
  switch (from.condition_case()) {
    case kDodConditionCode: {
      _this->_internal_set_dod_condition_code(from._internal_dod_condition_code());
      break;
    }
    case CONDITION_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Munition::CopyFrom(const Munition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anduril.entitymanager.v1.Munition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Munition::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Munition::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Munition::InternalSwap(Munition* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.munition_id_, &other->_impl_.munition_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_source_, &other->_impl_.data_source_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Munition, _impl_.quantity_units_)
      + sizeof(Munition::_impl_.quantity_units_)
      - PROTOBUF_FIELD_OFFSET(Munition, _impl_.data_classification_)>(
          reinterpret_cast<char*>(&_impl_.data_classification_),
          reinterpret_cast<char*>(&other->_impl_.data_classification_));
  swap(_impl_.condition_, other->_impl_.condition_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Munition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto_getter, &descriptor_table_anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto_once,
      file_level_metadata_anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto[1]);
}
// ===================================================================

class Fuel::_Internal {
 public:
  using HasBits = decltype(std::declval<Fuel>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Fuel, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& reported_date(const Fuel* msg);
  static void set_has_reported_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::anduril::entitymanager::v1::Classification& data_classification(const Fuel* msg);
  static void set_has_data_classification(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::google::protobuf::Timestamp& Fuel::_Internal::reported_date(const Fuel* msg) {
  return *msg->_impl_.reported_date_;
}
const ::anduril::entitymanager::v1::Classification& Fuel::_Internal::data_classification(const Fuel* msg) {
  return *msg->_impl_.data_classification_;
}
void Fuel::clear_reported_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.reported_date_ != nullptr) _impl_.reported_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Fuel::clear_data_classification() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.data_classification_ != nullptr) _impl_.data_classification_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Fuel::Fuel(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anduril.entitymanager.v1.Fuel)
}
inline PROTOBUF_NDEBUG_INLINE Fuel::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        fuel_id_(arena, from.fuel_id_),
        name_(arena, from.name_),
        data_source_(arena, from.data_source_) {}

Fuel::Fuel(
    ::google::protobuf::Arena* arena,
    const Fuel& from)
    : ::google::protobuf::Message(arena) {
  Fuel* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.reported_date_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.reported_date_)
                : nullptr;
  _impl_.data_classification_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::anduril::entitymanager::v1::Classification>(arena, *from._impl_.data_classification_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, amount_gallons_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, amount_gallons_),
           offsetof(Impl_, operational_requirement_gallons_) -
               offsetof(Impl_, amount_gallons_) +
               sizeof(Impl_::operational_requirement_gallons_));

  // @@protoc_insertion_point(copy_constructor:anduril.entitymanager.v1.Fuel)
}
inline PROTOBUF_NDEBUG_INLINE Fuel::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        fuel_id_(arena),
        name_(arena),
        data_source_(arena) {}

inline void Fuel::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, reported_date_),
           0,
           offsetof(Impl_, operational_requirement_gallons_) -
               offsetof(Impl_, reported_date_) +
               sizeof(Impl_::operational_requirement_gallons_));
}
Fuel::~Fuel() {
  // @@protoc_insertion_point(destructor:anduril.entitymanager.v1.Fuel)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Fuel::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.fuel_id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.data_source_.Destroy();
  delete _impl_.reported_date_;
  delete _impl_.data_classification_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Fuel::Clear() {
// @@protoc_insertion_point(message_clear_start:anduril.entitymanager.v1.Fuel)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fuel_id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.data_source_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.reported_date_ != nullptr);
      _impl_.reported_date_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.data_classification_ != nullptr);
      _impl_.data_classification_->Clear();
    }
  }
  ::memset(&_impl_.amount_gallons_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.operational_requirement_gallons_) -
      reinterpret_cast<char*>(&_impl_.amount_gallons_)) + sizeof(_impl_.operational_requirement_gallons_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Fuel::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 2, 68, 2> Fuel::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Fuel, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Fuel_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string data_source = 8 [json_name = "dataSource"];
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(Fuel, _impl_.data_source_)}},
    // string fuel_id = 1 [json_name = "fuelId", (.anduril.entitymanager.v1.componentIdentifier) = true];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Fuel, _impl_.fuel_id_)}},
    // string name = 2 [json_name = "name"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Fuel, _impl_.name_)}},
    // .google.protobuf.Timestamp reported_date = 3 [json_name = "reportedDate"];
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(Fuel, _impl_.reported_date_)}},
    // uint32 amount_gallons = 4 [json_name = "amountGallons"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Fuel, _impl_.amount_gallons_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Fuel, _impl_.amount_gallons_)}},
    // uint32 max_authorized_capacity_gallons = 5 [json_name = "maxAuthorizedCapacityGallons"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Fuel, _impl_.max_authorized_capacity_gallons_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Fuel, _impl_.max_authorized_capacity_gallons_)}},
    // uint32 operational_requirement_gallons = 6 [json_name = "operationalRequirementGallons"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Fuel, _impl_.operational_requirement_gallons_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(Fuel, _impl_.operational_requirement_gallons_)}},
    // .anduril.entitymanager.v1.Classification data_classification = 7 [json_name = "dataClassification"];
    {::_pbi::TcParser::FastMtS1,
     {58, 1, 1, PROTOBUF_FIELD_OFFSET(Fuel, _impl_.data_classification_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string fuel_id = 1 [json_name = "fuelId", (.anduril.entitymanager.v1.componentIdentifier) = true];
    {PROTOBUF_FIELD_OFFSET(Fuel, _impl_.fuel_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name = 2 [json_name = "name"];
    {PROTOBUF_FIELD_OFFSET(Fuel, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp reported_date = 3 [json_name = "reportedDate"];
    {PROTOBUF_FIELD_OFFSET(Fuel, _impl_.reported_date_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 amount_gallons = 4 [json_name = "amountGallons"];
    {PROTOBUF_FIELD_OFFSET(Fuel, _impl_.amount_gallons_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 max_authorized_capacity_gallons = 5 [json_name = "maxAuthorizedCapacityGallons"];
    {PROTOBUF_FIELD_OFFSET(Fuel, _impl_.max_authorized_capacity_gallons_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 operational_requirement_gallons = 6 [json_name = "operationalRequirementGallons"];
    {PROTOBUF_FIELD_OFFSET(Fuel, _impl_.operational_requirement_gallons_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .anduril.entitymanager.v1.Classification data_classification = 7 [json_name = "dataClassification"];
    {PROTOBUF_FIELD_OFFSET(Fuel, _impl_.data_classification_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string data_source = 8 [json_name = "dataSource"];
    {PROTOBUF_FIELD_OFFSET(Fuel, _impl_.data_source_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::anduril::entitymanager::v1::Classification>()},
  }}, {{
    "\35\7\4\0\0\0\0\0\13\0\0\0\0\0\0\0"
    "anduril.entitymanager.v1.Fuel"
    "fuel_id"
    "name"
    "data_source"
  }},
};

::uint8_t* Fuel::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anduril.entitymanager.v1.Fuel)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string fuel_id = 1 [json_name = "fuelId", (.anduril.entitymanager.v1.componentIdentifier) = true];
  if (!this->_internal_fuel_id().empty()) {
    const std::string& _s = this->_internal_fuel_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "anduril.entitymanager.v1.Fuel.fuel_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "anduril.entitymanager.v1.Fuel.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp reported_date = 3 [json_name = "reportedDate"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::reported_date(this),
        _Internal::reported_date(this).GetCachedSize(), target, stream);
  }

  // uint32 amount_gallons = 4 [json_name = "amountGallons"];
  if (this->_internal_amount_gallons() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_amount_gallons(), target);
  }

  // uint32 max_authorized_capacity_gallons = 5 [json_name = "maxAuthorizedCapacityGallons"];
  if (this->_internal_max_authorized_capacity_gallons() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_max_authorized_capacity_gallons(), target);
  }

  // uint32 operational_requirement_gallons = 6 [json_name = "operationalRequirementGallons"];
  if (this->_internal_operational_requirement_gallons() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_operational_requirement_gallons(), target);
  }

  // .anduril.entitymanager.v1.Classification data_classification = 7 [json_name = "dataClassification"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::data_classification(this),
        _Internal::data_classification(this).GetCachedSize(), target, stream);
  }

  // string data_source = 8 [json_name = "dataSource"];
  if (!this->_internal_data_source().empty()) {
    const std::string& _s = this->_internal_data_source();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "anduril.entitymanager.v1.Fuel.data_source");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anduril.entitymanager.v1.Fuel)
  return target;
}

::size_t Fuel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anduril.entitymanager.v1.Fuel)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fuel_id = 1 [json_name = "fuelId", (.anduril.entitymanager.v1.componentIdentifier) = true];
  if (!this->_internal_fuel_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_fuel_id());
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string data_source = 8 [json_name = "dataSource"];
  if (!this->_internal_data_source().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_data_source());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Timestamp reported_date = 3 [json_name = "reportedDate"];
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.reported_date_);
    }

    // .anduril.entitymanager.v1.Classification data_classification = 7 [json_name = "dataClassification"];
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.data_classification_);
    }

  }
  // uint32 amount_gallons = 4 [json_name = "amountGallons"];
  if (this->_internal_amount_gallons() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_amount_gallons());
  }

  // uint32 max_authorized_capacity_gallons = 5 [json_name = "maxAuthorizedCapacityGallons"];
  if (this->_internal_max_authorized_capacity_gallons() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_max_authorized_capacity_gallons());
  }

  // uint32 operational_requirement_gallons = 6 [json_name = "operationalRequirementGallons"];
  if (this->_internal_operational_requirement_gallons() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_operational_requirement_gallons());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Fuel::_class_data_ = {
    Fuel::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Fuel::GetClassData() const {
  return &_class_data_;
}

void Fuel::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Fuel*>(&to_msg);
  auto& from = static_cast<const Fuel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anduril.entitymanager.v1.Fuel)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_fuel_id().empty()) {
    _this->_internal_set_fuel_id(from._internal_fuel_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_data_source().empty()) {
    _this->_internal_set_data_source(from._internal_data_source());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_reported_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_reported_date());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_data_classification()->::anduril::entitymanager::v1::Classification::MergeFrom(
          from._internal_data_classification());
    }
  }
  if (from._internal_amount_gallons() != 0) {
    _this->_internal_set_amount_gallons(from._internal_amount_gallons());
  }
  if (from._internal_max_authorized_capacity_gallons() != 0) {
    _this->_internal_set_max_authorized_capacity_gallons(from._internal_max_authorized_capacity_gallons());
  }
  if (from._internal_operational_requirement_gallons() != 0) {
    _this->_internal_set_operational_requirement_gallons(from._internal_operational_requirement_gallons());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Fuel::CopyFrom(const Fuel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anduril.entitymanager.v1.Fuel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Fuel::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Fuel::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Fuel::InternalSwap(Fuel* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fuel_id_, &other->_impl_.fuel_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_source_, &other->_impl_.data_source_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Fuel, _impl_.operational_requirement_gallons_)
      + sizeof(Fuel::_impl_.operational_requirement_gallons_)
      - PROTOBUF_FIELD_OFFSET(Fuel, _impl_.reported_date_)>(
          reinterpret_cast<char*>(&_impl_.reported_date_),
          reinterpret_cast<char*>(&other->_impl_.reported_date_));
}

::google::protobuf::Metadata Fuel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto_getter, &descriptor_table_anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto_once,
      file_level_metadata_anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace entitymanager
}  // namespace anduril
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
