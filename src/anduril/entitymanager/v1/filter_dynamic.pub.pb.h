// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: anduril/entitymanager/v1/filter_dynamic.pub.proto
// Protobuf C++ Version: 5.29.0

#ifndef anduril_2fentitymanager_2fv1_2ffilter_5fdynamic_2epub_2eproto_2epb_2eh
#define anduril_2fentitymanager_2fv1_2ffilter_5fdynamic_2epub_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "anduril/entitymanager/v1/filter.pub.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_anduril_2fentitymanager_2fv1_2ffilter_5fdynamic_2epub_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_anduril_2fentitymanager_2fv1_2ffilter_5fdynamic_2epub_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_anduril_2fentitymanager_2fv1_2ffilter_5fdynamic_2epub_2eproto;
namespace anduril {
namespace entitymanager {
namespace v1 {
class DynamicStatement;
struct DynamicStatementDefaultTypeInternal;
extern DynamicStatementDefaultTypeInternal _DynamicStatement_default_instance_;
class IntersectionComparator;
struct IntersectionComparatorDefaultTypeInternal;
extern IntersectionComparatorDefaultTypeInternal _IntersectionComparator_default_instance_;
class WithinComparison;
struct WithinComparisonDefaultTypeInternal;
extern WithinComparisonDefaultTypeInternal _WithinComparison_default_instance_;
}  // namespace v1
}  // namespace entitymanager
}  // namespace anduril
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace anduril {
namespace entitymanager {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class WithinComparison final
    : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:anduril.entitymanager.v1.WithinComparison) */ {
 public:
  inline WithinComparison() : WithinComparison(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(WithinComparison* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(WithinComparison));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WithinComparison(
      ::google::protobuf::internal::ConstantInitialized);

  inline WithinComparison(const WithinComparison& from) : WithinComparison(nullptr, from) {}
  inline WithinComparison(WithinComparison&& from) noexcept
      : WithinComparison(nullptr, std::move(from)) {}
  inline WithinComparison& operator=(const WithinComparison& from) {
    CopyFrom(from);
    return *this;
  }
  inline WithinComparison& operator=(WithinComparison&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WithinComparison& default_instance() {
    return *internal_default_instance();
  }
  static inline const WithinComparison* internal_default_instance() {
    return reinterpret_cast<const WithinComparison*>(
        &_WithinComparison_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(WithinComparison& a, WithinComparison& b) { a.Swap(&b); }
  inline void Swap(WithinComparison* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WithinComparison* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WithinComparison* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<WithinComparison>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const WithinComparison& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const WithinComparison& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "anduril.entitymanager.v1.WithinComparison"; }

 protected:
  explicit WithinComparison(::google::protobuf::Arena* arena);
  WithinComparison(::google::protobuf::Arena* arena, const WithinComparison& from);
  WithinComparison(::google::protobuf::Arena* arena, WithinComparison&& from) noexcept
      : WithinComparison(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:anduril.entitymanager.v1.WithinComparison)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WithinComparison& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_anduril_2fentitymanager_2fv1_2ffilter_5fdynamic_2epub_2eproto;
};
// -------------------------------------------------------------------

class IntersectionComparator final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.entitymanager.v1.IntersectionComparator) */ {
 public:
  inline IntersectionComparator() : IntersectionComparator(nullptr) {}
  ~IntersectionComparator() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(IntersectionComparator* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(IntersectionComparator));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IntersectionComparator(
      ::google::protobuf::internal::ConstantInitialized);

  inline IntersectionComparator(const IntersectionComparator& from) : IntersectionComparator(nullptr, from) {}
  inline IntersectionComparator(IntersectionComparator&& from) noexcept
      : IntersectionComparator(nullptr, std::move(from)) {}
  inline IntersectionComparator& operator=(const IntersectionComparator& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntersectionComparator& operator=(IntersectionComparator&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IntersectionComparator& default_instance() {
    return *internal_default_instance();
  }
  enum ComparisonCase {
    kWithinComparison = 1,
    COMPARISON_NOT_SET = 0,
  };
  static inline const IntersectionComparator* internal_default_instance() {
    return reinterpret_cast<const IntersectionComparator*>(
        &_IntersectionComparator_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(IntersectionComparator& a, IntersectionComparator& b) { a.Swap(&b); }
  inline void Swap(IntersectionComparator* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntersectionComparator* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IntersectionComparator* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<IntersectionComparator>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IntersectionComparator& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const IntersectionComparator& from) { IntersectionComparator::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(IntersectionComparator* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "anduril.entitymanager.v1.IntersectionComparator"; }

 protected:
  explicit IntersectionComparator(::google::protobuf::Arena* arena);
  IntersectionComparator(::google::protobuf::Arena* arena, const IntersectionComparator& from);
  IntersectionComparator(::google::protobuf::Arena* arena, IntersectionComparator&& from) noexcept
      : IntersectionComparator(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWithinComparisonFieldNumber = 1,
  };
  // .anduril.entitymanager.v1.WithinComparison within_comparison = 1 [json_name = "withinComparison"];
  bool has_within_comparison() const;
  private:
  bool _internal_has_within_comparison() const;

  public:
  void clear_within_comparison() ;
  const ::anduril::entitymanager::v1::WithinComparison& within_comparison() const;
  PROTOBUF_NODISCARD ::anduril::entitymanager::v1::WithinComparison* release_within_comparison();
  ::anduril::entitymanager::v1::WithinComparison* mutable_within_comparison();
  void set_allocated_within_comparison(::anduril::entitymanager::v1::WithinComparison* value);
  void unsafe_arena_set_allocated_within_comparison(::anduril::entitymanager::v1::WithinComparison* value);
  ::anduril::entitymanager::v1::WithinComparison* unsafe_arena_release_within_comparison();

  private:
  const ::anduril::entitymanager::v1::WithinComparison& _internal_within_comparison() const;
  ::anduril::entitymanager::v1::WithinComparison* _internal_mutable_within_comparison();

  public:
  void clear_comparison();
  ComparisonCase comparison_case() const;
  // @@protoc_insertion_point(class_scope:anduril.entitymanager.v1.IntersectionComparator)
 private:
  class _Internal;
  void set_has_within_comparison();
  inline bool has_comparison() const;
  inline void clear_has_comparison();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const IntersectionComparator& from_msg);
    union ComparisonUnion {
      constexpr ComparisonUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::anduril::entitymanager::v1::WithinComparison* within_comparison_;
    } comparison_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fentitymanager_2fv1_2ffilter_5fdynamic_2epub_2eproto;
};
// -------------------------------------------------------------------

class DynamicStatement final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.entitymanager.v1.DynamicStatement) */ {
 public:
  inline DynamicStatement() : DynamicStatement(nullptr) {}
  ~DynamicStatement() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DynamicStatement* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DynamicStatement));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DynamicStatement(
      ::google::protobuf::internal::ConstantInitialized);

  inline DynamicStatement(const DynamicStatement& from) : DynamicStatement(nullptr, from) {}
  inline DynamicStatement(DynamicStatement&& from) noexcept
      : DynamicStatement(nullptr, std::move(from)) {}
  inline DynamicStatement& operator=(const DynamicStatement& from) {
    CopyFrom(from);
    return *this;
  }
  inline DynamicStatement& operator=(DynamicStatement&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DynamicStatement& default_instance() {
    return *internal_default_instance();
  }
  static inline const DynamicStatement* internal_default_instance() {
    return reinterpret_cast<const DynamicStatement*>(
        &_DynamicStatement_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(DynamicStatement& a, DynamicStatement& b) { a.Swap(&b); }
  inline void Swap(DynamicStatement* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DynamicStatement* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DynamicStatement* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DynamicStatement>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DynamicStatement& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DynamicStatement& from) { DynamicStatement::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DynamicStatement* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "anduril.entitymanager.v1.DynamicStatement"; }

 protected:
  explicit DynamicStatement(::google::protobuf::Arena* arena);
  DynamicStatement(::google::protobuf::Arena* arena, const DynamicStatement& from);
  DynamicStatement(::google::protobuf::Arena* arena, DynamicStatement&& from) noexcept
      : DynamicStatement(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFilterFieldNumber = 1,
    kSelectorFieldNumber = 2,
    kComparatorFieldNumber = 3,
  };
  // .anduril.entitymanager.v1.Statement filter = 1 [json_name = "filter"];
  bool has_filter() const;
  void clear_filter() ;
  const ::anduril::entitymanager::v1::Statement& filter() const;
  PROTOBUF_NODISCARD ::anduril::entitymanager::v1::Statement* release_filter();
  ::anduril::entitymanager::v1::Statement* mutable_filter();
  void set_allocated_filter(::anduril::entitymanager::v1::Statement* value);
  void unsafe_arena_set_allocated_filter(::anduril::entitymanager::v1::Statement* value);
  ::anduril::entitymanager::v1::Statement* unsafe_arena_release_filter();

  private:
  const ::anduril::entitymanager::v1::Statement& _internal_filter() const;
  ::anduril::entitymanager::v1::Statement* _internal_mutable_filter();

  public:
  // .anduril.entitymanager.v1.Statement selector = 2 [json_name = "selector"];
  bool has_selector() const;
  void clear_selector() ;
  const ::anduril::entitymanager::v1::Statement& selector() const;
  PROTOBUF_NODISCARD ::anduril::entitymanager::v1::Statement* release_selector();
  ::anduril::entitymanager::v1::Statement* mutable_selector();
  void set_allocated_selector(::anduril::entitymanager::v1::Statement* value);
  void unsafe_arena_set_allocated_selector(::anduril::entitymanager::v1::Statement* value);
  ::anduril::entitymanager::v1::Statement* unsafe_arena_release_selector();

  private:
  const ::anduril::entitymanager::v1::Statement& _internal_selector() const;
  ::anduril::entitymanager::v1::Statement* _internal_mutable_selector();

  public:
  // .anduril.entitymanager.v1.IntersectionComparator comparator = 3 [json_name = "comparator"];
  bool has_comparator() const;
  void clear_comparator() ;
  const ::anduril::entitymanager::v1::IntersectionComparator& comparator() const;
  PROTOBUF_NODISCARD ::anduril::entitymanager::v1::IntersectionComparator* release_comparator();
  ::anduril::entitymanager::v1::IntersectionComparator* mutable_comparator();
  void set_allocated_comparator(::anduril::entitymanager::v1::IntersectionComparator* value);
  void unsafe_arena_set_allocated_comparator(::anduril::entitymanager::v1::IntersectionComparator* value);
  ::anduril::entitymanager::v1::IntersectionComparator* unsafe_arena_release_comparator();

  private:
  const ::anduril::entitymanager::v1::IntersectionComparator& _internal_comparator() const;
  ::anduril::entitymanager::v1::IntersectionComparator* _internal_mutable_comparator();

  public:
  // @@protoc_insertion_point(class_scope:anduril.entitymanager.v1.DynamicStatement)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DynamicStatement& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::anduril::entitymanager::v1::Statement* filter_;
    ::anduril::entitymanager::v1::Statement* selector_;
    ::anduril::entitymanager::v1::IntersectionComparator* comparator_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fentitymanager_2fv1_2ffilter_5fdynamic_2epub_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DynamicStatement

// .anduril.entitymanager.v1.Statement filter = 1 [json_name = "filter"];
inline bool DynamicStatement::has_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.filter_ != nullptr);
  return value;
}
inline const ::anduril::entitymanager::v1::Statement& DynamicStatement::_internal_filter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::anduril::entitymanager::v1::Statement* p = _impl_.filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::anduril::entitymanager::v1::Statement&>(::anduril::entitymanager::v1::_Statement_default_instance_);
}
inline const ::anduril::entitymanager::v1::Statement& DynamicStatement::filter() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.DynamicStatement.filter)
  return _internal_filter();
}
inline void DynamicStatement::unsafe_arena_set_allocated_filter(::anduril::entitymanager::v1::Statement* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.filter_);
  }
  _impl_.filter_ = reinterpret_cast<::anduril::entitymanager::v1::Statement*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.entitymanager.v1.DynamicStatement.filter)
}
inline ::anduril::entitymanager::v1::Statement* DynamicStatement::release_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::entitymanager::v1::Statement* released = _impl_.filter_;
  _impl_.filter_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::anduril::entitymanager::v1::Statement* DynamicStatement::unsafe_arena_release_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.entitymanager.v1.DynamicStatement.filter)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::entitymanager::v1::Statement* temp = _impl_.filter_;
  _impl_.filter_ = nullptr;
  return temp;
}
inline ::anduril::entitymanager::v1::Statement* DynamicStatement::_internal_mutable_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.filter_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::anduril::entitymanager::v1::Statement>(GetArena());
    _impl_.filter_ = reinterpret_cast<::anduril::entitymanager::v1::Statement*>(p);
  }
  return _impl_.filter_;
}
inline ::anduril::entitymanager::v1::Statement* DynamicStatement::mutable_filter() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::anduril::entitymanager::v1::Statement* _msg = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:anduril.entitymanager.v1.DynamicStatement.filter)
  return _msg;
}
inline void DynamicStatement::set_allocated_filter(::anduril::entitymanager::v1::Statement* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.filter_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.filter_ = reinterpret_cast<::anduril::entitymanager::v1::Statement*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.entitymanager.v1.DynamicStatement.filter)
}

// .anduril.entitymanager.v1.Statement selector = 2 [json_name = "selector"];
inline bool DynamicStatement::has_selector() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.selector_ != nullptr);
  return value;
}
inline const ::anduril::entitymanager::v1::Statement& DynamicStatement::_internal_selector() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::anduril::entitymanager::v1::Statement* p = _impl_.selector_;
  return p != nullptr ? *p : reinterpret_cast<const ::anduril::entitymanager::v1::Statement&>(::anduril::entitymanager::v1::_Statement_default_instance_);
}
inline const ::anduril::entitymanager::v1::Statement& DynamicStatement::selector() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.DynamicStatement.selector)
  return _internal_selector();
}
inline void DynamicStatement::unsafe_arena_set_allocated_selector(::anduril::entitymanager::v1::Statement* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.selector_);
  }
  _impl_.selector_ = reinterpret_cast<::anduril::entitymanager::v1::Statement*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.entitymanager.v1.DynamicStatement.selector)
}
inline ::anduril::entitymanager::v1::Statement* DynamicStatement::release_selector() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::anduril::entitymanager::v1::Statement* released = _impl_.selector_;
  _impl_.selector_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::anduril::entitymanager::v1::Statement* DynamicStatement::unsafe_arena_release_selector() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.entitymanager.v1.DynamicStatement.selector)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::anduril::entitymanager::v1::Statement* temp = _impl_.selector_;
  _impl_.selector_ = nullptr;
  return temp;
}
inline ::anduril::entitymanager::v1::Statement* DynamicStatement::_internal_mutable_selector() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.selector_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::anduril::entitymanager::v1::Statement>(GetArena());
    _impl_.selector_ = reinterpret_cast<::anduril::entitymanager::v1::Statement*>(p);
  }
  return _impl_.selector_;
}
inline ::anduril::entitymanager::v1::Statement* DynamicStatement::mutable_selector() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::anduril::entitymanager::v1::Statement* _msg = _internal_mutable_selector();
  // @@protoc_insertion_point(field_mutable:anduril.entitymanager.v1.DynamicStatement.selector)
  return _msg;
}
inline void DynamicStatement::set_allocated_selector(::anduril::entitymanager::v1::Statement* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.selector_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.selector_ = reinterpret_cast<::anduril::entitymanager::v1::Statement*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.entitymanager.v1.DynamicStatement.selector)
}

// .anduril.entitymanager.v1.IntersectionComparator comparator = 3 [json_name = "comparator"];
inline bool DynamicStatement::has_comparator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.comparator_ != nullptr);
  return value;
}
inline void DynamicStatement::clear_comparator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.comparator_ != nullptr) _impl_.comparator_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::anduril::entitymanager::v1::IntersectionComparator& DynamicStatement::_internal_comparator() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::anduril::entitymanager::v1::IntersectionComparator* p = _impl_.comparator_;
  return p != nullptr ? *p : reinterpret_cast<const ::anduril::entitymanager::v1::IntersectionComparator&>(::anduril::entitymanager::v1::_IntersectionComparator_default_instance_);
}
inline const ::anduril::entitymanager::v1::IntersectionComparator& DynamicStatement::comparator() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.DynamicStatement.comparator)
  return _internal_comparator();
}
inline void DynamicStatement::unsafe_arena_set_allocated_comparator(::anduril::entitymanager::v1::IntersectionComparator* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.comparator_);
  }
  _impl_.comparator_ = reinterpret_cast<::anduril::entitymanager::v1::IntersectionComparator*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.entitymanager.v1.DynamicStatement.comparator)
}
inline ::anduril::entitymanager::v1::IntersectionComparator* DynamicStatement::release_comparator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::anduril::entitymanager::v1::IntersectionComparator* released = _impl_.comparator_;
  _impl_.comparator_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::anduril::entitymanager::v1::IntersectionComparator* DynamicStatement::unsafe_arena_release_comparator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.entitymanager.v1.DynamicStatement.comparator)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::anduril::entitymanager::v1::IntersectionComparator* temp = _impl_.comparator_;
  _impl_.comparator_ = nullptr;
  return temp;
}
inline ::anduril::entitymanager::v1::IntersectionComparator* DynamicStatement::_internal_mutable_comparator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.comparator_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::anduril::entitymanager::v1::IntersectionComparator>(GetArena());
    _impl_.comparator_ = reinterpret_cast<::anduril::entitymanager::v1::IntersectionComparator*>(p);
  }
  return _impl_.comparator_;
}
inline ::anduril::entitymanager::v1::IntersectionComparator* DynamicStatement::mutable_comparator() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::anduril::entitymanager::v1::IntersectionComparator* _msg = _internal_mutable_comparator();
  // @@protoc_insertion_point(field_mutable:anduril.entitymanager.v1.DynamicStatement.comparator)
  return _msg;
}
inline void DynamicStatement::set_allocated_comparator(::anduril::entitymanager::v1::IntersectionComparator* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.comparator_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.comparator_ = reinterpret_cast<::anduril::entitymanager::v1::IntersectionComparator*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.entitymanager.v1.DynamicStatement.comparator)
}

// -------------------------------------------------------------------

// IntersectionComparator

// .anduril.entitymanager.v1.WithinComparison within_comparison = 1 [json_name = "withinComparison"];
inline bool IntersectionComparator::has_within_comparison() const {
  return comparison_case() == kWithinComparison;
}
inline bool IntersectionComparator::_internal_has_within_comparison() const {
  return comparison_case() == kWithinComparison;
}
inline void IntersectionComparator::set_has_within_comparison() {
  _impl_._oneof_case_[0] = kWithinComparison;
}
inline void IntersectionComparator::clear_within_comparison() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (comparison_case() == kWithinComparison) {
    if (GetArena() == nullptr) {
      delete _impl_.comparison_.within_comparison_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.comparison_.within_comparison_);
    }
    clear_has_comparison();
  }
}
inline ::anduril::entitymanager::v1::WithinComparison* IntersectionComparator::release_within_comparison() {
  // @@protoc_insertion_point(field_release:anduril.entitymanager.v1.IntersectionComparator.within_comparison)
  if (comparison_case() == kWithinComparison) {
    clear_has_comparison();
    auto* temp = _impl_.comparison_.within_comparison_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.comparison_.within_comparison_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::anduril::entitymanager::v1::WithinComparison& IntersectionComparator::_internal_within_comparison() const {
  return comparison_case() == kWithinComparison ? *_impl_.comparison_.within_comparison_ : reinterpret_cast<::anduril::entitymanager::v1::WithinComparison&>(::anduril::entitymanager::v1::_WithinComparison_default_instance_);
}
inline const ::anduril::entitymanager::v1::WithinComparison& IntersectionComparator::within_comparison() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.IntersectionComparator.within_comparison)
  return _internal_within_comparison();
}
inline ::anduril::entitymanager::v1::WithinComparison* IntersectionComparator::unsafe_arena_release_within_comparison() {
  // @@protoc_insertion_point(field_unsafe_arena_release:anduril.entitymanager.v1.IntersectionComparator.within_comparison)
  if (comparison_case() == kWithinComparison) {
    clear_has_comparison();
    auto* temp = _impl_.comparison_.within_comparison_;
    _impl_.comparison_.within_comparison_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void IntersectionComparator::unsafe_arena_set_allocated_within_comparison(::anduril::entitymanager::v1::WithinComparison* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_comparison();
  if (value) {
    set_has_within_comparison();
    _impl_.comparison_.within_comparison_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.entitymanager.v1.IntersectionComparator.within_comparison)
}
inline ::anduril::entitymanager::v1::WithinComparison* IntersectionComparator::_internal_mutable_within_comparison() {
  if (comparison_case() != kWithinComparison) {
    clear_comparison();
    set_has_within_comparison();
    _impl_.comparison_.within_comparison_ =
        ::google::protobuf::Message::DefaultConstruct<::anduril::entitymanager::v1::WithinComparison>(GetArena());
  }
  return _impl_.comparison_.within_comparison_;
}
inline ::anduril::entitymanager::v1::WithinComparison* IntersectionComparator::mutable_within_comparison() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::anduril::entitymanager::v1::WithinComparison* _msg = _internal_mutable_within_comparison();
  // @@protoc_insertion_point(field_mutable:anduril.entitymanager.v1.IntersectionComparator.within_comparison)
  return _msg;
}

inline bool IntersectionComparator::has_comparison() const {
  return comparison_case() != COMPARISON_NOT_SET;
}
inline void IntersectionComparator::clear_has_comparison() {
  _impl_._oneof_case_[0] = COMPARISON_NOT_SET;
}
inline IntersectionComparator::ComparisonCase IntersectionComparator::comparison_case() const {
  return IntersectionComparator::ComparisonCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// WithinComparison

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace entitymanager
}  // namespace anduril


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // anduril_2fentitymanager_2fv1_2ffilter_5fdynamic_2epub_2eproto_2epb_2eh
