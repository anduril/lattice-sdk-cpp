// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: anduril/entitymanager/v1/ontology.pub.proto
// Protobuf C++ Version: 5.29.0

#ifndef anduril_2fentitymanager_2fv1_2fontology_2epub_2eproto_2epb_2eh
#define anduril_2fentitymanager_2fv1_2fontology_2epub_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "anduril/entitymanager/v1/options.pub.pb.h"
#include "anduril/entitymanager/v1/types.pub.pb.h"
#include "anduril/ontology/v1/type.pub.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_anduril_2fentitymanager_2fv1_2fontology_2epub_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_anduril_2fentitymanager_2fv1_2fontology_2epub_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_anduril_2fentitymanager_2fv1_2fontology_2epub_2eproto;
namespace anduril {
namespace entitymanager {
namespace v1 {
class MilView;
struct MilViewDefaultTypeInternal;
extern MilViewDefaultTypeInternal _MilView_default_instance_;
class Ontology;
struct OntologyDefaultTypeInternal;
extern OntologyDefaultTypeInternal _Ontology_default_instance_;
}  // namespace v1
}  // namespace entitymanager
}  // namespace anduril
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace anduril {
namespace entitymanager {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class Ontology final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.entitymanager.v1.Ontology) */ {
 public:
  inline Ontology() : Ontology(nullptr) {}
  ~Ontology() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Ontology* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Ontology));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Ontology(
      ::google::protobuf::internal::ConstantInitialized);

  inline Ontology(const Ontology& from) : Ontology(nullptr, from) {}
  inline Ontology(Ontology&& from) noexcept
      : Ontology(nullptr, std::move(from)) {}
  inline Ontology& operator=(const Ontology& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ontology& operator=(Ontology&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ontology& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ontology* internal_default_instance() {
    return reinterpret_cast<const Ontology*>(
        &_Ontology_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Ontology& a, Ontology& b) { a.Swap(&b); }
  inline void Swap(Ontology* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ontology* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ontology* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Ontology>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Ontology& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Ontology& from) { Ontology::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Ontology* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "anduril.entitymanager.v1.Ontology"; }

 protected:
  explicit Ontology(::google::protobuf::Arena* arena);
  Ontology(::google::protobuf::Arena* arena, const Ontology& from);
  Ontology(::google::protobuf::Arena* arena, Ontology&& from) noexcept
      : Ontology(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPlatformTypeFieldNumber = 3,
    kSpecificTypeFieldNumber = 4,
    kTemplateFieldNumber = 2,
  };
  // string platform_type = 3 [json_name = "platformType", (.anduril.entitymanager.v1.overridable) = true];
  void clear_platform_type() ;
  const std::string& platform_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_platform_type(Arg_&& arg, Args_... args);
  std::string* mutable_platform_type();
  PROTOBUF_NODISCARD std::string* release_platform_type();
  void set_allocated_platform_type(std::string* value);

  private:
  const std::string& _internal_platform_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_platform_type(
      const std::string& value);
  std::string* _internal_mutable_platform_type();

  public:
  // string specific_type = 4 [json_name = "specificType", (.anduril.entitymanager.v1.overridable) = true];
  void clear_specific_type() ;
  const std::string& specific_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_specific_type(Arg_&& arg, Args_... args);
  std::string* mutable_specific_type();
  PROTOBUF_NODISCARD std::string* release_specific_type();
  void set_allocated_specific_type(std::string* value);

  private:
  const std::string& _internal_specific_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_specific_type(
      const std::string& value);
  std::string* _internal_mutable_specific_type();

  public:
  // .anduril.entitymanager.v1.Template template = 2 [json_name = "template"];
  void clear_template_() ;
  ::anduril::entitymanager::v1::Template template_() const;
  void set_template_(::anduril::entitymanager::v1::Template value);

  private:
  ::anduril::entitymanager::v1::Template _internal_template_() const;
  void _internal_set_template_(::anduril::entitymanager::v1::Template value);

  public:
  // @@protoc_insertion_point(class_scope:anduril.entitymanager.v1.Ontology)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      68, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Ontology& from_msg);
    ::google::protobuf::internal::ArenaStringPtr platform_type_;
    ::google::protobuf::internal::ArenaStringPtr specific_type_;
    int template__;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fentitymanager_2fv1_2fontology_2epub_2eproto;
};
// -------------------------------------------------------------------

class MilView final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.entitymanager.v1.MilView) */ {
 public:
  inline MilView() : MilView(nullptr) {}
  ~MilView() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MilView* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MilView));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MilView(
      ::google::protobuf::internal::ConstantInitialized);

  inline MilView(const MilView& from) : MilView(nullptr, from) {}
  inline MilView(MilView&& from) noexcept
      : MilView(nullptr, std::move(from)) {}
  inline MilView& operator=(const MilView& from) {
    CopyFrom(from);
    return *this;
  }
  inline MilView& operator=(MilView&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MilView& default_instance() {
    return *internal_default_instance();
  }
  static inline const MilView* internal_default_instance() {
    return reinterpret_cast<const MilView*>(
        &_MilView_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(MilView& a, MilView& b) { a.Swap(&b); }
  inline void Swap(MilView* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MilView* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MilView* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MilView>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MilView& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MilView& from) { MilView::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MilView* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "anduril.entitymanager.v1.MilView"; }

 protected:
  explicit MilView(::google::protobuf::Arena* arena);
  MilView(::google::protobuf::Arena* arena, const MilView& from);
  MilView(::google::protobuf::Arena* arena, MilView&& from) noexcept
      : MilView(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDispositionFieldNumber = 1,
    kEnvironmentFieldNumber = 2,
    kNationalityFieldNumber = 3,
  };
  // .anduril.ontology.v1.Disposition disposition = 1 [json_name = "disposition", (.anduril.entitymanager.v1.overridable) = true];
  void clear_disposition() ;
  ::anduril::ontology::v1::Disposition disposition() const;
  void set_disposition(::anduril::ontology::v1::Disposition value);

  private:
  ::anduril::ontology::v1::Disposition _internal_disposition() const;
  void _internal_set_disposition(::anduril::ontology::v1::Disposition value);

  public:
  // .anduril.ontology.v1.Environment environment = 2 [json_name = "environment", (.anduril.entitymanager.v1.overridable) = true];
  void clear_environment() ;
  ::anduril::ontology::v1::Environment environment() const;
  void set_environment(::anduril::ontology::v1::Environment value);

  private:
  ::anduril::ontology::v1::Environment _internal_environment() const;
  void _internal_set_environment(::anduril::ontology::v1::Environment value);

  public:
  // .anduril.ontology.v1.Nationality nationality = 3 [json_name = "nationality", (.anduril.entitymanager.v1.overridable) = true];
  void clear_nationality() ;
  ::anduril::ontology::v1::Nationality nationality() const;
  void set_nationality(::anduril::ontology::v1::Nationality value);

  private:
  ::anduril::ontology::v1::Nationality _internal_nationality() const;
  void _internal_set_nationality(::anduril::ontology::v1::Nationality value);

  public:
  // @@protoc_insertion_point(class_scope:anduril.entitymanager.v1.MilView)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MilView& from_msg);
    int disposition_;
    int environment_;
    int nationality_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fentitymanager_2fv1_2fontology_2epub_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MilView

// .anduril.ontology.v1.Disposition disposition = 1 [json_name = "disposition", (.anduril.entitymanager.v1.overridable) = true];
inline void MilView::clear_disposition() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disposition_ = 0;
}
inline ::anduril::ontology::v1::Disposition MilView::disposition() const {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.MilView.disposition)
  return _internal_disposition();
}
inline void MilView::set_disposition(::anduril::ontology::v1::Disposition value) {
  _internal_set_disposition(value);
  // @@protoc_insertion_point(field_set:anduril.entitymanager.v1.MilView.disposition)
}
inline ::anduril::ontology::v1::Disposition MilView::_internal_disposition() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::anduril::ontology::v1::Disposition>(_impl_.disposition_);
}
inline void MilView::_internal_set_disposition(::anduril::ontology::v1::Disposition value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disposition_ = value;
}

// .anduril.ontology.v1.Environment environment = 2 [json_name = "environment", (.anduril.entitymanager.v1.overridable) = true];
inline void MilView::clear_environment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.environment_ = 0;
}
inline ::anduril::ontology::v1::Environment MilView::environment() const {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.MilView.environment)
  return _internal_environment();
}
inline void MilView::set_environment(::anduril::ontology::v1::Environment value) {
  _internal_set_environment(value);
  // @@protoc_insertion_point(field_set:anduril.entitymanager.v1.MilView.environment)
}
inline ::anduril::ontology::v1::Environment MilView::_internal_environment() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::anduril::ontology::v1::Environment>(_impl_.environment_);
}
inline void MilView::_internal_set_environment(::anduril::ontology::v1::Environment value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.environment_ = value;
}

// .anduril.ontology.v1.Nationality nationality = 3 [json_name = "nationality", (.anduril.entitymanager.v1.overridable) = true];
inline void MilView::clear_nationality() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nationality_ = 0;
}
inline ::anduril::ontology::v1::Nationality MilView::nationality() const {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.MilView.nationality)
  return _internal_nationality();
}
inline void MilView::set_nationality(::anduril::ontology::v1::Nationality value) {
  _internal_set_nationality(value);
  // @@protoc_insertion_point(field_set:anduril.entitymanager.v1.MilView.nationality)
}
inline ::anduril::ontology::v1::Nationality MilView::_internal_nationality() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::anduril::ontology::v1::Nationality>(_impl_.nationality_);
}
inline void MilView::_internal_set_nationality(::anduril::ontology::v1::Nationality value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nationality_ = value;
}

// -------------------------------------------------------------------

// Ontology

// string platform_type = 3 [json_name = "platformType", (.anduril.entitymanager.v1.overridable) = true];
inline void Ontology::clear_platform_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.platform_type_.ClearToEmpty();
}
inline const std::string& Ontology::platform_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.Ontology.platform_type)
  return _internal_platform_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Ontology::set_platform_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.platform_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:anduril.entitymanager.v1.Ontology.platform_type)
}
inline std::string* Ontology::mutable_platform_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_platform_type();
  // @@protoc_insertion_point(field_mutable:anduril.entitymanager.v1.Ontology.platform_type)
  return _s;
}
inline const std::string& Ontology::_internal_platform_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.platform_type_.Get();
}
inline void Ontology::_internal_set_platform_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.platform_type_.Set(value, GetArena());
}
inline std::string* Ontology::_internal_mutable_platform_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.platform_type_.Mutable( GetArena());
}
inline std::string* Ontology::release_platform_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.entitymanager.v1.Ontology.platform_type)
  return _impl_.platform_type_.Release();
}
inline void Ontology::set_allocated_platform_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.platform_type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.platform_type_.IsDefault()) {
    _impl_.platform_type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:anduril.entitymanager.v1.Ontology.platform_type)
}

// string specific_type = 4 [json_name = "specificType", (.anduril.entitymanager.v1.overridable) = true];
inline void Ontology::clear_specific_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.specific_type_.ClearToEmpty();
}
inline const std::string& Ontology::specific_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.Ontology.specific_type)
  return _internal_specific_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Ontology::set_specific_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.specific_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:anduril.entitymanager.v1.Ontology.specific_type)
}
inline std::string* Ontology::mutable_specific_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_specific_type();
  // @@protoc_insertion_point(field_mutable:anduril.entitymanager.v1.Ontology.specific_type)
  return _s;
}
inline const std::string& Ontology::_internal_specific_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.specific_type_.Get();
}
inline void Ontology::_internal_set_specific_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.specific_type_.Set(value, GetArena());
}
inline std::string* Ontology::_internal_mutable_specific_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.specific_type_.Mutable( GetArena());
}
inline std::string* Ontology::release_specific_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.entitymanager.v1.Ontology.specific_type)
  return _impl_.specific_type_.Release();
}
inline void Ontology::set_allocated_specific_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.specific_type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.specific_type_.IsDefault()) {
    _impl_.specific_type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:anduril.entitymanager.v1.Ontology.specific_type)
}

// .anduril.entitymanager.v1.Template template = 2 [json_name = "template"];
inline void Ontology::clear_template_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.template__ = 0;
}
inline ::anduril::entitymanager::v1::Template Ontology::template_() const {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.Ontology.template)
  return _internal_template_();
}
inline void Ontology::set_template_(::anduril::entitymanager::v1::Template value) {
  _internal_set_template_(value);
  // @@protoc_insertion_point(field_set:anduril.entitymanager.v1.Ontology.template)
}
inline ::anduril::entitymanager::v1::Template Ontology::_internal_template_() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::anduril::entitymanager::v1::Template>(_impl_.template__);
}
inline void Ontology::_internal_set_template_(::anduril::entitymanager::v1::Template value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.template__ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace entitymanager
}  // namespace anduril


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // anduril_2fentitymanager_2fv1_2fontology_2epub_2eproto_2epb_2eh
