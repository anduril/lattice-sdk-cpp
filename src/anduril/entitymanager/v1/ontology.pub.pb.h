// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: anduril/entitymanager/v1/ontology.pub.proto
// Protobuf C++ Version: 4.25.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_anduril_2fentitymanager_2fv1_2fontology_2epub_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_anduril_2fentitymanager_2fv1_2fontology_2epub_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "anduril/entitymanager/v1/options.pub.pb.h"
#include "anduril/entitymanager/v1/types.pub.pb.h"
#include "anduril/ontology/v1/type.pub.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_anduril_2fentitymanager_2fv1_2fontology_2epub_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_anduril_2fentitymanager_2fv1_2fontology_2epub_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_anduril_2fentitymanager_2fv1_2fontology_2epub_2eproto;
namespace anduril {
namespace entitymanager {
namespace v1 {
class MilView;
struct MilViewDefaultTypeInternal;
extern MilViewDefaultTypeInternal _MilView_default_instance_;
class Ontology;
struct OntologyDefaultTypeInternal;
extern OntologyDefaultTypeInternal _Ontology_default_instance_;
}  // namespace v1
}  // namespace entitymanager
}  // namespace anduril
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace anduril {
namespace entitymanager {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class Ontology final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:anduril.entitymanager.v1.Ontology) */ {
 public:
  inline Ontology() : Ontology(nullptr) {}
  ~Ontology() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ontology(::google::protobuf::internal::ConstantInitialized);

  inline Ontology(const Ontology& from)
      : Ontology(nullptr, from) {}
  Ontology(Ontology&& from) noexcept
    : Ontology() {
    *this = ::std::move(from);
  }

  inline Ontology& operator=(const Ontology& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ontology& operator=(Ontology&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ontology& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ontology* internal_default_instance() {
    return reinterpret_cast<const Ontology*>(
               &_Ontology_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Ontology& a, Ontology& b) {
    a.Swap(&b);
  }
  inline void Swap(Ontology* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ontology* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ontology* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ontology>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Ontology& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Ontology& from) {
    Ontology::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Ontology* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "anduril.entitymanager.v1.Ontology";
  }
  protected:
  explicit Ontology(::google::protobuf::Arena* arena);
  Ontology(::google::protobuf::Arena* arena, const Ontology& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptorsFieldNumber = 1,
    kPlatformTypeFieldNumber = 3,
    kSpecificTypeFieldNumber = 4,
    kKrnFieldNumber = 5,
    kTemplateFieldNumber = 2,
  };
  // repeated string descriptors = 1 [json_name = "descriptors", deprecated = true];
  [[deprecated]]  int descriptors_size() const;
  private:
  int _internal_descriptors_size() const;

  public:
  [[deprecated]]  void clear_descriptors() ;
  [[deprecated]] const std::string& descriptors(int index) const;
  [[deprecated]] std::string* mutable_descriptors(int index);
  [[deprecated]] void set_descriptors(int index, const std::string& value);
  [[deprecated]] void set_descriptors(int index, std::string&& value);
  [[deprecated]] void set_descriptors(int index, const char* value);
  [[deprecated]] void set_descriptors(int index, const char* value, std::size_t size);
  [[deprecated]] void set_descriptors(int index, absl::string_view value);
  [[deprecated]] std::string* add_descriptors();
  [[deprecated]] void add_descriptors(const std::string& value);
  [[deprecated]] void add_descriptors(std::string&& value);
  [[deprecated]] void add_descriptors(const char* value);
  [[deprecated]] void add_descriptors(const char* value, std::size_t size);
  [[deprecated]] void add_descriptors(absl::string_view value);
  [[deprecated]] const ::google::protobuf::RepeatedPtrField<std::string>& descriptors() const;
  [[deprecated]] ::google::protobuf::RepeatedPtrField<std::string>* mutable_descriptors();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_descriptors() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_descriptors();

  public:
  // string platform_type = 3 [json_name = "platformType", (.anduril.entitymanager.v1.overridable) = true];
  void clear_platform_type() ;
  const std::string& platform_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_platform_type(Arg_&& arg, Args_... args);
  std::string* mutable_platform_type();
  PROTOBUF_NODISCARD std::string* release_platform_type();
  void set_allocated_platform_type(std::string* value);

  private:
  const std::string& _internal_platform_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_platform_type(
      const std::string& value);
  std::string* _internal_mutable_platform_type();

  public:
  // string specific_type = 4 [json_name = "specificType", (.anduril.entitymanager.v1.overridable) = true];
  void clear_specific_type() ;
  const std::string& specific_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_specific_type(Arg_&& arg, Args_... args);
  std::string* mutable_specific_type();
  PROTOBUF_NODISCARD std::string* release_specific_type();
  void set_allocated_specific_type(std::string* value);

  private:
  const std::string& _internal_specific_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_specific_type(
      const std::string& value);
  std::string* _internal_mutable_specific_type();

  public:
  // string krn = 5 [json_name = "krn"];
  void clear_krn() ;
  const std::string& krn() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_krn(Arg_&& arg, Args_... args);
  std::string* mutable_krn();
  PROTOBUF_NODISCARD std::string* release_krn();
  void set_allocated_krn(std::string* value);

  private:
  const std::string& _internal_krn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_krn(
      const std::string& value);
  std::string* _internal_mutable_krn();

  public:
  // .anduril.entitymanager.v1.Template template = 2 [json_name = "template"];
  void clear_template_() ;
  ::anduril::entitymanager::v1::Template template_() const;
  void set_template_(::anduril::entitymanager::v1::Template value);

  private:
  ::anduril::entitymanager::v1::Template _internal_template_() const;
  void _internal_set_template_(::anduril::entitymanager::v1::Template value);

  public:
  // @@protoc_insertion_point(class_scope:anduril.entitymanager.v1.Ontology)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      82, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> descriptors_;
    ::google::protobuf::internal::ArenaStringPtr platform_type_;
    ::google::protobuf::internal::ArenaStringPtr specific_type_;
    ::google::protobuf::internal::ArenaStringPtr krn_;
    int template__;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fentitymanager_2fv1_2fontology_2epub_2eproto;
};// -------------------------------------------------------------------

class MilView final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:anduril.entitymanager.v1.MilView) */ {
 public:
  inline MilView() : MilView(nullptr) {}
  ~MilView() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MilView(::google::protobuf::internal::ConstantInitialized);

  inline MilView(const MilView& from)
      : MilView(nullptr, from) {}
  MilView(MilView&& from) noexcept
    : MilView() {
    *this = ::std::move(from);
  }

  inline MilView& operator=(const MilView& from) {
    CopyFrom(from);
    return *this;
  }
  inline MilView& operator=(MilView&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MilView& default_instance() {
    return *internal_default_instance();
  }
  static inline const MilView* internal_default_instance() {
    return reinterpret_cast<const MilView*>(
               &_MilView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MilView& a, MilView& b) {
    a.Swap(&b);
  }
  inline void Swap(MilView* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MilView* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MilView* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MilView>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MilView& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MilView& from) {
    MilView::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MilView* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "anduril.entitymanager.v1.MilView";
  }
  protected:
  explicit MilView(::google::protobuf::Arena* arena);
  MilView(::google::protobuf::Arena* arena, const MilView& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDispositionFieldNumber = 1,
    kEnvironmentFieldNumber = 2,
    kNationalityFieldNumber = 3,
  };
  // .anduril.ontology.v1.Disposition disposition = 1 [json_name = "disposition", (.anduril.entitymanager.v1.overridable) = true];
  void clear_disposition() ;
  ::anduril::ontology::v1::Disposition disposition() const;
  void set_disposition(::anduril::ontology::v1::Disposition value);

  private:
  ::anduril::ontology::v1::Disposition _internal_disposition() const;
  void _internal_set_disposition(::anduril::ontology::v1::Disposition value);

  public:
  // .anduril.ontology.v1.Environment environment = 2 [json_name = "environment", (.anduril.entitymanager.v1.overridable) = true];
  void clear_environment() ;
  ::anduril::ontology::v1::Environment environment() const;
  void set_environment(::anduril::ontology::v1::Environment value);

  private:
  ::anduril::ontology::v1::Environment _internal_environment() const;
  void _internal_set_environment(::anduril::ontology::v1::Environment value);

  public:
  // .anduril.ontology.v1.Nationality nationality = 3 [json_name = "nationality", (.anduril.entitymanager.v1.overridable) = true];
  void clear_nationality() ;
  ::anduril::ontology::v1::Nationality nationality() const;
  void set_nationality(::anduril::ontology::v1::Nationality value);

  private:
  ::anduril::ontology::v1::Nationality _internal_nationality() const;
  void _internal_set_nationality(::anduril::ontology::v1::Nationality value);

  public:
  // @@protoc_insertion_point(class_scope:anduril.entitymanager.v1.MilView)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    int disposition_;
    int environment_;
    int nationality_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fentitymanager_2fv1_2fontology_2epub_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MilView

// .anduril.ontology.v1.Disposition disposition = 1 [json_name = "disposition", (.anduril.entitymanager.v1.overridable) = true];
inline void MilView::clear_disposition() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.disposition_ = 0;
}
inline ::anduril::ontology::v1::Disposition MilView::disposition() const {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.MilView.disposition)
  return _internal_disposition();
}
inline void MilView::set_disposition(::anduril::ontology::v1::Disposition value) {
  _internal_set_disposition(value);
  // @@protoc_insertion_point(field_set:anduril.entitymanager.v1.MilView.disposition)
}
inline ::anduril::ontology::v1::Disposition MilView::_internal_disposition() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::anduril::ontology::v1::Disposition>(_impl_.disposition_);
}
inline void MilView::_internal_set_disposition(::anduril::ontology::v1::Disposition value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.disposition_ = value;
}

// .anduril.ontology.v1.Environment environment = 2 [json_name = "environment", (.anduril.entitymanager.v1.overridable) = true];
inline void MilView::clear_environment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.environment_ = 0;
}
inline ::anduril::ontology::v1::Environment MilView::environment() const {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.MilView.environment)
  return _internal_environment();
}
inline void MilView::set_environment(::anduril::ontology::v1::Environment value) {
  _internal_set_environment(value);
  // @@protoc_insertion_point(field_set:anduril.entitymanager.v1.MilView.environment)
}
inline ::anduril::ontology::v1::Environment MilView::_internal_environment() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::anduril::ontology::v1::Environment>(_impl_.environment_);
}
inline void MilView::_internal_set_environment(::anduril::ontology::v1::Environment value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.environment_ = value;
}

// .anduril.ontology.v1.Nationality nationality = 3 [json_name = "nationality", (.anduril.entitymanager.v1.overridable) = true];
inline void MilView::clear_nationality() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nationality_ = 0;
}
inline ::anduril::ontology::v1::Nationality MilView::nationality() const {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.MilView.nationality)
  return _internal_nationality();
}
inline void MilView::set_nationality(::anduril::ontology::v1::Nationality value) {
  _internal_set_nationality(value);
  // @@protoc_insertion_point(field_set:anduril.entitymanager.v1.MilView.nationality)
}
inline ::anduril::ontology::v1::Nationality MilView::_internal_nationality() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::anduril::ontology::v1::Nationality>(_impl_.nationality_);
}
inline void MilView::_internal_set_nationality(::anduril::ontology::v1::Nationality value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nationality_ = value;
}

// -------------------------------------------------------------------

// Ontology

// repeated string descriptors = 1 [json_name = "descriptors", deprecated = true];
inline int Ontology::_internal_descriptors_size() const {
  return _internal_descriptors().size();
}
inline int Ontology::descriptors_size() const {
  return _internal_descriptors_size();
}
inline void Ontology::clear_descriptors() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.descriptors_.Clear();
}
inline std::string* Ontology::add_descriptors()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_descriptors()->Add();
  // @@protoc_insertion_point(field_add_mutable:anduril.entitymanager.v1.Ontology.descriptors)
  return _s;
}
inline const std::string& Ontology::descriptors(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.Ontology.descriptors)
  return _internal_descriptors().Get(index);
}
inline std::string* Ontology::mutable_descriptors(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:anduril.entitymanager.v1.Ontology.descriptors)
  return _internal_mutable_descriptors()->Mutable(index);
}
inline void Ontology::set_descriptors(int index, const std::string& value) {
  _internal_mutable_descriptors()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:anduril.entitymanager.v1.Ontology.descriptors)
}
inline void Ontology::set_descriptors(int index, std::string&& value) {
  _internal_mutable_descriptors()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:anduril.entitymanager.v1.Ontology.descriptors)
}
inline void Ontology::set_descriptors(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_descriptors()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:anduril.entitymanager.v1.Ontology.descriptors)
}
inline void Ontology::set_descriptors(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_descriptors()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:anduril.entitymanager.v1.Ontology.descriptors)
}
inline void Ontology::set_descriptors(int index, absl::string_view value) {
  _internal_mutable_descriptors()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:anduril.entitymanager.v1.Ontology.descriptors)
}
inline void Ontology::add_descriptors(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_descriptors()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:anduril.entitymanager.v1.Ontology.descriptors)
}
inline void Ontology::add_descriptors(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_descriptors()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:anduril.entitymanager.v1.Ontology.descriptors)
}
inline void Ontology::add_descriptors(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_descriptors()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:anduril.entitymanager.v1.Ontology.descriptors)
}
inline void Ontology::add_descriptors(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_descriptors()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:anduril.entitymanager.v1.Ontology.descriptors)
}
inline void Ontology::add_descriptors(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_descriptors()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:anduril.entitymanager.v1.Ontology.descriptors)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Ontology::descriptors() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:anduril.entitymanager.v1.Ontology.descriptors)
  return _internal_descriptors();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Ontology::mutable_descriptors() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:anduril.entitymanager.v1.Ontology.descriptors)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_descriptors();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Ontology::_internal_descriptors() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.descriptors_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Ontology::_internal_mutable_descriptors() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.descriptors_;
}

// string krn = 5 [json_name = "krn"];
inline void Ontology::clear_krn() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.krn_.ClearToEmpty();
}
inline const std::string& Ontology::krn() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.Ontology.krn)
  return _internal_krn();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Ontology::set_krn(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.krn_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:anduril.entitymanager.v1.Ontology.krn)
}
inline std::string* Ontology::mutable_krn() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_krn();
  // @@protoc_insertion_point(field_mutable:anduril.entitymanager.v1.Ontology.krn)
  return _s;
}
inline const std::string& Ontology::_internal_krn() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.krn_.Get();
}
inline void Ontology::_internal_set_krn(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.krn_.Set(value, GetArena());
}
inline std::string* Ontology::_internal_mutable_krn() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.krn_.Mutable( GetArena());
}
inline std::string* Ontology::release_krn() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:anduril.entitymanager.v1.Ontology.krn)
  return _impl_.krn_.Release();
}
inline void Ontology::set_allocated_krn(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.krn_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.krn_.IsDefault()) {
          _impl_.krn_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:anduril.entitymanager.v1.Ontology.krn)
}

// string platform_type = 3 [json_name = "platformType", (.anduril.entitymanager.v1.overridable) = true];
inline void Ontology::clear_platform_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.platform_type_.ClearToEmpty();
}
inline const std::string& Ontology::platform_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.Ontology.platform_type)
  return _internal_platform_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Ontology::set_platform_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.platform_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:anduril.entitymanager.v1.Ontology.platform_type)
}
inline std::string* Ontology::mutable_platform_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_platform_type();
  // @@protoc_insertion_point(field_mutable:anduril.entitymanager.v1.Ontology.platform_type)
  return _s;
}
inline const std::string& Ontology::_internal_platform_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.platform_type_.Get();
}
inline void Ontology::_internal_set_platform_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.platform_type_.Set(value, GetArena());
}
inline std::string* Ontology::_internal_mutable_platform_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.platform_type_.Mutable( GetArena());
}
inline std::string* Ontology::release_platform_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:anduril.entitymanager.v1.Ontology.platform_type)
  return _impl_.platform_type_.Release();
}
inline void Ontology::set_allocated_platform_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.platform_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.platform_type_.IsDefault()) {
          _impl_.platform_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:anduril.entitymanager.v1.Ontology.platform_type)
}

// string specific_type = 4 [json_name = "specificType", (.anduril.entitymanager.v1.overridable) = true];
inline void Ontology::clear_specific_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.specific_type_.ClearToEmpty();
}
inline const std::string& Ontology::specific_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.Ontology.specific_type)
  return _internal_specific_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Ontology::set_specific_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.specific_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:anduril.entitymanager.v1.Ontology.specific_type)
}
inline std::string* Ontology::mutable_specific_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_specific_type();
  // @@protoc_insertion_point(field_mutable:anduril.entitymanager.v1.Ontology.specific_type)
  return _s;
}
inline const std::string& Ontology::_internal_specific_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.specific_type_.Get();
}
inline void Ontology::_internal_set_specific_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.specific_type_.Set(value, GetArena());
}
inline std::string* Ontology::_internal_mutable_specific_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.specific_type_.Mutable( GetArena());
}
inline std::string* Ontology::release_specific_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:anduril.entitymanager.v1.Ontology.specific_type)
  return _impl_.specific_type_.Release();
}
inline void Ontology::set_allocated_specific_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.specific_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.specific_type_.IsDefault()) {
          _impl_.specific_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:anduril.entitymanager.v1.Ontology.specific_type)
}

// .anduril.entitymanager.v1.Template template = 2 [json_name = "template"];
inline void Ontology::clear_template_() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.template__ = 0;
}
inline ::anduril::entitymanager::v1::Template Ontology::template_() const {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.Ontology.template)
  return _internal_template_();
}
inline void Ontology::set_template_(::anduril::entitymanager::v1::Template value) {
  _internal_set_template_(value);
  // @@protoc_insertion_point(field_set:anduril.entitymanager.v1.Ontology.template)
}
inline ::anduril::entitymanager::v1::Template Ontology::_internal_template_() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::anduril::entitymanager::v1::Template>(_impl_.template__);
}
inline void Ontology::_internal_set_template_(::anduril::entitymanager::v1::Template value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.template__ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace entitymanager
}  // namespace anduril


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_anduril_2fentitymanager_2fv1_2fontology_2epub_2eproto_2epb_2eh
