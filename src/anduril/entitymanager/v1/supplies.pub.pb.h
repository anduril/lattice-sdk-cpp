// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: anduril/entitymanager/v1/supplies.pub.proto
// Protobuf C++ Version: 5.29.0

#ifndef anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto_2epb_2eh
#define anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "anduril/entitymanager/v1/classification.pub.pb.h"
#include "anduril/entitymanager/v1/options.pub.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto;
namespace anduril {
namespace entitymanager {
namespace v1 {
class Fuel;
struct FuelDefaultTypeInternal;
extern FuelDefaultTypeInternal _Fuel_default_instance_;
class Supplies;
struct SuppliesDefaultTypeInternal;
extern SuppliesDefaultTypeInternal _Supplies_default_instance_;
}  // namespace v1
}  // namespace entitymanager
}  // namespace anduril
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace anduril {
namespace entitymanager {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class Fuel final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.entitymanager.v1.Fuel) */ {
 public:
  inline Fuel() : Fuel(nullptr) {}
  ~Fuel() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Fuel* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Fuel));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Fuel(
      ::google::protobuf::internal::ConstantInitialized);

  inline Fuel(const Fuel& from) : Fuel(nullptr, from) {}
  inline Fuel(Fuel&& from) noexcept
      : Fuel(nullptr, std::move(from)) {}
  inline Fuel& operator=(const Fuel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fuel& operator=(Fuel&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Fuel& default_instance() {
    return *internal_default_instance();
  }
  static inline const Fuel* internal_default_instance() {
    return reinterpret_cast<const Fuel*>(
        &_Fuel_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Fuel& a, Fuel& b) { a.Swap(&b); }
  inline void Swap(Fuel* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fuel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Fuel* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Fuel>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Fuel& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Fuel& from) { Fuel::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Fuel* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "anduril.entitymanager.v1.Fuel"; }

 protected:
  explicit Fuel(::google::protobuf::Arena* arena);
  Fuel(::google::protobuf::Arena* arena, const Fuel& from);
  Fuel(::google::protobuf::Arena* arena, Fuel&& from) noexcept
      : Fuel(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFuelIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kDataSourceFieldNumber = 8,
    kReportedDateFieldNumber = 3,
    kDataClassificationFieldNumber = 7,
    kAmountGallonsFieldNumber = 4,
    kMaxAuthorizedCapacityGallonsFieldNumber = 5,
    kOperationalRequirementGallonsFieldNumber = 6,
  };
  // string fuel_id = 1 [json_name = "fuelId"];
  void clear_fuel_id() ;
  const std::string& fuel_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fuel_id(Arg_&& arg, Args_... args);
  std::string* mutable_fuel_id();
  PROTOBUF_NODISCARD std::string* release_fuel_id();
  void set_allocated_fuel_id(std::string* value);

  private:
  const std::string& _internal_fuel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fuel_id(
      const std::string& value);
  std::string* _internal_mutable_fuel_id();

  public:
  // string name = 2 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string data_source = 8 [json_name = "dataSource"];
  void clear_data_source() ;
  const std::string& data_source() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data_source(Arg_&& arg, Args_... args);
  std::string* mutable_data_source();
  PROTOBUF_NODISCARD std::string* release_data_source();
  void set_allocated_data_source(std::string* value);

  private:
  const std::string& _internal_data_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_source(
      const std::string& value);
  std::string* _internal_mutable_data_source();

  public:
  // .google.protobuf.Timestamp reported_date = 3 [json_name = "reportedDate"];
  bool has_reported_date() const;
  void clear_reported_date() ;
  const ::google::protobuf::Timestamp& reported_date() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_reported_date();
  ::google::protobuf::Timestamp* mutable_reported_date();
  void set_allocated_reported_date(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_reported_date(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_reported_date();

  private:
  const ::google::protobuf::Timestamp& _internal_reported_date() const;
  ::google::protobuf::Timestamp* _internal_mutable_reported_date();

  public:
  // .anduril.entitymanager.v1.Classification data_classification = 7 [json_name = "dataClassification"];
  bool has_data_classification() const;
  void clear_data_classification() ;
  const ::anduril::entitymanager::v1::Classification& data_classification() const;
  PROTOBUF_NODISCARD ::anduril::entitymanager::v1::Classification* release_data_classification();
  ::anduril::entitymanager::v1::Classification* mutable_data_classification();
  void set_allocated_data_classification(::anduril::entitymanager::v1::Classification* value);
  void unsafe_arena_set_allocated_data_classification(::anduril::entitymanager::v1::Classification* value);
  ::anduril::entitymanager::v1::Classification* unsafe_arena_release_data_classification();

  private:
  const ::anduril::entitymanager::v1::Classification& _internal_data_classification() const;
  ::anduril::entitymanager::v1::Classification* _internal_mutable_data_classification();

  public:
  // uint32 amount_gallons = 4 [json_name = "amountGallons"];
  void clear_amount_gallons() ;
  ::uint32_t amount_gallons() const;
  void set_amount_gallons(::uint32_t value);

  private:
  ::uint32_t _internal_amount_gallons() const;
  void _internal_set_amount_gallons(::uint32_t value);

  public:
  // uint32 max_authorized_capacity_gallons = 5 [json_name = "maxAuthorizedCapacityGallons"];
  void clear_max_authorized_capacity_gallons() ;
  ::uint32_t max_authorized_capacity_gallons() const;
  void set_max_authorized_capacity_gallons(::uint32_t value);

  private:
  ::uint32_t _internal_max_authorized_capacity_gallons() const;
  void _internal_set_max_authorized_capacity_gallons(::uint32_t value);

  public:
  // uint32 operational_requirement_gallons = 6 [json_name = "operationalRequirementGallons"];
  void clear_operational_requirement_gallons() ;
  ::uint32_t operational_requirement_gallons() const;
  void set_operational_requirement_gallons(::uint32_t value);

  private:
  ::uint32_t _internal_operational_requirement_gallons() const;
  void _internal_set_operational_requirement_gallons(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:anduril.entitymanager.v1.Fuel)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 2,
      68, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Fuel& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr fuel_id_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr data_source_;
    ::google::protobuf::Timestamp* reported_date_;
    ::anduril::entitymanager::v1::Classification* data_classification_;
    ::uint32_t amount_gallons_;
    ::uint32_t max_authorized_capacity_gallons_;
    ::uint32_t operational_requirement_gallons_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto;
};
// -------------------------------------------------------------------

class Supplies final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.entitymanager.v1.Supplies) */ {
 public:
  inline Supplies() : Supplies(nullptr) {}
  ~Supplies() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Supplies* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Supplies));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Supplies(
      ::google::protobuf::internal::ConstantInitialized);

  inline Supplies(const Supplies& from) : Supplies(nullptr, from) {}
  inline Supplies(Supplies&& from) noexcept
      : Supplies(nullptr, std::move(from)) {}
  inline Supplies& operator=(const Supplies& from) {
    CopyFrom(from);
    return *this;
  }
  inline Supplies& operator=(Supplies&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Supplies& default_instance() {
    return *internal_default_instance();
  }
  static inline const Supplies* internal_default_instance() {
    return reinterpret_cast<const Supplies*>(
        &_Supplies_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Supplies& a, Supplies& b) { a.Swap(&b); }
  inline void Swap(Supplies* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Supplies* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Supplies* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Supplies>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Supplies& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Supplies& from) { Supplies::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Supplies* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "anduril.entitymanager.v1.Supplies"; }

 protected:
  explicit Supplies(::google::protobuf::Arena* arena);
  Supplies(::google::protobuf::Arena* arena, const Supplies& from);
  Supplies(::google::protobuf::Arena* arena, Supplies&& from) noexcept
      : Supplies(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFuelFieldNumber = 2,
  };
  // repeated .anduril.entitymanager.v1.Fuel fuel = 2 [json_name = "fuel", (.anduril.entitymanager.v1.overridable) = true];
  int fuel_size() const;
  private:
  int _internal_fuel_size() const;

  public:
  void clear_fuel() ;
  ::anduril::entitymanager::v1::Fuel* mutable_fuel(int index);
  ::google::protobuf::RepeatedPtrField<::anduril::entitymanager::v1::Fuel>* mutable_fuel();

  private:
  const ::google::protobuf::RepeatedPtrField<::anduril::entitymanager::v1::Fuel>& _internal_fuel() const;
  ::google::protobuf::RepeatedPtrField<::anduril::entitymanager::v1::Fuel>* _internal_mutable_fuel();
  public:
  const ::anduril::entitymanager::v1::Fuel& fuel(int index) const;
  ::anduril::entitymanager::v1::Fuel* add_fuel();
  const ::google::protobuf::RepeatedPtrField<::anduril::entitymanager::v1::Fuel>& fuel() const;
  // @@protoc_insertion_point(class_scope:anduril.entitymanager.v1.Supplies)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Supplies& from_msg);
    ::google::protobuf::RepeatedPtrField< ::anduril::entitymanager::v1::Fuel > fuel_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Supplies

// repeated .anduril.entitymanager.v1.Fuel fuel = 2 [json_name = "fuel", (.anduril.entitymanager.v1.overridable) = true];
inline int Supplies::_internal_fuel_size() const {
  return _internal_fuel().size();
}
inline int Supplies::fuel_size() const {
  return _internal_fuel_size();
}
inline void Supplies::clear_fuel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fuel_.Clear();
}
inline ::anduril::entitymanager::v1::Fuel* Supplies::mutable_fuel(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:anduril.entitymanager.v1.Supplies.fuel)
  return _internal_mutable_fuel()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::anduril::entitymanager::v1::Fuel>* Supplies::mutable_fuel()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:anduril.entitymanager.v1.Supplies.fuel)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_fuel();
}
inline const ::anduril::entitymanager::v1::Fuel& Supplies::fuel(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.Supplies.fuel)
  return _internal_fuel().Get(index);
}
inline ::anduril::entitymanager::v1::Fuel* Supplies::add_fuel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::anduril::entitymanager::v1::Fuel* _add = _internal_mutable_fuel()->Add();
  // @@protoc_insertion_point(field_add:anduril.entitymanager.v1.Supplies.fuel)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::anduril::entitymanager::v1::Fuel>& Supplies::fuel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:anduril.entitymanager.v1.Supplies.fuel)
  return _internal_fuel();
}
inline const ::google::protobuf::RepeatedPtrField<::anduril::entitymanager::v1::Fuel>&
Supplies::_internal_fuel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fuel_;
}
inline ::google::protobuf::RepeatedPtrField<::anduril::entitymanager::v1::Fuel>*
Supplies::_internal_mutable_fuel() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.fuel_;
}

// -------------------------------------------------------------------

// Fuel

// string fuel_id = 1 [json_name = "fuelId"];
inline void Fuel::clear_fuel_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fuel_id_.ClearToEmpty();
}
inline const std::string& Fuel::fuel_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.Fuel.fuel_id)
  return _internal_fuel_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Fuel::set_fuel_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fuel_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:anduril.entitymanager.v1.Fuel.fuel_id)
}
inline std::string* Fuel::mutable_fuel_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_fuel_id();
  // @@protoc_insertion_point(field_mutable:anduril.entitymanager.v1.Fuel.fuel_id)
  return _s;
}
inline const std::string& Fuel::_internal_fuel_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fuel_id_.Get();
}
inline void Fuel::_internal_set_fuel_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fuel_id_.Set(value, GetArena());
}
inline std::string* Fuel::_internal_mutable_fuel_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.fuel_id_.Mutable( GetArena());
}
inline std::string* Fuel::release_fuel_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.entitymanager.v1.Fuel.fuel_id)
  return _impl_.fuel_id_.Release();
}
inline void Fuel::set_allocated_fuel_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fuel_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.fuel_id_.IsDefault()) {
    _impl_.fuel_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:anduril.entitymanager.v1.Fuel.fuel_id)
}

// string name = 2 [json_name = "name"];
inline void Fuel::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Fuel::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.Fuel.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Fuel::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:anduril.entitymanager.v1.Fuel.name)
}
inline std::string* Fuel::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:anduril.entitymanager.v1.Fuel.name)
  return _s;
}
inline const std::string& Fuel::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Fuel::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Fuel::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Fuel::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.entitymanager.v1.Fuel.name)
  return _impl_.name_.Release();
}
inline void Fuel::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:anduril.entitymanager.v1.Fuel.name)
}

// .google.protobuf.Timestamp reported_date = 3 [json_name = "reportedDate"];
inline bool Fuel::has_reported_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reported_date_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Fuel::_internal_reported_date() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.reported_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Fuel::reported_date() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.Fuel.reported_date)
  return _internal_reported_date();
}
inline void Fuel::unsafe_arena_set_allocated_reported_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.reported_date_);
  }
  _impl_.reported_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.entitymanager.v1.Fuel.reported_date)
}
inline ::google::protobuf::Timestamp* Fuel::release_reported_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.reported_date_;
  _impl_.reported_date_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* Fuel::unsafe_arena_release_reported_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.entitymanager.v1.Fuel.reported_date)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.reported_date_;
  _impl_.reported_date_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Fuel::_internal_mutable_reported_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.reported_date_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.reported_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.reported_date_;
}
inline ::google::protobuf::Timestamp* Fuel::mutable_reported_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_reported_date();
  // @@protoc_insertion_point(field_mutable:anduril.entitymanager.v1.Fuel.reported_date)
  return _msg;
}
inline void Fuel::set_allocated_reported_date(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.reported_date_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.reported_date_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.entitymanager.v1.Fuel.reported_date)
}

// uint32 amount_gallons = 4 [json_name = "amountGallons"];
inline void Fuel::clear_amount_gallons() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_gallons_ = 0u;
}
inline ::uint32_t Fuel::amount_gallons() const {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.Fuel.amount_gallons)
  return _internal_amount_gallons();
}
inline void Fuel::set_amount_gallons(::uint32_t value) {
  _internal_set_amount_gallons(value);
  // @@protoc_insertion_point(field_set:anduril.entitymanager.v1.Fuel.amount_gallons)
}
inline ::uint32_t Fuel::_internal_amount_gallons() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amount_gallons_;
}
inline void Fuel::_internal_set_amount_gallons(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_gallons_ = value;
}

// uint32 max_authorized_capacity_gallons = 5 [json_name = "maxAuthorizedCapacityGallons"];
inline void Fuel::clear_max_authorized_capacity_gallons() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_authorized_capacity_gallons_ = 0u;
}
inline ::uint32_t Fuel::max_authorized_capacity_gallons() const {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.Fuel.max_authorized_capacity_gallons)
  return _internal_max_authorized_capacity_gallons();
}
inline void Fuel::set_max_authorized_capacity_gallons(::uint32_t value) {
  _internal_set_max_authorized_capacity_gallons(value);
  // @@protoc_insertion_point(field_set:anduril.entitymanager.v1.Fuel.max_authorized_capacity_gallons)
}
inline ::uint32_t Fuel::_internal_max_authorized_capacity_gallons() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_authorized_capacity_gallons_;
}
inline void Fuel::_internal_set_max_authorized_capacity_gallons(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_authorized_capacity_gallons_ = value;
}

// uint32 operational_requirement_gallons = 6 [json_name = "operationalRequirementGallons"];
inline void Fuel::clear_operational_requirement_gallons() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operational_requirement_gallons_ = 0u;
}
inline ::uint32_t Fuel::operational_requirement_gallons() const {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.Fuel.operational_requirement_gallons)
  return _internal_operational_requirement_gallons();
}
inline void Fuel::set_operational_requirement_gallons(::uint32_t value) {
  _internal_set_operational_requirement_gallons(value);
  // @@protoc_insertion_point(field_set:anduril.entitymanager.v1.Fuel.operational_requirement_gallons)
}
inline ::uint32_t Fuel::_internal_operational_requirement_gallons() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.operational_requirement_gallons_;
}
inline void Fuel::_internal_set_operational_requirement_gallons(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operational_requirement_gallons_ = value;
}

// .anduril.entitymanager.v1.Classification data_classification = 7 [json_name = "dataClassification"];
inline bool Fuel::has_data_classification() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_classification_ != nullptr);
  return value;
}
inline const ::anduril::entitymanager::v1::Classification& Fuel::_internal_data_classification() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::anduril::entitymanager::v1::Classification* p = _impl_.data_classification_;
  return p != nullptr ? *p : reinterpret_cast<const ::anduril::entitymanager::v1::Classification&>(::anduril::entitymanager::v1::_Classification_default_instance_);
}
inline const ::anduril::entitymanager::v1::Classification& Fuel::data_classification() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.Fuel.data_classification)
  return _internal_data_classification();
}
inline void Fuel::unsafe_arena_set_allocated_data_classification(::anduril::entitymanager::v1::Classification* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_classification_);
  }
  _impl_.data_classification_ = reinterpret_cast<::anduril::entitymanager::v1::Classification*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.entitymanager.v1.Fuel.data_classification)
}
inline ::anduril::entitymanager::v1::Classification* Fuel::release_data_classification() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::anduril::entitymanager::v1::Classification* released = _impl_.data_classification_;
  _impl_.data_classification_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::anduril::entitymanager::v1::Classification* Fuel::unsafe_arena_release_data_classification() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.entitymanager.v1.Fuel.data_classification)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::anduril::entitymanager::v1::Classification* temp = _impl_.data_classification_;
  _impl_.data_classification_ = nullptr;
  return temp;
}
inline ::anduril::entitymanager::v1::Classification* Fuel::_internal_mutable_data_classification() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.data_classification_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::anduril::entitymanager::v1::Classification>(GetArena());
    _impl_.data_classification_ = reinterpret_cast<::anduril::entitymanager::v1::Classification*>(p);
  }
  return _impl_.data_classification_;
}
inline ::anduril::entitymanager::v1::Classification* Fuel::mutable_data_classification() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::anduril::entitymanager::v1::Classification* _msg = _internal_mutable_data_classification();
  // @@protoc_insertion_point(field_mutable:anduril.entitymanager.v1.Fuel.data_classification)
  return _msg;
}
inline void Fuel::set_allocated_data_classification(::anduril::entitymanager::v1::Classification* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_classification_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.data_classification_ = reinterpret_cast<::anduril::entitymanager::v1::Classification*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.entitymanager.v1.Fuel.data_classification)
}

// string data_source = 8 [json_name = "dataSource"];
inline void Fuel::clear_data_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_source_.ClearToEmpty();
}
inline const std::string& Fuel::data_source() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.Fuel.data_source)
  return _internal_data_source();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Fuel::set_data_source(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_source_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:anduril.entitymanager.v1.Fuel.data_source)
}
inline std::string* Fuel::mutable_data_source() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data_source();
  // @@protoc_insertion_point(field_mutable:anduril.entitymanager.v1.Fuel.data_source)
  return _s;
}
inline const std::string& Fuel::_internal_data_source() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_source_.Get();
}
inline void Fuel::_internal_set_data_source(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_source_.Set(value, GetArena());
}
inline std::string* Fuel::_internal_mutable_data_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_source_.Mutable( GetArena());
}
inline std::string* Fuel::release_data_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.entitymanager.v1.Fuel.data_source)
  return _impl_.data_source_.Release();
}
inline void Fuel::set_allocated_data_source(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_source_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_source_.IsDefault()) {
    _impl_.data_source_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:anduril.entitymanager.v1.Fuel.data_source)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace entitymanager
}  // namespace anduril


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // anduril_2fentitymanager_2fv1_2fsupplies_2epub_2eproto_2epb_2eh
