// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: anduril/entitymanager/v1/power.pub.proto

#include "anduril/entitymanager/v1/power.pub.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace anduril {
namespace entitymanager {
namespace v1 {

inline constexpr PowerLevel::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        voltage_{nullptr},
        current_amps_{nullptr},
        run_time_to_empty_mins_{nullptr},
        consumption_rate_l_per_s_{nullptr},
        capacity_{0},
        remaining_{0},
        percent_remaining_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PowerLevel::PowerLevel(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PowerLevelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PowerLevelDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PowerLevelDefaultTypeInternal() {}
  union {
    PowerLevel _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PowerLevelDefaultTypeInternal _PowerLevel_default_instance_;

inline constexpr PowerSource::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        messages_{},
        power_level_{nullptr},
        offloadable_{nullptr},
        power_status_{static_cast< ::anduril::entitymanager::v1::PowerStatus >(0)},
        power_type_{static_cast< ::anduril::entitymanager::v1::PowerType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR PowerSource::PowerSource(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PowerSourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PowerSourceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PowerSourceDefaultTypeInternal() {}
  union {
    PowerSource _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PowerSourceDefaultTypeInternal _PowerSource_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR PowerState_SourceIdToStateEntry_DoNotUse::PowerState_SourceIdToStateEntry_DoNotUse(::_pbi::ConstantInitialized) {}
struct PowerState_SourceIdToStateEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PowerState_SourceIdToStateEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PowerState_SourceIdToStateEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PowerState_SourceIdToStateEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PowerState_SourceIdToStateEntry_DoNotUseDefaultTypeInternal _PowerState_SourceIdToStateEntry_DoNotUse_default_instance_;

inline constexpr PowerState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        messages_{},
        source_id_to_state_{},
        power_level_{nullptr},
        power_status_{static_cast< ::anduril::entitymanager::v1::PowerStatus >(0)},
        power_type_{static_cast< ::anduril::entitymanager::v1::PowerType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR PowerState::PowerState(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PowerStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PowerStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PowerStateDefaultTypeInternal() {}
  union {
    PowerState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PowerStateDefaultTypeInternal _PowerState_default_instance_;
}  // namespace v1
}  // namespace entitymanager
}  // namespace anduril
static ::_pb::Metadata file_level_metadata_anduril_2fentitymanager_2fv1_2fpower_2epub_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_anduril_2fentitymanager_2fv1_2fpower_2epub_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_anduril_2fentitymanager_2fv1_2fpower_2epub_2eproto = nullptr;
const ::uint32_t TableStruct_anduril_2fentitymanager_2fv1_2fpower_2epub_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::PowerState_SourceIdToStateEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::PowerState_SourceIdToStateEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::PowerState_SourceIdToStateEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::PowerState_SourceIdToStateEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::PowerState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::PowerState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::PowerState, _impl_.source_id_to_state_),
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::PowerState, _impl_.power_status_),
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::PowerState, _impl_.power_type_),
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::PowerState, _impl_.power_level_),
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::PowerState, _impl_.messages_),
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::PowerSource, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::PowerSource, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::PowerSource, _impl_.power_status_),
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::PowerSource, _impl_.power_type_),
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::PowerSource, _impl_.power_level_),
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::PowerSource, _impl_.messages_),
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::PowerSource, _impl_.offloadable_),
    ~0u,
    ~0u,
    0,
    ~0u,
    1,
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::PowerLevel, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::PowerLevel, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::PowerLevel, _impl_.capacity_),
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::PowerLevel, _impl_.remaining_),
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::PowerLevel, _impl_.percent_remaining_),
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::PowerLevel, _impl_.voltage_),
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::PowerLevel, _impl_.current_amps_),
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::PowerLevel, _impl_.run_time_to_empty_mins_),
    PROTOBUF_FIELD_OFFSET(::anduril::entitymanager::v1::PowerLevel, _impl_.consumption_rate_l_per_s_),
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    2,
    3,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::anduril::entitymanager::v1::PowerState_SourceIdToStateEntry_DoNotUse)},
        {12, 25, -1, sizeof(::anduril::entitymanager::v1::PowerState)},
        {30, 43, -1, sizeof(::anduril::entitymanager::v1::PowerSource)},
        {48, 63, -1, sizeof(::anduril::entitymanager::v1::PowerLevel)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::anduril::entitymanager::v1::_PowerState_SourceIdToStateEntry_DoNotUse_default_instance_._instance,
    &::anduril::entitymanager::v1::_PowerState_default_instance_._instance,
    &::anduril::entitymanager::v1::_PowerSource_default_instance_._instance,
    &::anduril::entitymanager::v1::_PowerLevel_default_instance_._instance,
};
const char descriptor_table_protodef_anduril_2fentitymanager_2fv1_2fpower_2epub_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n(anduril/entitymanager/v1/power.pub.pro"
    "to\022\030anduril.entitymanager.v1\032\036google/pro"
    "tobuf/wrappers.proto\"\340\003\n\nPowerState\022f\n\022s"
    "ource_id_to_state\030\005 \003(\01329.anduril.entity"
    "manager.v1.PowerState.SourceIdToStateEnt"
    "ryR\017sourceIdToState\022L\n\014power_status\030\001 \001("
    "\0162%.anduril.entitymanager.v1.PowerStatus"
    "B\002\030\001R\013powerStatus\022F\n\npower_type\030\002 \001(\0162#."
    "anduril.entitymanager.v1.PowerTypeB\002\030\001R\t"
    "powerType\022I\n\013power_level\030\003 \001(\0132$.anduril"
    ".entitymanager.v1.PowerLevelB\002\030\001R\npowerL"
    "evel\022\036\n\010messages\030\004 \003(\tB\002\030\001R\010messages\032i\n\024"
    "SourceIdToStateEntry\022\020\n\003key\030\001 \001(\tR\003key\022;"
    "\n\005value\030\002 \001(\0132%.anduril.entitymanager.v1"
    ".PowerSourceR\005value:\0028\001\"\274\002\n\013PowerSource\022"
    "H\n\014power_status\030\001 \001(\0162%.anduril.entityma"
    "nager.v1.PowerStatusR\013powerStatus\022B\n\npow"
    "er_type\030\002 \001(\0162#.anduril.entitymanager.v1"
    ".PowerTypeR\tpowerType\022E\n\013power_level\030\003 \001"
    "(\0132$.anduril.entitymanager.v1.PowerLevel"
    "R\npowerLevel\022\032\n\010messages\030\004 \003(\tR\010messages"
    "\022<\n\013offloadable\030\005 \001(\0132\032.google.protobuf."
    "BoolValueR\013offloadable\"\224\003\n\nPowerLevel\022\032\n"
    "\010capacity\030\001 \001(\002R\010capacity\022\034\n\tremaining\030\002"
    " \001(\002R\tremaining\022+\n\021percent_remaining\030\003 \001"
    "(\002R\020percentRemaining\0226\n\007voltage\030\004 \001(\0132\034."
    "google.protobuf.DoubleValueR\007voltage\022\?\n\014"
    "current_amps\030\005 \001(\0132\034.google.protobuf.Dou"
    "bleValueR\013currentAmps\022P\n\026run_time_to_emp"
    "ty_mins\030\006 \001(\0132\034.google.protobuf.DoubleVa"
    "lueR\022runTimeToEmptyMins\022T\n\030consumption_r"
    "ate_l_per_s\030\007 \001(\0132\034.google.protobuf.Doub"
    "leValueR\024consumptionRateLPerS*\256\001\n\013PowerS"
    "tatus\022\030\n\024POWER_STATUS_INVALID\020\000\022\030\n\024POWER"
    "_STATUS_UNKNOWN\020\001\022\034\n\030POWER_STATUS_NOT_PR"
    "ESENT\020\002\022\032\n\026POWER_STATUS_OPERATING\020\003\022\031\n\025P"
    "OWER_STATUS_DISABLED\020\004\022\026\n\022POWER_STATUS_E"
    "RROR\020\005*g\n\tPowerType\022\026\n\022POWER_TYPE_INVALI"
    "D\020\000\022\026\n\022POWER_TYPE_UNKNOWN\020\001\022\022\n\016POWER_TYP"
    "E_GAS\020\002\022\026\n\022POWER_TYPE_BATTERY\020\003B\376\001\n\034com."
    "anduril.entitymanager.v1B\rPowerPubProtoP"
    "\001ZMghe.anduril.dev/anduril/andurilapis-g"
    "o/anduril/entitymanager/v1;entitymanager"
    "\242\002\003AEX\252\002\030Anduril.Entitymanager.V1\312\002\030Andu"
    "ril\\Entitymanager\\V1\342\002$Anduril\\Entityman"
    "ager\\V1\\GPBMetadata\352\002\032Anduril::Entityman"
    "ager::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_anduril_2fentitymanager_2fv1_2fpower_2epub_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::absl::once_flag descriptor_table_anduril_2fentitymanager_2fv1_2fpower_2epub_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_anduril_2fentitymanager_2fv1_2fpower_2epub_2eproto = {
    false,
    false,
    1856,
    descriptor_table_protodef_anduril_2fentitymanager_2fv1_2fpower_2epub_2eproto,
    "anduril/entitymanager/v1/power.pub.proto",
    &descriptor_table_anduril_2fentitymanager_2fv1_2fpower_2epub_2eproto_once,
    descriptor_table_anduril_2fentitymanager_2fv1_2fpower_2epub_2eproto_deps,
    1,
    4,
    schemas,
    file_default_instances,
    TableStruct_anduril_2fentitymanager_2fv1_2fpower_2epub_2eproto::offsets,
    file_level_metadata_anduril_2fentitymanager_2fv1_2fpower_2epub_2eproto,
    file_level_enum_descriptors_anduril_2fentitymanager_2fv1_2fpower_2epub_2eproto,
    file_level_service_descriptors_anduril_2fentitymanager_2fv1_2fpower_2epub_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_anduril_2fentitymanager_2fv1_2fpower_2epub_2eproto_getter() {
  return &descriptor_table_anduril_2fentitymanager_2fv1_2fpower_2epub_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_anduril_2fentitymanager_2fv1_2fpower_2epub_2eproto(&descriptor_table_anduril_2fentitymanager_2fv1_2fpower_2epub_2eproto);
namespace anduril {
namespace entitymanager {
namespace v1 {
const ::google::protobuf::EnumDescriptor* PowerStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_anduril_2fentitymanager_2fv1_2fpower_2epub_2eproto);
  return file_level_enum_descriptors_anduril_2fentitymanager_2fv1_2fpower_2epub_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t PowerStatus_internal_data_[] = {
    393216u, 0u, };
bool PowerStatus_IsValid(int value) {
  return 0 <= value && value <= 5;
}
const ::google::protobuf::EnumDescriptor* PowerType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_anduril_2fentitymanager_2fv1_2fpower_2epub_2eproto);
  return file_level_enum_descriptors_anduril_2fentitymanager_2fv1_2fpower_2epub_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t PowerType_internal_data_[] = {
    262144u, 0u, };
bool PowerType_IsValid(int value) {
  return 0 <= value && value <= 3;
}
// ===================================================================

PowerState_SourceIdToStateEntry_DoNotUse::PowerState_SourceIdToStateEntry_DoNotUse() {}
PowerState_SourceIdToStateEntry_DoNotUse::PowerState_SourceIdToStateEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
::google::protobuf::Metadata PowerState_SourceIdToStateEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_anduril_2fentitymanager_2fv1_2fpower_2epub_2eproto_getter, &descriptor_table_anduril_2fentitymanager_2fv1_2fpower_2epub_2eproto_once,
      file_level_metadata_anduril_2fentitymanager_2fv1_2fpower_2epub_2eproto[0]);
}
// ===================================================================

class PowerState::_Internal {
 public:
  using HasBits = decltype(std::declval<PowerState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PowerState, _impl_._has_bits_);
  static const ::anduril::entitymanager::v1::PowerLevel& power_level(const PowerState* msg);
  static void set_has_power_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::anduril::entitymanager::v1::PowerLevel& PowerState::_Internal::power_level(const PowerState* msg) {
  return *msg->_impl_.power_level_;
}
PowerState::PowerState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anduril.entitymanager.v1.PowerState)
}
inline PROTOBUF_NDEBUG_INLINE PowerState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        messages_{visibility, arena, from.messages_},
        source_id_to_state_{visibility, arena, from.source_id_to_state_} {}

PowerState::PowerState(
    ::google::protobuf::Arena* arena,
    const PowerState& from)
    : ::google::protobuf::Message(arena) {
  PowerState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.power_level_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::anduril::entitymanager::v1::PowerLevel>(arena, *from._impl_.power_level_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, power_status_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, power_status_),
           offsetof(Impl_, power_type_) -
               offsetof(Impl_, power_status_) +
               sizeof(Impl_::power_type_));

  // @@protoc_insertion_point(copy_constructor:anduril.entitymanager.v1.PowerState)
}
inline PROTOBUF_NDEBUG_INLINE PowerState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        messages_{visibility, arena},
        source_id_to_state_{visibility, arena} {}

inline void PowerState::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, power_level_),
           0,
           offsetof(Impl_, power_type_) -
               offsetof(Impl_, power_level_) +
               sizeof(Impl_::power_type_));
}
PowerState::~PowerState() {
  // @@protoc_insertion_point(destructor:anduril.entitymanager.v1.PowerState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PowerState::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.power_level_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void PowerState::Clear() {
// @@protoc_insertion_point(message_clear_start:anduril.entitymanager.v1.PowerState)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messages_.Clear();
  _impl_.source_id_to_state_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.power_level_ != nullptr);
    _impl_.power_level_->Clear();
  }
  ::memset(&_impl_.power_status_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.power_type_) -
      reinterpret_cast<char*>(&_impl_.power_status_)) + sizeof(_impl_.power_type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PowerState::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 5, 3, 70, 2> PowerState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PowerState, _impl_._has_bits_),
    0, // no _extensions_
    5, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PowerState_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated string messages = 4 [json_name = "messages", deprecated = true];
    {::_pbi::TcParser::FastUR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(PowerState, _impl_.messages_)}},
    // .anduril.entitymanager.v1.PowerStatus power_status = 1 [json_name = "powerStatus", deprecated = true];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PowerState, _impl_.power_status_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PowerState, _impl_.power_status_)}},
    // .anduril.entitymanager.v1.PowerType power_type = 2 [json_name = "powerType", deprecated = true];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PowerState, _impl_.power_type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(PowerState, _impl_.power_type_)}},
    // .anduril.entitymanager.v1.PowerLevel power_level = 3 [json_name = "powerLevel", deprecated = true];
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(PowerState, _impl_.power_level_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .anduril.entitymanager.v1.PowerStatus power_status = 1 [json_name = "powerStatus", deprecated = true];
    {PROTOBUF_FIELD_OFFSET(PowerState, _impl_.power_status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .anduril.entitymanager.v1.PowerType power_type = 2 [json_name = "powerType", deprecated = true];
    {PROTOBUF_FIELD_OFFSET(PowerState, _impl_.power_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .anduril.entitymanager.v1.PowerLevel power_level = 3 [json_name = "powerLevel", deprecated = true];
    {PROTOBUF_FIELD_OFFSET(PowerState, _impl_.power_level_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string messages = 4 [json_name = "messages", deprecated = true];
    {PROTOBUF_FIELD_OFFSET(PowerState, _impl_.messages_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // map<string, .anduril.entitymanager.v1.PowerSource> source_id_to_state = 5 [json_name = "sourceIdToState"];
    {PROTOBUF_FIELD_OFFSET(PowerState, _impl_.source_id_to_state_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetTable<::anduril::entitymanager::v1::PowerLevel>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(PowerState()._impl_.source_id_to_state_)>(
        1, 0, 0, 9,
        11)},
    {::_pbi::TcParser::CreateInArenaStorageCb<::anduril::entitymanager::v1::PowerSource>},
  }}, {{
    "\43\0\0\0\10\22\0\0"
    "anduril.entitymanager.v1.PowerState"
    "messages"
    "source_id_to_state"
  }},
};

::uint8_t* PowerState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anduril.entitymanager.v1.PowerState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .anduril.entitymanager.v1.PowerStatus power_status = 1 [json_name = "powerStatus", deprecated = true];
  if (this->_internal_power_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_power_status(), target);
  }

  // .anduril.entitymanager.v1.PowerType power_type = 2 [json_name = "powerType", deprecated = true];
  if (this->_internal_power_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_power_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .anduril.entitymanager.v1.PowerLevel power_level = 3 [json_name = "powerLevel", deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::power_level(this),
        _Internal::power_level(this).GetCachedSize(), target, stream);
  }

  // repeated string messages = 4 [json_name = "messages", deprecated = true];
  for (int i = 0, n = this->_internal_messages_size(); i < n; ++i) {
    const auto& s = this->_internal_messages().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "anduril.entitymanager.v1.PowerState.messages");
    target = stream->WriteString(4, s, target);
  }

  // map<string, .anduril.entitymanager.v1.PowerSource> source_id_to_state = 5 [json_name = "sourceIdToState"];
  if (!_internal_source_id_to_state().empty()) {
    using MapType = ::google::protobuf::Map<std::string, ::anduril::entitymanager::v1::PowerSource>;
    using WireHelper = _pbi::MapEntryFuncs<std::string, ::anduril::entitymanager::v1::PowerSource,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_MESSAGE>;
    const auto& field = _internal_source_id_to_state();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            5, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "anduril.entitymanager.v1.PowerState.source_id_to_state");
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            5, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "anduril.entitymanager.v1.PowerState.source_id_to_state");
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anduril.entitymanager.v1.PowerState)
  return target;
}

::size_t PowerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anduril.entitymanager.v1.PowerState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string messages = 4 [json_name = "messages", deprecated = true];
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_messages().size());
  for (int i = 0, n = _internal_messages().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_messages().Get(i));
  }
  // map<string, .anduril.entitymanager.v1.PowerSource> source_id_to_state = 5 [json_name = "sourceIdToState"];
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_source_id_to_state_size());
  for (const auto& entry : _internal_source_id_to_state()) {
    total_size += _pbi::MapEntryFuncs<std::string, ::anduril::entitymanager::v1::PowerSource,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_MESSAGE>::ByteSizeLong(entry.first, entry.second);
  }
  // .anduril.entitymanager.v1.PowerLevel power_level = 3 [json_name = "powerLevel", deprecated = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.power_level_);
  }

  // .anduril.entitymanager.v1.PowerStatus power_status = 1 [json_name = "powerStatus", deprecated = true];
  if (this->_internal_power_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_power_status());
  }

  // .anduril.entitymanager.v1.PowerType power_type = 2 [json_name = "powerType", deprecated = true];
  if (this->_internal_power_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_power_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PowerState::_class_data_ = {
    PowerState::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* PowerState::GetClassData() const {
  return &_class_data_;
}

void PowerState::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PowerState*>(&to_msg);
  auto& from = static_cast<const PowerState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anduril.entitymanager.v1.PowerState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_messages()->MergeFrom(from._internal_messages());
  _this->_impl_.source_id_to_state_.MergeFrom(from._impl_.source_id_to_state_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_power_level()->::anduril::entitymanager::v1::PowerLevel::MergeFrom(
        from._internal_power_level());
  }
  if (from._internal_power_status() != 0) {
    _this->_internal_set_power_status(from._internal_power_status());
  }
  if (from._internal_power_type() != 0) {
    _this->_internal_set_power_type(from._internal_power_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PowerState::CopyFrom(const PowerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anduril.entitymanager.v1.PowerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PowerState::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* PowerState::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void PowerState::InternalSwap(PowerState* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.messages_.InternalSwap(&other->_impl_.messages_);
  _impl_.source_id_to_state_.InternalSwap(&other->_impl_.source_id_to_state_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PowerState, _impl_.power_type_)
      + sizeof(PowerState::_impl_.power_type_)
      - PROTOBUF_FIELD_OFFSET(PowerState, _impl_.power_level_)>(
          reinterpret_cast<char*>(&_impl_.power_level_),
          reinterpret_cast<char*>(&other->_impl_.power_level_));
}

::google::protobuf::Metadata PowerState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_anduril_2fentitymanager_2fv1_2fpower_2epub_2eproto_getter, &descriptor_table_anduril_2fentitymanager_2fv1_2fpower_2epub_2eproto_once,
      file_level_metadata_anduril_2fentitymanager_2fv1_2fpower_2epub_2eproto[1]);
}
// ===================================================================

class PowerSource::_Internal {
 public:
  using HasBits = decltype(std::declval<PowerSource>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PowerSource, _impl_._has_bits_);
  static const ::anduril::entitymanager::v1::PowerLevel& power_level(const PowerSource* msg);
  static void set_has_power_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::BoolValue& offloadable(const PowerSource* msg);
  static void set_has_offloadable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::anduril::entitymanager::v1::PowerLevel& PowerSource::_Internal::power_level(const PowerSource* msg) {
  return *msg->_impl_.power_level_;
}
const ::google::protobuf::BoolValue& PowerSource::_Internal::offloadable(const PowerSource* msg) {
  return *msg->_impl_.offloadable_;
}
void PowerSource::clear_offloadable() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.offloadable_ != nullptr) _impl_.offloadable_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
PowerSource::PowerSource(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anduril.entitymanager.v1.PowerSource)
}
inline PROTOBUF_NDEBUG_INLINE PowerSource::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        messages_{visibility, arena, from.messages_} {}

PowerSource::PowerSource(
    ::google::protobuf::Arena* arena,
    const PowerSource& from)
    : ::google::protobuf::Message(arena) {
  PowerSource* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.power_level_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::anduril::entitymanager::v1::PowerLevel>(arena, *from._impl_.power_level_)
                : nullptr;
  _impl_.offloadable_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::BoolValue>(arena, *from._impl_.offloadable_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, power_status_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, power_status_),
           offsetof(Impl_, power_type_) -
               offsetof(Impl_, power_status_) +
               sizeof(Impl_::power_type_));

  // @@protoc_insertion_point(copy_constructor:anduril.entitymanager.v1.PowerSource)
}
inline PROTOBUF_NDEBUG_INLINE PowerSource::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        messages_{visibility, arena} {}

inline void PowerSource::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, power_level_),
           0,
           offsetof(Impl_, power_type_) -
               offsetof(Impl_, power_level_) +
               sizeof(Impl_::power_type_));
}
PowerSource::~PowerSource() {
  // @@protoc_insertion_point(destructor:anduril.entitymanager.v1.PowerSource)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PowerSource::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.power_level_;
  delete _impl_.offloadable_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void PowerSource::Clear() {
// @@protoc_insertion_point(message_clear_start:anduril.entitymanager.v1.PowerSource)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messages_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.power_level_ != nullptr);
      _impl_.power_level_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.offloadable_ != nullptr);
      _impl_.offloadable_->Clear();
    }
  }
  ::memset(&_impl_.power_status_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.power_type_) -
      reinterpret_cast<char*>(&_impl_.power_status_)) + sizeof(_impl_.power_type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PowerSource::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 2, 53, 2> PowerSource::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PowerSource, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PowerSource_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .anduril.entitymanager.v1.PowerStatus power_status = 1 [json_name = "powerStatus"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PowerSource, _impl_.power_status_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PowerSource, _impl_.power_status_)}},
    // .anduril.entitymanager.v1.PowerType power_type = 2 [json_name = "powerType"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PowerSource, _impl_.power_type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(PowerSource, _impl_.power_type_)}},
    // .anduril.entitymanager.v1.PowerLevel power_level = 3 [json_name = "powerLevel"];
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(PowerSource, _impl_.power_level_)}},
    // repeated string messages = 4 [json_name = "messages"];
    {::_pbi::TcParser::FastUR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(PowerSource, _impl_.messages_)}},
    // .google.protobuf.BoolValue offloadable = 5 [json_name = "offloadable"];
    {::_pbi::TcParser::FastMtS1,
     {42, 1, 1, PROTOBUF_FIELD_OFFSET(PowerSource, _impl_.offloadable_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .anduril.entitymanager.v1.PowerStatus power_status = 1 [json_name = "powerStatus"];
    {PROTOBUF_FIELD_OFFSET(PowerSource, _impl_.power_status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .anduril.entitymanager.v1.PowerType power_type = 2 [json_name = "powerType"];
    {PROTOBUF_FIELD_OFFSET(PowerSource, _impl_.power_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .anduril.entitymanager.v1.PowerLevel power_level = 3 [json_name = "powerLevel"];
    {PROTOBUF_FIELD_OFFSET(PowerSource, _impl_.power_level_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string messages = 4 [json_name = "messages"];
    {PROTOBUF_FIELD_OFFSET(PowerSource, _impl_.messages_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // .google.protobuf.BoolValue offloadable = 5 [json_name = "offloadable"];
    {PROTOBUF_FIELD_OFFSET(PowerSource, _impl_.offloadable_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::anduril::entitymanager::v1::PowerLevel>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::BoolValue>()},
  }}, {{
    "\44\0\0\0\10\0\0\0"
    "anduril.entitymanager.v1.PowerSource"
    "messages"
  }},
};

::uint8_t* PowerSource::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anduril.entitymanager.v1.PowerSource)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .anduril.entitymanager.v1.PowerStatus power_status = 1 [json_name = "powerStatus"];
  if (this->_internal_power_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_power_status(), target);
  }

  // .anduril.entitymanager.v1.PowerType power_type = 2 [json_name = "powerType"];
  if (this->_internal_power_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_power_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .anduril.entitymanager.v1.PowerLevel power_level = 3 [json_name = "powerLevel"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::power_level(this),
        _Internal::power_level(this).GetCachedSize(), target, stream);
  }

  // repeated string messages = 4 [json_name = "messages"];
  for (int i = 0, n = this->_internal_messages_size(); i < n; ++i) {
    const auto& s = this->_internal_messages().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "anduril.entitymanager.v1.PowerSource.messages");
    target = stream->WriteString(4, s, target);
  }

  // .google.protobuf.BoolValue offloadable = 5 [json_name = "offloadable"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::offloadable(this),
        _Internal::offloadable(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anduril.entitymanager.v1.PowerSource)
  return target;
}

::size_t PowerSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anduril.entitymanager.v1.PowerSource)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string messages = 4 [json_name = "messages"];
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_messages().size());
  for (int i = 0, n = _internal_messages().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_messages().Get(i));
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .anduril.entitymanager.v1.PowerLevel power_level = 3 [json_name = "powerLevel"];
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.power_level_);
    }

    // .google.protobuf.BoolValue offloadable = 5 [json_name = "offloadable"];
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.offloadable_);
    }

  }
  // .anduril.entitymanager.v1.PowerStatus power_status = 1 [json_name = "powerStatus"];
  if (this->_internal_power_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_power_status());
  }

  // .anduril.entitymanager.v1.PowerType power_type = 2 [json_name = "powerType"];
  if (this->_internal_power_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_power_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PowerSource::_class_data_ = {
    PowerSource::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* PowerSource::GetClassData() const {
  return &_class_data_;
}

void PowerSource::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PowerSource*>(&to_msg);
  auto& from = static_cast<const PowerSource&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anduril.entitymanager.v1.PowerSource)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_messages()->MergeFrom(from._internal_messages());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_power_level()->::anduril::entitymanager::v1::PowerLevel::MergeFrom(
          from._internal_power_level());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_offloadable()->::google::protobuf::BoolValue::MergeFrom(
          from._internal_offloadable());
    }
  }
  if (from._internal_power_status() != 0) {
    _this->_internal_set_power_status(from._internal_power_status());
  }
  if (from._internal_power_type() != 0) {
    _this->_internal_set_power_type(from._internal_power_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PowerSource::CopyFrom(const PowerSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anduril.entitymanager.v1.PowerSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PowerSource::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* PowerSource::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void PowerSource::InternalSwap(PowerSource* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.messages_.InternalSwap(&other->_impl_.messages_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PowerSource, _impl_.power_type_)
      + sizeof(PowerSource::_impl_.power_type_)
      - PROTOBUF_FIELD_OFFSET(PowerSource, _impl_.power_level_)>(
          reinterpret_cast<char*>(&_impl_.power_level_),
          reinterpret_cast<char*>(&other->_impl_.power_level_));
}

::google::protobuf::Metadata PowerSource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_anduril_2fentitymanager_2fv1_2fpower_2epub_2eproto_getter, &descriptor_table_anduril_2fentitymanager_2fv1_2fpower_2epub_2eproto_once,
      file_level_metadata_anduril_2fentitymanager_2fv1_2fpower_2epub_2eproto[2]);
}
// ===================================================================

class PowerLevel::_Internal {
 public:
  using HasBits = decltype(std::declval<PowerLevel>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PowerLevel, _impl_._has_bits_);
  static const ::google::protobuf::DoubleValue& voltage(const PowerLevel* msg);
  static void set_has_voltage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::DoubleValue& current_amps(const PowerLevel* msg);
  static void set_has_current_amps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::google::protobuf::DoubleValue& run_time_to_empty_mins(const PowerLevel* msg);
  static void set_has_run_time_to_empty_mins(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::google::protobuf::DoubleValue& consumption_rate_l_per_s(const PowerLevel* msg);
  static void set_has_consumption_rate_l_per_s(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::google::protobuf::DoubleValue& PowerLevel::_Internal::voltage(const PowerLevel* msg) {
  return *msg->_impl_.voltage_;
}
const ::google::protobuf::DoubleValue& PowerLevel::_Internal::current_amps(const PowerLevel* msg) {
  return *msg->_impl_.current_amps_;
}
const ::google::protobuf::DoubleValue& PowerLevel::_Internal::run_time_to_empty_mins(const PowerLevel* msg) {
  return *msg->_impl_.run_time_to_empty_mins_;
}
const ::google::protobuf::DoubleValue& PowerLevel::_Internal::consumption_rate_l_per_s(const PowerLevel* msg) {
  return *msg->_impl_.consumption_rate_l_per_s_;
}
void PowerLevel::clear_voltage() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.voltage_ != nullptr) _impl_.voltage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PowerLevel::clear_current_amps() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.current_amps_ != nullptr) _impl_.current_amps_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void PowerLevel::clear_run_time_to_empty_mins() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.run_time_to_empty_mins_ != nullptr) _impl_.run_time_to_empty_mins_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void PowerLevel::clear_consumption_rate_l_per_s() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.consumption_rate_l_per_s_ != nullptr) _impl_.consumption_rate_l_per_s_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
PowerLevel::PowerLevel(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anduril.entitymanager.v1.PowerLevel)
}
inline PROTOBUF_NDEBUG_INLINE PowerLevel::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PowerLevel::PowerLevel(
    ::google::protobuf::Arena* arena,
    const PowerLevel& from)
    : ::google::protobuf::Message(arena) {
  PowerLevel* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.voltage_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::DoubleValue>(arena, *from._impl_.voltage_)
                : nullptr;
  _impl_.current_amps_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::DoubleValue>(arena, *from._impl_.current_amps_)
                : nullptr;
  _impl_.run_time_to_empty_mins_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::google::protobuf::DoubleValue>(arena, *from._impl_.run_time_to_empty_mins_)
                : nullptr;
  _impl_.consumption_rate_l_per_s_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::google::protobuf::DoubleValue>(arena, *from._impl_.consumption_rate_l_per_s_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, capacity_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, capacity_),
           offsetof(Impl_, percent_remaining_) -
               offsetof(Impl_, capacity_) +
               sizeof(Impl_::percent_remaining_));

  // @@protoc_insertion_point(copy_constructor:anduril.entitymanager.v1.PowerLevel)
}
inline PROTOBUF_NDEBUG_INLINE PowerLevel::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PowerLevel::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, voltage_),
           0,
           offsetof(Impl_, percent_remaining_) -
               offsetof(Impl_, voltage_) +
               sizeof(Impl_::percent_remaining_));
}
PowerLevel::~PowerLevel() {
  // @@protoc_insertion_point(destructor:anduril.entitymanager.v1.PowerLevel)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PowerLevel::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.voltage_;
  delete _impl_.current_amps_;
  delete _impl_.run_time_to_empty_mins_;
  delete _impl_.consumption_rate_l_per_s_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void PowerLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:anduril.entitymanager.v1.PowerLevel)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.voltage_ != nullptr);
      _impl_.voltage_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.current_amps_ != nullptr);
      _impl_.current_amps_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.run_time_to_empty_mins_ != nullptr);
      _impl_.run_time_to_empty_mins_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.consumption_rate_l_per_s_ != nullptr);
      _impl_.consumption_rate_l_per_s_->Clear();
    }
  }
  ::memset(&_impl_.capacity_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.percent_remaining_) -
      reinterpret_cast<char*>(&_impl_.capacity_)) + sizeof(_impl_.percent_remaining_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PowerLevel::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 4, 0, 2> PowerLevel::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PowerLevel, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PowerLevel_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float capacity = 1 [json_name = "capacity"];
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(PowerLevel, _impl_.capacity_)}},
    // float remaining = 2 [json_name = "remaining"];
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(PowerLevel, _impl_.remaining_)}},
    // float percent_remaining = 3 [json_name = "percentRemaining"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(PowerLevel, _impl_.percent_remaining_)}},
    // .google.protobuf.DoubleValue voltage = 4 [json_name = "voltage"];
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(PowerLevel, _impl_.voltage_)}},
    // .google.protobuf.DoubleValue current_amps = 5 [json_name = "currentAmps"];
    {::_pbi::TcParser::FastMtS1,
     {42, 1, 1, PROTOBUF_FIELD_OFFSET(PowerLevel, _impl_.current_amps_)}},
    // .google.protobuf.DoubleValue run_time_to_empty_mins = 6 [json_name = "runTimeToEmptyMins"];
    {::_pbi::TcParser::FastMtS1,
     {50, 2, 2, PROTOBUF_FIELD_OFFSET(PowerLevel, _impl_.run_time_to_empty_mins_)}},
    // .google.protobuf.DoubleValue consumption_rate_l_per_s = 7 [json_name = "consumptionRateLPerS"];
    {::_pbi::TcParser::FastMtS1,
     {58, 3, 3, PROTOBUF_FIELD_OFFSET(PowerLevel, _impl_.consumption_rate_l_per_s_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float capacity = 1 [json_name = "capacity"];
    {PROTOBUF_FIELD_OFFSET(PowerLevel, _impl_.capacity_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float remaining = 2 [json_name = "remaining"];
    {PROTOBUF_FIELD_OFFSET(PowerLevel, _impl_.remaining_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float percent_remaining = 3 [json_name = "percentRemaining"];
    {PROTOBUF_FIELD_OFFSET(PowerLevel, _impl_.percent_remaining_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .google.protobuf.DoubleValue voltage = 4 [json_name = "voltage"];
    {PROTOBUF_FIELD_OFFSET(PowerLevel, _impl_.voltage_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.DoubleValue current_amps = 5 [json_name = "currentAmps"];
    {PROTOBUF_FIELD_OFFSET(PowerLevel, _impl_.current_amps_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.DoubleValue run_time_to_empty_mins = 6 [json_name = "runTimeToEmptyMins"];
    {PROTOBUF_FIELD_OFFSET(PowerLevel, _impl_.run_time_to_empty_mins_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.DoubleValue consumption_rate_l_per_s = 7 [json_name = "consumptionRateLPerS"];
    {PROTOBUF_FIELD_OFFSET(PowerLevel, _impl_.consumption_rate_l_per_s_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::DoubleValue>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::DoubleValue>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::DoubleValue>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::DoubleValue>()},
  }}, {{
  }},
};

::uint8_t* PowerLevel::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anduril.entitymanager.v1.PowerLevel)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float capacity = 1 [json_name = "capacity"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_capacity = this->_internal_capacity();
  ::uint32_t raw_capacity;
  memcpy(&raw_capacity, &tmp_capacity, sizeof(tmp_capacity));
  if (raw_capacity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_capacity(), target);
  }

  // float remaining = 2 [json_name = "remaining"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_remaining = this->_internal_remaining();
  ::uint32_t raw_remaining;
  memcpy(&raw_remaining, &tmp_remaining, sizeof(tmp_remaining));
  if (raw_remaining != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_remaining(), target);
  }

  // float percent_remaining = 3 [json_name = "percentRemaining"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_percent_remaining = this->_internal_percent_remaining();
  ::uint32_t raw_percent_remaining;
  memcpy(&raw_percent_remaining, &tmp_percent_remaining, sizeof(tmp_percent_remaining));
  if (raw_percent_remaining != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_percent_remaining(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.DoubleValue voltage = 4 [json_name = "voltage"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::voltage(this),
        _Internal::voltage(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue current_amps = 5 [json_name = "currentAmps"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::current_amps(this),
        _Internal::current_amps(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue run_time_to_empty_mins = 6 [json_name = "runTimeToEmptyMins"];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::run_time_to_empty_mins(this),
        _Internal::run_time_to_empty_mins(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue consumption_rate_l_per_s = 7 [json_name = "consumptionRateLPerS"];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::consumption_rate_l_per_s(this),
        _Internal::consumption_rate_l_per_s(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anduril.entitymanager.v1.PowerLevel)
  return target;
}

::size_t PowerLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anduril.entitymanager.v1.PowerLevel)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .google.protobuf.DoubleValue voltage = 4 [json_name = "voltage"];
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.voltage_);
    }

    // .google.protobuf.DoubleValue current_amps = 5 [json_name = "currentAmps"];
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.current_amps_);
    }

    // .google.protobuf.DoubleValue run_time_to_empty_mins = 6 [json_name = "runTimeToEmptyMins"];
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.run_time_to_empty_mins_);
    }

    // .google.protobuf.DoubleValue consumption_rate_l_per_s = 7 [json_name = "consumptionRateLPerS"];
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.consumption_rate_l_per_s_);
    }

  }
  // float capacity = 1 [json_name = "capacity"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_capacity = this->_internal_capacity();
  ::uint32_t raw_capacity;
  memcpy(&raw_capacity, &tmp_capacity, sizeof(tmp_capacity));
  if (raw_capacity != 0) {
    total_size += 5;
  }

  // float remaining = 2 [json_name = "remaining"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_remaining = this->_internal_remaining();
  ::uint32_t raw_remaining;
  memcpy(&raw_remaining, &tmp_remaining, sizeof(tmp_remaining));
  if (raw_remaining != 0) {
    total_size += 5;
  }

  // float percent_remaining = 3 [json_name = "percentRemaining"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_percent_remaining = this->_internal_percent_remaining();
  ::uint32_t raw_percent_remaining;
  memcpy(&raw_percent_remaining, &tmp_percent_remaining, sizeof(tmp_percent_remaining));
  if (raw_percent_remaining != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PowerLevel::_class_data_ = {
    PowerLevel::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* PowerLevel::GetClassData() const {
  return &_class_data_;
}

void PowerLevel::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PowerLevel*>(&to_msg);
  auto& from = static_cast<const PowerLevel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anduril.entitymanager.v1.PowerLevel)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_voltage()->::google::protobuf::DoubleValue::MergeFrom(
          from._internal_voltage());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_current_amps()->::google::protobuf::DoubleValue::MergeFrom(
          from._internal_current_amps());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_run_time_to_empty_mins()->::google::protobuf::DoubleValue::MergeFrom(
          from._internal_run_time_to_empty_mins());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_consumption_rate_l_per_s()->::google::protobuf::DoubleValue::MergeFrom(
          from._internal_consumption_rate_l_per_s());
    }
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_capacity = from._internal_capacity();
  ::uint32_t raw_capacity;
  memcpy(&raw_capacity, &tmp_capacity, sizeof(tmp_capacity));
  if (raw_capacity != 0) {
    _this->_internal_set_capacity(from._internal_capacity());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_remaining = from._internal_remaining();
  ::uint32_t raw_remaining;
  memcpy(&raw_remaining, &tmp_remaining, sizeof(tmp_remaining));
  if (raw_remaining != 0) {
    _this->_internal_set_remaining(from._internal_remaining());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_percent_remaining = from._internal_percent_remaining();
  ::uint32_t raw_percent_remaining;
  memcpy(&raw_percent_remaining, &tmp_percent_remaining, sizeof(tmp_percent_remaining));
  if (raw_percent_remaining != 0) {
    _this->_internal_set_percent_remaining(from._internal_percent_remaining());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PowerLevel::CopyFrom(const PowerLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anduril.entitymanager.v1.PowerLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PowerLevel::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* PowerLevel::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void PowerLevel::InternalSwap(PowerLevel* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PowerLevel, _impl_.percent_remaining_)
      + sizeof(PowerLevel::_impl_.percent_remaining_)
      - PROTOBUF_FIELD_OFFSET(PowerLevel, _impl_.voltage_)>(
          reinterpret_cast<char*>(&_impl_.voltage_),
          reinterpret_cast<char*>(&other->_impl_.voltage_));
}

::google::protobuf::Metadata PowerLevel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_anduril_2fentitymanager_2fv1_2fpower_2epub_2eproto_getter, &descriptor_table_anduril_2fentitymanager_2fv1_2fpower_2epub_2eproto_once,
      file_level_metadata_anduril_2fentitymanager_2fv1_2fpower_2epub_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace entitymanager
}  // namespace anduril
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
