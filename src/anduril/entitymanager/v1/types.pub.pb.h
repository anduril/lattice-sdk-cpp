// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: anduril/entitymanager/v1/types.pub.proto
// Protobuf C++ Version: 5.29.0

#ifndef anduril_2fentitymanager_2fv1_2ftypes_2epub_2eproto_2epb_2eh
#define anduril_2fentitymanager_2fv1_2ftypes_2epub_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_anduril_2fentitymanager_2fv1_2ftypes_2epub_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_anduril_2fentitymanager_2fv1_2ftypes_2epub_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_anduril_2fentitymanager_2fv1_2ftypes_2epub_2eproto;
namespace anduril {
namespace entitymanager {
namespace v1 {
class FloatRange;
struct FloatRangeDefaultTypeInternal;
extern FloatRangeDefaultTypeInternal _FloatRange_default_instance_;
class UInt32Range;
struct UInt32RangeDefaultTypeInternal;
extern UInt32RangeDefaultTypeInternal _UInt32Range_default_instance_;
}  // namespace v1
}  // namespace entitymanager
}  // namespace anduril
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace anduril {
namespace entitymanager {
namespace v1 {
enum AltIdType : int {
  ALT_ID_TYPE_INVALID = 0,
  ALT_ID_TYPE_TRACK_ID_2 = 1,
  ALT_ID_TYPE_TRACK_ID_1 = 12,
  ALT_ID_TYPE_SPI_ID = 2,
  ALT_ID_TYPE_NITF_FILE_TITLE = 3,
  ALT_ID_TYPE_TRACK_REPO_ALERT_ID = 4,
  ALT_ID_TYPE_ASSET_ID = 5,
  ALT_ID_TYPE_LINK16_TRACK_NUMBER = 6,
  ALT_ID_TYPE_LINK16_JU = 7,
  ALT_ID_TYPE_NCCT_MESSAGE_ID = 8,
  ALT_ID_TYPE_CALLSIGN = 9,
  ALT_ID_TYPE_MMSI_ID = 10,
  ALT_ID_TYPE_VMF_URN = 11,
  ALT_ID_TYPE_IMO_ID = 13,
  ALT_ID_TYPE_VMF_TARGET_NUMBER = 14,
  ALT_ID_TYPE_SERIAL_NUMBER = 15,
  ALT_ID_TYPE_REGISTRATION_ID = 16,
  ALT_ID_TYPE_IBS_GID = 17,
  ALT_ID_TYPE_DODAAC = 18,
  ALT_ID_TYPE_UIC = 19,
  ALT_ID_TYPE_NORAD_CAT_ID = 20,
  ALT_ID_TYPE_UNOOSA_NAME = 23,
  ALT_ID_TYPE_UNOOSA_ID = 24,
  AltIdType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AltIdType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AltIdType_IsValid(int value);
extern const uint32_t AltIdType_internal_data_[];
constexpr AltIdType AltIdType_MIN = static_cast<AltIdType>(0);
constexpr AltIdType AltIdType_MAX = static_cast<AltIdType>(24);
constexpr int AltIdType_ARRAYSIZE = 24 + 1;
const ::google::protobuf::EnumDescriptor*
AltIdType_descriptor();
template <typename T>
const std::string& AltIdType_Name(T value) {
  static_assert(std::is_same<T, AltIdType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AltIdType_Name().");
  return AltIdType_Name(static_cast<AltIdType>(value));
}
template <>
inline const std::string& AltIdType_Name(AltIdType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AltIdType_descriptor,
                                                 0, 24>(
      static_cast<int>(value));
}
inline bool AltIdType_Parse(absl::string_view name, AltIdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AltIdType>(
      AltIdType_descriptor(), name, value);
}
enum Template : int {
  TEMPLATE_INVALID = 0,
  TEMPLATE_TRACK = 1,
  TEMPLATE_SENSOR_POINT_OF_INTEREST = 2,
  TEMPLATE_ASSET = 3,
  TEMPLATE_GEO = 4,
  TEMPLATE_SIGNAL_OF_INTEREST = 5,
  Template_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Template_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Template_IsValid(int value);
extern const uint32_t Template_internal_data_[];
constexpr Template Template_MIN = static_cast<Template>(0);
constexpr Template Template_MAX = static_cast<Template>(5);
constexpr int Template_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
Template_descriptor();
template <typename T>
const std::string& Template_Name(T value) {
  static_assert(std::is_same<T, Template>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Template_Name().");
  return Template_Name(static_cast<Template>(value));
}
template <>
inline const std::string& Template_Name(Template value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Template_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool Template_Parse(absl::string_view name, Template* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Template>(
      Template_descriptor(), name, value);
}
enum OverrideStatus : int {
  OVERRIDE_STATUS_INVALID = 0,
  OVERRIDE_STATUS_APPLIED = 1,
  OVERRIDE_STATUS_PENDING = 2,
  OVERRIDE_STATUS_TIMEOUT = 3,
  OVERRIDE_STATUS_REJECTED = 4,
  OVERRIDE_STATUS_DELETION_PENDING = 5,
  OverrideStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  OverrideStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool OverrideStatus_IsValid(int value);
extern const uint32_t OverrideStatus_internal_data_[];
constexpr OverrideStatus OverrideStatus_MIN = static_cast<OverrideStatus>(0);
constexpr OverrideStatus OverrideStatus_MAX = static_cast<OverrideStatus>(5);
constexpr int OverrideStatus_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
OverrideStatus_descriptor();
template <typename T>
const std::string& OverrideStatus_Name(T value) {
  static_assert(std::is_same<T, OverrideStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to OverrideStatus_Name().");
  return OverrideStatus_Name(static_cast<OverrideStatus>(value));
}
template <>
inline const std::string& OverrideStatus_Name(OverrideStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<OverrideStatus_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool OverrideStatus_Parse(absl::string_view name, OverrideStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OverrideStatus>(
      OverrideStatus_descriptor(), name, value);
}
enum OverrideType : int {
  OVERRIDE_TYPE_INVALID = 0,
  OVERRIDE_TYPE_LIVE = 1,
  OVERRIDE_TYPE_POST_EXPIRY = 2,
  OverrideType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  OverrideType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool OverrideType_IsValid(int value);
extern const uint32_t OverrideType_internal_data_[];
constexpr OverrideType OverrideType_MIN = static_cast<OverrideType>(0);
constexpr OverrideType OverrideType_MAX = static_cast<OverrideType>(2);
constexpr int OverrideType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
OverrideType_descriptor();
template <typename T>
const std::string& OverrideType_Name(T value) {
  static_assert(std::is_same<T, OverrideType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to OverrideType_Name().");
  return OverrideType_Name(static_cast<OverrideType>(value));
}
template <>
inline const std::string& OverrideType_Name(OverrideType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<OverrideType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool OverrideType_Parse(absl::string_view name, OverrideType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OverrideType>(
      OverrideType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class UInt32Range final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.entitymanager.v1.UInt32Range) */ {
 public:
  inline UInt32Range() : UInt32Range(nullptr) {}
  ~UInt32Range() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UInt32Range* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UInt32Range));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UInt32Range(
      ::google::protobuf::internal::ConstantInitialized);

  inline UInt32Range(const UInt32Range& from) : UInt32Range(nullptr, from) {}
  inline UInt32Range(UInt32Range&& from) noexcept
      : UInt32Range(nullptr, std::move(from)) {}
  inline UInt32Range& operator=(const UInt32Range& from) {
    CopyFrom(from);
    return *this;
  }
  inline UInt32Range& operator=(UInt32Range&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UInt32Range& default_instance() {
    return *internal_default_instance();
  }
  static inline const UInt32Range* internal_default_instance() {
    return reinterpret_cast<const UInt32Range*>(
        &_UInt32Range_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(UInt32Range& a, UInt32Range& b) { a.Swap(&b); }
  inline void Swap(UInt32Range* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UInt32Range* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UInt32Range* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UInt32Range>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UInt32Range& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UInt32Range& from) { UInt32Range::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UInt32Range* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "anduril.entitymanager.v1.UInt32Range"; }

 protected:
  explicit UInt32Range(::google::protobuf::Arena* arena);
  UInt32Range(::google::protobuf::Arena* arena, const UInt32Range& from);
  UInt32Range(::google::protobuf::Arena* arena, UInt32Range&& from) noexcept
      : UInt32Range(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLowerBoundFieldNumber = 1,
    kUpperBoundFieldNumber = 2,
  };
  // uint32 lower_bound = 1 [json_name = "lowerBound"];
  void clear_lower_bound() ;
  ::uint32_t lower_bound() const;
  void set_lower_bound(::uint32_t value);

  private:
  ::uint32_t _internal_lower_bound() const;
  void _internal_set_lower_bound(::uint32_t value);

  public:
  // uint32 upper_bound = 2 [json_name = "upperBound"];
  void clear_upper_bound() ;
  ::uint32_t upper_bound() const;
  void set_upper_bound(::uint32_t value);

  private:
  ::uint32_t _internal_upper_bound() const;
  void _internal_set_upper_bound(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:anduril.entitymanager.v1.UInt32Range)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UInt32Range& from_msg);
    ::uint32_t lower_bound_;
    ::uint32_t upper_bound_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fentitymanager_2fv1_2ftypes_2epub_2eproto;
};
// -------------------------------------------------------------------

class FloatRange final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.entitymanager.v1.FloatRange) */ {
 public:
  inline FloatRange() : FloatRange(nullptr) {}
  ~FloatRange() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FloatRange* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FloatRange));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FloatRange(
      ::google::protobuf::internal::ConstantInitialized);

  inline FloatRange(const FloatRange& from) : FloatRange(nullptr, from) {}
  inline FloatRange(FloatRange&& from) noexcept
      : FloatRange(nullptr, std::move(from)) {}
  inline FloatRange& operator=(const FloatRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatRange& operator=(FloatRange&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FloatRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const FloatRange* internal_default_instance() {
    return reinterpret_cast<const FloatRange*>(
        &_FloatRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(FloatRange& a, FloatRange& b) { a.Swap(&b); }
  inline void Swap(FloatRange* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatRange* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FloatRange* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FloatRange>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FloatRange& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FloatRange& from) { FloatRange::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FloatRange* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "anduril.entitymanager.v1.FloatRange"; }

 protected:
  explicit FloatRange(::google::protobuf::Arena* arena);
  FloatRange(::google::protobuf::Arena* arena, const FloatRange& from);
  FloatRange(::google::protobuf::Arena* arena, FloatRange&& from) noexcept
      : FloatRange(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLowerBoundFieldNumber = 1,
    kUpperBoundFieldNumber = 2,
  };
  // float lower_bound = 1 [json_name = "lowerBound"];
  void clear_lower_bound() ;
  float lower_bound() const;
  void set_lower_bound(float value);

  private:
  float _internal_lower_bound() const;
  void _internal_set_lower_bound(float value);

  public:
  // float upper_bound = 2 [json_name = "upperBound"];
  void clear_upper_bound() ;
  float upper_bound() const;
  void set_upper_bound(float value);

  private:
  float _internal_upper_bound() const;
  void _internal_set_upper_bound(float value);

  public:
  // @@protoc_insertion_point(class_scope:anduril.entitymanager.v1.FloatRange)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FloatRange& from_msg);
    float lower_bound_;
    float upper_bound_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fentitymanager_2fv1_2ftypes_2epub_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// UInt32Range

// uint32 lower_bound = 1 [json_name = "lowerBound"];
inline void UInt32Range::clear_lower_bound() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lower_bound_ = 0u;
}
inline ::uint32_t UInt32Range::lower_bound() const {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.UInt32Range.lower_bound)
  return _internal_lower_bound();
}
inline void UInt32Range::set_lower_bound(::uint32_t value) {
  _internal_set_lower_bound(value);
  // @@protoc_insertion_point(field_set:anduril.entitymanager.v1.UInt32Range.lower_bound)
}
inline ::uint32_t UInt32Range::_internal_lower_bound() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lower_bound_;
}
inline void UInt32Range::_internal_set_lower_bound(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lower_bound_ = value;
}

// uint32 upper_bound = 2 [json_name = "upperBound"];
inline void UInt32Range::clear_upper_bound() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.upper_bound_ = 0u;
}
inline ::uint32_t UInt32Range::upper_bound() const {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.UInt32Range.upper_bound)
  return _internal_upper_bound();
}
inline void UInt32Range::set_upper_bound(::uint32_t value) {
  _internal_set_upper_bound(value);
  // @@protoc_insertion_point(field_set:anduril.entitymanager.v1.UInt32Range.upper_bound)
}
inline ::uint32_t UInt32Range::_internal_upper_bound() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.upper_bound_;
}
inline void UInt32Range::_internal_set_upper_bound(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.upper_bound_ = value;
}

// -------------------------------------------------------------------

// FloatRange

// float lower_bound = 1 [json_name = "lowerBound"];
inline void FloatRange::clear_lower_bound() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lower_bound_ = 0;
}
inline float FloatRange::lower_bound() const {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.FloatRange.lower_bound)
  return _internal_lower_bound();
}
inline void FloatRange::set_lower_bound(float value) {
  _internal_set_lower_bound(value);
  // @@protoc_insertion_point(field_set:anduril.entitymanager.v1.FloatRange.lower_bound)
}
inline float FloatRange::_internal_lower_bound() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lower_bound_;
}
inline void FloatRange::_internal_set_lower_bound(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lower_bound_ = value;
}

// float upper_bound = 2 [json_name = "upperBound"];
inline void FloatRange::clear_upper_bound() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.upper_bound_ = 0;
}
inline float FloatRange::upper_bound() const {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.FloatRange.upper_bound)
  return _internal_upper_bound();
}
inline void FloatRange::set_upper_bound(float value) {
  _internal_set_upper_bound(value);
  // @@protoc_insertion_point(field_set:anduril.entitymanager.v1.FloatRange.upper_bound)
}
inline float FloatRange::_internal_upper_bound() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.upper_bound_;
}
inline void FloatRange::_internal_set_upper_bound(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.upper_bound_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace entitymanager
}  // namespace anduril


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::anduril::entitymanager::v1::AltIdType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::anduril::entitymanager::v1::AltIdType>() {
  return ::anduril::entitymanager::v1::AltIdType_descriptor();
}
template <>
struct is_proto_enum<::anduril::entitymanager::v1::Template> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::anduril::entitymanager::v1::Template>() {
  return ::anduril::entitymanager::v1::Template_descriptor();
}
template <>
struct is_proto_enum<::anduril::entitymanager::v1::OverrideStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::anduril::entitymanager::v1::OverrideStatus>() {
  return ::anduril::entitymanager::v1::OverrideStatus_descriptor();
}
template <>
struct is_proto_enum<::anduril::entitymanager::v1::OverrideType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::anduril::entitymanager::v1::OverrideType>() {
  return ::anduril::entitymanager::v1::OverrideType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // anduril_2fentitymanager_2fv1_2ftypes_2epub_2eproto_2epb_2eh
