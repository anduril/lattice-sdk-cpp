// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: anduril/entitymanager/v1/correlations.pub.proto
// Protobuf C++ Version: 5.29.0

#ifndef anduril_2fentitymanager_2fv1_2fcorrelations_2epub_2eproto_2epb_2eh
#define anduril_2fentitymanager_2fv1_2fcorrelations_2epub_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_anduril_2fentitymanager_2fv1_2fcorrelations_2epub_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_anduril_2fentitymanager_2fv1_2fcorrelations_2epub_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_anduril_2fentitymanager_2fv1_2fcorrelations_2epub_2eproto;
namespace anduril {
namespace entitymanager {
namespace v1 {
class Correlated;
struct CorrelatedDefaultTypeInternal;
extern CorrelatedDefaultTypeInternal _Correlated_default_instance_;
class CorrelationScore;
struct CorrelationScoreDefaultTypeInternal;
extern CorrelationScoreDefaultTypeInternal _CorrelationScore_default_instance_;
}  // namespace v1
}  // namespace entitymanager
}  // namespace anduril
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace anduril {
namespace entitymanager {
namespace v1 {
enum CorrelationStatus : int {
  CORRELATION_STATUS_INVALID = 0,
  CORRELATION_STATUS_MANUAL_INSPECTION = 1,
  CORRELATION_STATUS_AUTO_SUGGESTED = 2,
  CORRELATION_STATUS_START_CORRELATE [[deprecated]] = 3,
  CORRELATION_STATUS_CONFIRMED = 4,
  CORRELATION_STATUS_DENIED = 5,
  CorrelationStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CorrelationStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CorrelationStatus_IsValid(int value);
extern const uint32_t CorrelationStatus_internal_data_[];
constexpr CorrelationStatus CorrelationStatus_MIN = static_cast<CorrelationStatus>(0);
constexpr CorrelationStatus CorrelationStatus_MAX = static_cast<CorrelationStatus>(5);
constexpr int CorrelationStatus_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
CorrelationStatus_descriptor();
template <typename T>
const std::string& CorrelationStatus_Name(T value) {
  static_assert(std::is_same<T, CorrelationStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CorrelationStatus_Name().");
  return CorrelationStatus_Name(static_cast<CorrelationStatus>(value));
}
template <>
inline const std::string& CorrelationStatus_Name(CorrelationStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CorrelationStatus_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool CorrelationStatus_Parse(absl::string_view name, CorrelationStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CorrelationStatus>(
      CorrelationStatus_descriptor(), name, value);
}
enum ScoreInterpretation : int {
  SCORE_INTERPRETATION_INVALID = 0,
  SCORE_INTERPRETATION_UNLIKELY = 1,
  SCORE_INTERPRETATION_LIKELY = 2,
  SCORE_INTERPRETATION_VERY_LIKELY = 3,
  ScoreInterpretation_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ScoreInterpretation_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ScoreInterpretation_IsValid(int value);
extern const uint32_t ScoreInterpretation_internal_data_[];
constexpr ScoreInterpretation ScoreInterpretation_MIN = static_cast<ScoreInterpretation>(0);
constexpr ScoreInterpretation ScoreInterpretation_MAX = static_cast<ScoreInterpretation>(3);
constexpr int ScoreInterpretation_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
ScoreInterpretation_descriptor();
template <typename T>
const std::string& ScoreInterpretation_Name(T value) {
  static_assert(std::is_same<T, ScoreInterpretation>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ScoreInterpretation_Name().");
  return ScoreInterpretation_Name(static_cast<ScoreInterpretation>(value));
}
template <>
inline const std::string& ScoreInterpretation_Name(ScoreInterpretation value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ScoreInterpretation_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool ScoreInterpretation_Parse(absl::string_view name, ScoreInterpretation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ScoreInterpretation>(
      ScoreInterpretation_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class CorrelationScore final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.entitymanager.v1.CorrelationScore) */ {
 public:
  inline CorrelationScore() : CorrelationScore(nullptr) {}
  ~CorrelationScore() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CorrelationScore* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CorrelationScore));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CorrelationScore(
      ::google::protobuf::internal::ConstantInitialized);

  inline CorrelationScore(const CorrelationScore& from) : CorrelationScore(nullptr, from) {}
  inline CorrelationScore(CorrelationScore&& from) noexcept
      : CorrelationScore(nullptr, std::move(from)) {}
  inline CorrelationScore& operator=(const CorrelationScore& from) {
    CopyFrom(from);
    return *this;
  }
  inline CorrelationScore& operator=(CorrelationScore&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CorrelationScore& default_instance() {
    return *internal_default_instance();
  }
  static inline const CorrelationScore* internal_default_instance() {
    return reinterpret_cast<const CorrelationScore*>(
        &_CorrelationScore_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(CorrelationScore& a, CorrelationScore& b) { a.Swap(&b); }
  inline void Swap(CorrelationScore* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CorrelationScore* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CorrelationScore* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CorrelationScore>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CorrelationScore& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CorrelationScore& from) { CorrelationScore::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CorrelationScore* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "anduril.entitymanager.v1.CorrelationScore"; }

 protected:
  explicit CorrelationScore(::google::protobuf::Arena* arena);
  CorrelationScore(::google::protobuf::Arena* arena, const CorrelationScore& from);
  CorrelationScore(::google::protobuf::Arena* arena, CorrelationScore&& from) noexcept
      : CorrelationScore(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOtherEntityIdFieldNumber = 1,
    kScoreFieldNumber = 2,
    kInterpretationFieldNumber = 3,
    kLink16CompliantFieldNumber = 4,
    kOtherStatusFieldNumber = 5,
  };
  // string other_entity_id = 1 [json_name = "otherEntityId"];
  void clear_other_entity_id() ;
  const std::string& other_entity_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_other_entity_id(Arg_&& arg, Args_... args);
  std::string* mutable_other_entity_id();
  PROTOBUF_NODISCARD std::string* release_other_entity_id();
  void set_allocated_other_entity_id(std::string* value);

  private:
  const std::string& _internal_other_entity_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_other_entity_id(
      const std::string& value);
  std::string* _internal_mutable_other_entity_id();

  public:
  // float score = 2 [json_name = "score"];
  void clear_score() ;
  float score() const;
  void set_score(float value);

  private:
  float _internal_score() const;
  void _internal_set_score(float value);

  public:
  // .anduril.entitymanager.v1.ScoreInterpretation interpretation = 3 [json_name = "interpretation"];
  void clear_interpretation() ;
  ::anduril::entitymanager::v1::ScoreInterpretation interpretation() const;
  void set_interpretation(::anduril::entitymanager::v1::ScoreInterpretation value);

  private:
  ::anduril::entitymanager::v1::ScoreInterpretation _internal_interpretation() const;
  void _internal_set_interpretation(::anduril::entitymanager::v1::ScoreInterpretation value);

  public:
  // bool link16_compliant = 4 [json_name = "link16Compliant", deprecated = true];
  [[deprecated]]  void clear_link16_compliant() ;
  [[deprecated]] bool link16_compliant() const;
  [[deprecated]] void set_link16_compliant(bool value);

  private:
  bool _internal_link16_compliant() const;
  void _internal_set_link16_compliant(bool value);

  public:
  // .anduril.entitymanager.v1.CorrelationStatus other_status = 5 [json_name = "otherStatus"];
  void clear_other_status() ;
  ::anduril::entitymanager::v1::CorrelationStatus other_status() const;
  void set_other_status(::anduril::entitymanager::v1::CorrelationStatus value);

  private:
  ::anduril::entitymanager::v1::CorrelationStatus _internal_other_status() const;
  void _internal_set_other_status(::anduril::entitymanager::v1::CorrelationStatus value);

  public:
  // @@protoc_insertion_point(class_scope:anduril.entitymanager.v1.CorrelationScore)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      65, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CorrelationScore& from_msg);
    ::google::protobuf::internal::ArenaStringPtr other_entity_id_;
    float score_;
    int interpretation_;
    bool link16_compliant_;
    int other_status_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fentitymanager_2fv1_2fcorrelations_2epub_2eproto;
};
// -------------------------------------------------------------------

class Correlated final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.entitymanager.v1.Correlated) */ {
 public:
  inline Correlated() : Correlated(nullptr) {}
  ~Correlated() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Correlated* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Correlated));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Correlated(
      ::google::protobuf::internal::ConstantInitialized);

  inline Correlated(const Correlated& from) : Correlated(nullptr, from) {}
  inline Correlated(Correlated&& from) noexcept
      : Correlated(nullptr, std::move(from)) {}
  inline Correlated& operator=(const Correlated& from) {
    CopyFrom(from);
    return *this;
  }
  inline Correlated& operator=(Correlated&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Correlated& default_instance() {
    return *internal_default_instance();
  }
  static inline const Correlated* internal_default_instance() {
    return reinterpret_cast<const Correlated*>(
        &_Correlated_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Correlated& a, Correlated& b) { a.Swap(&b); }
  inline void Swap(Correlated* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Correlated* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Correlated* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Correlated>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Correlated& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Correlated& from) { Correlated::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Correlated* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "anduril.entitymanager.v1.Correlated"; }

 protected:
  explicit Correlated(::google::protobuf::Arena* arena);
  Correlated(::google::protobuf::Arena* arena, const Correlated& from);
  Correlated(::google::protobuf::Arena* arena, Correlated&& from) noexcept
      : Correlated(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kScoresFieldNumber = 3,
    kPrimaryEntityIdFieldNumber = 1,
    kExpiresTimeFieldNumber = 4,
    kStatusFieldNumber = 2,
  };
  // repeated .anduril.entitymanager.v1.CorrelationScore scores = 3 [json_name = "scores"];
  int scores_size() const;
  private:
  int _internal_scores_size() const;

  public:
  void clear_scores() ;
  ::anduril::entitymanager::v1::CorrelationScore* mutable_scores(int index);
  ::google::protobuf::RepeatedPtrField<::anduril::entitymanager::v1::CorrelationScore>* mutable_scores();

  private:
  const ::google::protobuf::RepeatedPtrField<::anduril::entitymanager::v1::CorrelationScore>& _internal_scores() const;
  ::google::protobuf::RepeatedPtrField<::anduril::entitymanager::v1::CorrelationScore>* _internal_mutable_scores();
  public:
  const ::anduril::entitymanager::v1::CorrelationScore& scores(int index) const;
  ::anduril::entitymanager::v1::CorrelationScore* add_scores();
  const ::google::protobuf::RepeatedPtrField<::anduril::entitymanager::v1::CorrelationScore>& scores() const;
  // string primary_entity_id = 1 [json_name = "primaryEntityId"];
  void clear_primary_entity_id() ;
  const std::string& primary_entity_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_primary_entity_id(Arg_&& arg, Args_... args);
  std::string* mutable_primary_entity_id();
  PROTOBUF_NODISCARD std::string* release_primary_entity_id();
  void set_allocated_primary_entity_id(std::string* value);

  private:
  const std::string& _internal_primary_entity_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_primary_entity_id(
      const std::string& value);
  std::string* _internal_mutable_primary_entity_id();

  public:
  // .google.protobuf.Timestamp expires_time = 4 [json_name = "expiresTime"];
  bool has_expires_time() const;
  void clear_expires_time() ;
  const ::google::protobuf::Timestamp& expires_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_expires_time();
  ::google::protobuf::Timestamp* mutable_expires_time();
  void set_allocated_expires_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_expires_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_expires_time();

  private:
  const ::google::protobuf::Timestamp& _internal_expires_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_expires_time();

  public:
  // .anduril.entitymanager.v1.CorrelationStatus status = 2 [json_name = "status"];
  void clear_status() ;
  ::anduril::entitymanager::v1::CorrelationStatus status() const;
  void set_status(::anduril::entitymanager::v1::CorrelationStatus value);

  private:
  ::anduril::entitymanager::v1::CorrelationStatus _internal_status() const;
  void _internal_set_status(::anduril::entitymanager::v1::CorrelationStatus value);

  public:
  // @@protoc_insertion_point(class_scope:anduril.entitymanager.v1.Correlated)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      61, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Correlated& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::anduril::entitymanager::v1::CorrelationScore > scores_;
    ::google::protobuf::internal::ArenaStringPtr primary_entity_id_;
    ::google::protobuf::Timestamp* expires_time_;
    int status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fentitymanager_2fv1_2fcorrelations_2epub_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Correlated

// string primary_entity_id = 1 [json_name = "primaryEntityId"];
inline void Correlated::clear_primary_entity_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_entity_id_.ClearToEmpty();
}
inline const std::string& Correlated::primary_entity_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.Correlated.primary_entity_id)
  return _internal_primary_entity_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Correlated::set_primary_entity_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_entity_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:anduril.entitymanager.v1.Correlated.primary_entity_id)
}
inline std::string* Correlated::mutable_primary_entity_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_primary_entity_id();
  // @@protoc_insertion_point(field_mutable:anduril.entitymanager.v1.Correlated.primary_entity_id)
  return _s;
}
inline const std::string& Correlated::_internal_primary_entity_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.primary_entity_id_.Get();
}
inline void Correlated::_internal_set_primary_entity_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_entity_id_.Set(value, GetArena());
}
inline std::string* Correlated::_internal_mutable_primary_entity_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.primary_entity_id_.Mutable( GetArena());
}
inline std::string* Correlated::release_primary_entity_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.entitymanager.v1.Correlated.primary_entity_id)
  return _impl_.primary_entity_id_.Release();
}
inline void Correlated::set_allocated_primary_entity_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_entity_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.primary_entity_id_.IsDefault()) {
    _impl_.primary_entity_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:anduril.entitymanager.v1.Correlated.primary_entity_id)
}

// .anduril.entitymanager.v1.CorrelationStatus status = 2 [json_name = "status"];
inline void Correlated::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::anduril::entitymanager::v1::CorrelationStatus Correlated::status() const {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.Correlated.status)
  return _internal_status();
}
inline void Correlated::set_status(::anduril::entitymanager::v1::CorrelationStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:anduril.entitymanager.v1.Correlated.status)
}
inline ::anduril::entitymanager::v1::CorrelationStatus Correlated::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::anduril::entitymanager::v1::CorrelationStatus>(_impl_.status_);
}
inline void Correlated::_internal_set_status(::anduril::entitymanager::v1::CorrelationStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// repeated .anduril.entitymanager.v1.CorrelationScore scores = 3 [json_name = "scores"];
inline int Correlated::_internal_scores_size() const {
  return _internal_scores().size();
}
inline int Correlated::scores_size() const {
  return _internal_scores_size();
}
inline void Correlated::clear_scores() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scores_.Clear();
}
inline ::anduril::entitymanager::v1::CorrelationScore* Correlated::mutable_scores(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:anduril.entitymanager.v1.Correlated.scores)
  return _internal_mutable_scores()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::anduril::entitymanager::v1::CorrelationScore>* Correlated::mutable_scores()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:anduril.entitymanager.v1.Correlated.scores)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_scores();
}
inline const ::anduril::entitymanager::v1::CorrelationScore& Correlated::scores(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.Correlated.scores)
  return _internal_scores().Get(index);
}
inline ::anduril::entitymanager::v1::CorrelationScore* Correlated::add_scores() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::anduril::entitymanager::v1::CorrelationScore* _add = _internal_mutable_scores()->Add();
  // @@protoc_insertion_point(field_add:anduril.entitymanager.v1.Correlated.scores)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::anduril::entitymanager::v1::CorrelationScore>& Correlated::scores() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:anduril.entitymanager.v1.Correlated.scores)
  return _internal_scores();
}
inline const ::google::protobuf::RepeatedPtrField<::anduril::entitymanager::v1::CorrelationScore>&
Correlated::_internal_scores() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.scores_;
}
inline ::google::protobuf::RepeatedPtrField<::anduril::entitymanager::v1::CorrelationScore>*
Correlated::_internal_mutable_scores() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.scores_;
}

// .google.protobuf.Timestamp expires_time = 4 [json_name = "expiresTime"];
inline bool Correlated::has_expires_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.expires_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Correlated::_internal_expires_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.expires_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Correlated::expires_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.Correlated.expires_time)
  return _internal_expires_time();
}
inline void Correlated::unsafe_arena_set_allocated_expires_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expires_time_);
  }
  _impl_.expires_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.entitymanager.v1.Correlated.expires_time)
}
inline ::google::protobuf::Timestamp* Correlated::release_expires_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.expires_time_;
  _impl_.expires_time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* Correlated::unsafe_arena_release_expires_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.entitymanager.v1.Correlated.expires_time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.expires_time_;
  _impl_.expires_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Correlated::_internal_mutable_expires_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.expires_time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.expires_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.expires_time_;
}
inline ::google::protobuf::Timestamp* Correlated::mutable_expires_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_expires_time();
  // @@protoc_insertion_point(field_mutable:anduril.entitymanager.v1.Correlated.expires_time)
  return _msg;
}
inline void Correlated::set_allocated_expires_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expires_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.expires_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.entitymanager.v1.Correlated.expires_time)
}

// -------------------------------------------------------------------

// CorrelationScore

// string other_entity_id = 1 [json_name = "otherEntityId"];
inline void CorrelationScore::clear_other_entity_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.other_entity_id_.ClearToEmpty();
}
inline const std::string& CorrelationScore::other_entity_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.CorrelationScore.other_entity_id)
  return _internal_other_entity_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CorrelationScore::set_other_entity_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.other_entity_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:anduril.entitymanager.v1.CorrelationScore.other_entity_id)
}
inline std::string* CorrelationScore::mutable_other_entity_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_other_entity_id();
  // @@protoc_insertion_point(field_mutable:anduril.entitymanager.v1.CorrelationScore.other_entity_id)
  return _s;
}
inline const std::string& CorrelationScore::_internal_other_entity_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.other_entity_id_.Get();
}
inline void CorrelationScore::_internal_set_other_entity_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.other_entity_id_.Set(value, GetArena());
}
inline std::string* CorrelationScore::_internal_mutable_other_entity_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.other_entity_id_.Mutable( GetArena());
}
inline std::string* CorrelationScore::release_other_entity_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.entitymanager.v1.CorrelationScore.other_entity_id)
  return _impl_.other_entity_id_.Release();
}
inline void CorrelationScore::set_allocated_other_entity_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.other_entity_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.other_entity_id_.IsDefault()) {
    _impl_.other_entity_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:anduril.entitymanager.v1.CorrelationScore.other_entity_id)
}

// float score = 2 [json_name = "score"];
inline void CorrelationScore::clear_score() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.score_ = 0;
}
inline float CorrelationScore::score() const {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.CorrelationScore.score)
  return _internal_score();
}
inline void CorrelationScore::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:anduril.entitymanager.v1.CorrelationScore.score)
}
inline float CorrelationScore::_internal_score() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.score_;
}
inline void CorrelationScore::_internal_set_score(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.score_ = value;
}

// .anduril.entitymanager.v1.ScoreInterpretation interpretation = 3 [json_name = "interpretation"];
inline void CorrelationScore::clear_interpretation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interpretation_ = 0;
}
inline ::anduril::entitymanager::v1::ScoreInterpretation CorrelationScore::interpretation() const {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.CorrelationScore.interpretation)
  return _internal_interpretation();
}
inline void CorrelationScore::set_interpretation(::anduril::entitymanager::v1::ScoreInterpretation value) {
  _internal_set_interpretation(value);
  // @@protoc_insertion_point(field_set:anduril.entitymanager.v1.CorrelationScore.interpretation)
}
inline ::anduril::entitymanager::v1::ScoreInterpretation CorrelationScore::_internal_interpretation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::anduril::entitymanager::v1::ScoreInterpretation>(_impl_.interpretation_);
}
inline void CorrelationScore::_internal_set_interpretation(::anduril::entitymanager::v1::ScoreInterpretation value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interpretation_ = value;
}

// bool link16_compliant = 4 [json_name = "link16Compliant", deprecated = true];
inline void CorrelationScore::clear_link16_compliant() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.link16_compliant_ = false;
}
inline bool CorrelationScore::link16_compliant() const {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.CorrelationScore.link16_compliant)
  return _internal_link16_compliant();
}
inline void CorrelationScore::set_link16_compliant(bool value) {
  _internal_set_link16_compliant(value);
  // @@protoc_insertion_point(field_set:anduril.entitymanager.v1.CorrelationScore.link16_compliant)
}
inline bool CorrelationScore::_internal_link16_compliant() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.link16_compliant_;
}
inline void CorrelationScore::_internal_set_link16_compliant(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.link16_compliant_ = value;
}

// .anduril.entitymanager.v1.CorrelationStatus other_status = 5 [json_name = "otherStatus"];
inline void CorrelationScore::clear_other_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.other_status_ = 0;
}
inline ::anduril::entitymanager::v1::CorrelationStatus CorrelationScore::other_status() const {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.CorrelationScore.other_status)
  return _internal_other_status();
}
inline void CorrelationScore::set_other_status(::anduril::entitymanager::v1::CorrelationStatus value) {
  _internal_set_other_status(value);
  // @@protoc_insertion_point(field_set:anduril.entitymanager.v1.CorrelationScore.other_status)
}
inline ::anduril::entitymanager::v1::CorrelationStatus CorrelationScore::_internal_other_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::anduril::entitymanager::v1::CorrelationStatus>(_impl_.other_status_);
}
inline void CorrelationScore::_internal_set_other_status(::anduril::entitymanager::v1::CorrelationStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.other_status_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace entitymanager
}  // namespace anduril


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::anduril::entitymanager::v1::CorrelationStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::anduril::entitymanager::v1::CorrelationStatus>() {
  return ::anduril::entitymanager::v1::CorrelationStatus_descriptor();
}
template <>
struct is_proto_enum<::anduril::entitymanager::v1::ScoreInterpretation> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::anduril::entitymanager::v1::ScoreInterpretation>() {
  return ::anduril::entitymanager::v1::ScoreInterpretation_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // anduril_2fentitymanager_2fv1_2fcorrelations_2epub_2eproto_2epb_2eh
