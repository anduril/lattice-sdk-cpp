// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: anduril/entitymanager/v1/media.pub.proto
// Protobuf C++ Version: 5.29.0

#ifndef anduril_2fentitymanager_2fv1_2fmedia_2epub_2eproto_2epb_2eh
#define anduril_2fentitymanager_2fv1_2fmedia_2epub_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "anduril/entitymanager/v1/options.pub.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_anduril_2fentitymanager_2fv1_2fmedia_2epub_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_anduril_2fentitymanager_2fv1_2fmedia_2epub_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_anduril_2fentitymanager_2fv1_2fmedia_2epub_2eproto;
namespace anduril {
namespace entitymanager {
namespace v1 {
class Media;
struct MediaDefaultTypeInternal;
extern MediaDefaultTypeInternal _Media_default_instance_;
class MediaItem;
struct MediaItemDefaultTypeInternal;
extern MediaItemDefaultTypeInternal _MediaItem_default_instance_;
}  // namespace v1
}  // namespace entitymanager
}  // namespace anduril
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace anduril {
namespace entitymanager {
namespace v1 {
enum MediaType : int {
  MEDIA_TYPE_INVALID = 0,
  MEDIA_TYPE_THUMBNAIL = 1,
  MEDIA_TYPE_IMAGE = 2,
  MEDIA_TYPE_VIDEO = 3,
  MEDIA_TYPE_SLIPPY_TILES = 4,
  MediaType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MediaType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MediaType_IsValid(int value);
extern const uint32_t MediaType_internal_data_[];
constexpr MediaType MediaType_MIN = static_cast<MediaType>(0);
constexpr MediaType MediaType_MAX = static_cast<MediaType>(4);
constexpr int MediaType_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
MediaType_descriptor();
template <typename T>
const std::string& MediaType_Name(T value) {
  static_assert(std::is_same<T, MediaType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MediaType_Name().");
  return MediaType_Name(static_cast<MediaType>(value));
}
template <>
inline const std::string& MediaType_Name(MediaType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MediaType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool MediaType_Parse(absl::string_view name, MediaType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MediaType>(
      MediaType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class MediaItem final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.entitymanager.v1.MediaItem) */ {
 public:
  inline MediaItem() : MediaItem(nullptr) {}
  ~MediaItem() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MediaItem* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MediaItem));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MediaItem(
      ::google::protobuf::internal::ConstantInitialized);

  inline MediaItem(const MediaItem& from) : MediaItem(nullptr, from) {}
  inline MediaItem(MediaItem&& from) noexcept
      : MediaItem(nullptr, std::move(from)) {}
  inline MediaItem& operator=(const MediaItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaItem& operator=(MediaItem&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MediaItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const MediaItem* internal_default_instance() {
    return reinterpret_cast<const MediaItem*>(
        &_MediaItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(MediaItem& a, MediaItem& b) { a.Swap(&b); }
  inline void Swap(MediaItem* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MediaItem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MediaItem* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MediaItem>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MediaItem& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MediaItem& from) { MediaItem::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MediaItem* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "anduril.entitymanager.v1.MediaItem"; }

 protected:
  explicit MediaItem(::google::protobuf::Arena* arena);
  MediaItem(::google::protobuf::Arena* arena, const MediaItem& from);
  MediaItem(::google::protobuf::Arena* arena, MediaItem&& from) noexcept
      : MediaItem(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUrlFieldNumber = 1,
    kRelativePathFieldNumber = 3,
    kTypeFieldNumber = 2,
  };
  // string url = 1 [json_name = "url"];
  void clear_url() ;
  const std::string& url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* value);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // string relative_path = 3 [json_name = "relativePath"];
  void clear_relative_path() ;
  const std::string& relative_path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_relative_path(Arg_&& arg, Args_... args);
  std::string* mutable_relative_path();
  PROTOBUF_NODISCARD std::string* release_relative_path();
  void set_allocated_relative_path(std::string* value);

  private:
  const std::string& _internal_relative_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relative_path(
      const std::string& value);
  std::string* _internal_mutable_relative_path();

  public:
  // .anduril.entitymanager.v1.MediaType type = 2 [json_name = "type"];
  void clear_type() ;
  ::anduril::entitymanager::v1::MediaType type() const;
  void set_type(::anduril::entitymanager::v1::MediaType value);

  private:
  ::anduril::entitymanager::v1::MediaType _internal_type() const;
  void _internal_set_type(::anduril::entitymanager::v1::MediaType value);

  public:
  // @@protoc_insertion_point(class_scope:anduril.entitymanager.v1.MediaItem)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      59, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MediaItem& from_msg);
    ::google::protobuf::internal::ArenaStringPtr url_;
    ::google::protobuf::internal::ArenaStringPtr relative_path_;
    int type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fentitymanager_2fv1_2fmedia_2epub_2eproto;
};
// -------------------------------------------------------------------

class Media final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.entitymanager.v1.Media) */ {
 public:
  inline Media() : Media(nullptr) {}
  ~Media() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Media* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Media));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Media(
      ::google::protobuf::internal::ConstantInitialized);

  inline Media(const Media& from) : Media(nullptr, from) {}
  inline Media(Media&& from) noexcept
      : Media(nullptr, std::move(from)) {}
  inline Media& operator=(const Media& from) {
    CopyFrom(from);
    return *this;
  }
  inline Media& operator=(Media&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Media& default_instance() {
    return *internal_default_instance();
  }
  static inline const Media* internal_default_instance() {
    return reinterpret_cast<const Media*>(
        &_Media_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Media& a, Media& b) { a.Swap(&b); }
  inline void Swap(Media* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Media* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Media* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Media>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Media& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Media& from) { Media::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Media* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "anduril.entitymanager.v1.Media"; }

 protected:
  explicit Media(::google::protobuf::Arena* arena);
  Media(::google::protobuf::Arena* arena, const Media& from);
  Media(::google::protobuf::Arena* arena, Media&& from) noexcept
      : Media(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMediaFieldNumber = 1,
  };
  // repeated .anduril.entitymanager.v1.MediaItem media = 1 [json_name = "media", (.anduril.entitymanager.v1.overridable) = true];
  int media_size() const;
  private:
  int _internal_media_size() const;

  public:
  void clear_media() ;
  ::anduril::entitymanager::v1::MediaItem* mutable_media(int index);
  ::google::protobuf::RepeatedPtrField<::anduril::entitymanager::v1::MediaItem>* mutable_media();

  private:
  const ::google::protobuf::RepeatedPtrField<::anduril::entitymanager::v1::MediaItem>& _internal_media() const;
  ::google::protobuf::RepeatedPtrField<::anduril::entitymanager::v1::MediaItem>* _internal_mutable_media();
  public:
  const ::anduril::entitymanager::v1::MediaItem& media(int index) const;
  ::anduril::entitymanager::v1::MediaItem* add_media();
  const ::google::protobuf::RepeatedPtrField<::anduril::entitymanager::v1::MediaItem>& media() const;
  // @@protoc_insertion_point(class_scope:anduril.entitymanager.v1.Media)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Media& from_msg);
    ::google::protobuf::RepeatedPtrField< ::anduril::entitymanager::v1::MediaItem > media_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fentitymanager_2fv1_2fmedia_2epub_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Media

// repeated .anduril.entitymanager.v1.MediaItem media = 1 [json_name = "media", (.anduril.entitymanager.v1.overridable) = true];
inline int Media::_internal_media_size() const {
  return _internal_media().size();
}
inline int Media::media_size() const {
  return _internal_media_size();
}
inline void Media::clear_media() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.media_.Clear();
}
inline ::anduril::entitymanager::v1::MediaItem* Media::mutable_media(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:anduril.entitymanager.v1.Media.media)
  return _internal_mutable_media()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::anduril::entitymanager::v1::MediaItem>* Media::mutable_media()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:anduril.entitymanager.v1.Media.media)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_media();
}
inline const ::anduril::entitymanager::v1::MediaItem& Media::media(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.Media.media)
  return _internal_media().Get(index);
}
inline ::anduril::entitymanager::v1::MediaItem* Media::add_media() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::anduril::entitymanager::v1::MediaItem* _add = _internal_mutable_media()->Add();
  // @@protoc_insertion_point(field_add:anduril.entitymanager.v1.Media.media)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::anduril::entitymanager::v1::MediaItem>& Media::media() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:anduril.entitymanager.v1.Media.media)
  return _internal_media();
}
inline const ::google::protobuf::RepeatedPtrField<::anduril::entitymanager::v1::MediaItem>&
Media::_internal_media() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.media_;
}
inline ::google::protobuf::RepeatedPtrField<::anduril::entitymanager::v1::MediaItem>*
Media::_internal_mutable_media() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.media_;
}

// -------------------------------------------------------------------

// MediaItem

// string url = 1 [json_name = "url"];
inline void MediaItem::clear_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.url_.ClearToEmpty();
}
inline const std::string& MediaItem::url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.MediaItem.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MediaItem::set_url(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:anduril.entitymanager.v1.MediaItem.url)
}
inline std::string* MediaItem::mutable_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:anduril.entitymanager.v1.MediaItem.url)
  return _s;
}
inline const std::string& MediaItem::_internal_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.url_.Get();
}
inline void MediaItem::_internal_set_url(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.url_.Set(value, GetArena());
}
inline std::string* MediaItem::_internal_mutable_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.url_.Mutable( GetArena());
}
inline std::string* MediaItem::release_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.entitymanager.v1.MediaItem.url)
  return _impl_.url_.Release();
}
inline void MediaItem::set_allocated_url(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:anduril.entitymanager.v1.MediaItem.url)
}

// .anduril.entitymanager.v1.MediaType type = 2 [json_name = "type"];
inline void MediaItem::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::anduril::entitymanager::v1::MediaType MediaItem::type() const {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.MediaItem.type)
  return _internal_type();
}
inline void MediaItem::set_type(::anduril::entitymanager::v1::MediaType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:anduril.entitymanager.v1.MediaItem.type)
}
inline ::anduril::entitymanager::v1::MediaType MediaItem::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::anduril::entitymanager::v1::MediaType>(_impl_.type_);
}
inline void MediaItem::_internal_set_type(::anduril::entitymanager::v1::MediaType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// string relative_path = 3 [json_name = "relativePath"];
inline void MediaItem::clear_relative_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.relative_path_.ClearToEmpty();
}
inline const std::string& MediaItem::relative_path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.entitymanager.v1.MediaItem.relative_path)
  return _internal_relative_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MediaItem::set_relative_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.relative_path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:anduril.entitymanager.v1.MediaItem.relative_path)
}
inline std::string* MediaItem::mutable_relative_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_relative_path();
  // @@protoc_insertion_point(field_mutable:anduril.entitymanager.v1.MediaItem.relative_path)
  return _s;
}
inline const std::string& MediaItem::_internal_relative_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.relative_path_.Get();
}
inline void MediaItem::_internal_set_relative_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.relative_path_.Set(value, GetArena());
}
inline std::string* MediaItem::_internal_mutable_relative_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.relative_path_.Mutable( GetArena());
}
inline std::string* MediaItem::release_relative_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.entitymanager.v1.MediaItem.relative_path)
  return _impl_.relative_path_.Release();
}
inline void MediaItem::set_allocated_relative_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.relative_path_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.relative_path_.IsDefault()) {
    _impl_.relative_path_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:anduril.entitymanager.v1.MediaItem.relative_path)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace entitymanager
}  // namespace anduril


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::anduril::entitymanager::v1::MediaType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::anduril::entitymanager::v1::MediaType>() {
  return ::anduril::entitymanager::v1::MediaType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // anduril_2fentitymanager_2fv1_2fmedia_2epub_2eproto_2epb_2eh
