// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: anduril/entitymanager/v1/entity_manager_grpcapi.pub.proto
#ifndef GRPC_anduril_2fentitymanager_2fv1_2fentity_5fmanager_5fgrpcapi_2epub_2eproto__INCLUDED
#define GRPC_anduril_2fentitymanager_2fv1_2fentity_5fmanager_5fgrpcapi_2epub_2eproto__INCLUDED

#include "anduril/entitymanager/v1/entity_manager_grpcapi.pub.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace anduril {
namespace entitymanager {
namespace v1 {

// Entity Manager manages the lifecycle of the entities that comprise the common operational picture (COP).
//
// Every object in the COP is represented as an "Entity." Each Entity is essentially an ID, with a lifecycle
// and a collection of data components. Each data component is a separate protobuf message definition.
//
// Entity Manager provides a way to query the currently live set of entities within a set of filter constraints,
// as well as a limited set of management APIs to change the grouping or relationships between entities.
class EntityManagerAPI final {
 public:
  static constexpr char const* service_full_name() {
    return "anduril.entitymanager.v1.EntityManagerAPI";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Create or update an entity and get a response confirming whether the Entity Manager API succesfully processes
    // the entity. Ideal for testing environments.
    // When publishing an entity, only your integration can modify or delete that entity; other sources, such as the
    // UI or other integrations, can't. If you're pushing entity updates so fast that your publish task can't keep
    // up with your update rate (a rough estimate of >= 1 Hz), use the PublishEntities request instead.
    virtual ::grpc::Status PublishEntity(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::PublishEntityRequest& request, ::anduril::entitymanager::v1::PublishEntityResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::entitymanager::v1::PublishEntityResponse>> AsyncPublishEntity(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::PublishEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::entitymanager::v1::PublishEntityResponse>>(AsyncPublishEntityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::entitymanager::v1::PublishEntityResponse>> PrepareAsyncPublishEntity(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::PublishEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::entitymanager::v1::PublishEntityResponse>>(PrepareAsyncPublishEntityRaw(context, request, cq));
    }
    // Create or update one or more entities rapidly using PublishEntities, which doesn't return error messages
    // for invalid entities or provide server feedback. When publishing entities, only your integration can
    // modify or delete those entities; other sources, such as the UI or other integrations, can't.
    // When you use PublishEntities, you gain higher throughput at the expense of receiving no server responses or
    // validation. In addition, due to gRPC stream mechanics, you risk losing messages queued on the outgoing gRPC
    // buffer if the stream connection is lost prior to the messages being sent. If you need validation responses,
    // are developing in testing environments, or have lower entity update rates, use PublishEntity.
    std::unique_ptr< ::grpc::ClientWriterInterface< ::anduril::entitymanager::v1::PublishEntitiesRequest>> PublishEntities(::grpc::ClientContext* context, ::anduril::entitymanager::v1::PublishEntitiesResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::anduril::entitymanager::v1::PublishEntitiesRequest>>(PublishEntitiesRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::anduril::entitymanager::v1::PublishEntitiesRequest>> AsyncPublishEntities(::grpc::ClientContext* context, ::anduril::entitymanager::v1::PublishEntitiesResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::anduril::entitymanager::v1::PublishEntitiesRequest>>(AsyncPublishEntitiesRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::anduril::entitymanager::v1::PublishEntitiesRequest>> PrepareAsyncPublishEntities(::grpc::ClientContext* context, ::anduril::entitymanager::v1::PublishEntitiesResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::anduril::entitymanager::v1::PublishEntitiesRequest>>(PrepareAsyncPublishEntitiesRaw(context, response, cq));
    }
    // Get an entity using its entityId.
    virtual ::grpc::Status GetEntity(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::GetEntityRequest& request, ::anduril::entitymanager::v1::GetEntityResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::entitymanager::v1::GetEntityResponse>> AsyncGetEntity(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::GetEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::entitymanager::v1::GetEntityResponse>>(AsyncGetEntityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::entitymanager::v1::GetEntityResponse>> PrepareAsyncGetEntity(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::GetEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::entitymanager::v1::GetEntityResponse>>(PrepareAsyncGetEntityRaw(context, request, cq));
    }
    // Override an Entity Component. An override is a definitive change to entity data. Any authorized user of service
    // can override overridable components on any entity. Only fields marked with overridable can be overridden.
    // When setting an override, the user or service setting the override is asserting that they are certain of the change
    // and the truth behind it.
    virtual ::grpc::Status OverrideEntity(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::OverrideEntityRequest& request, ::anduril::entitymanager::v1::OverrideEntityResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::entitymanager::v1::OverrideEntityResponse>> AsyncOverrideEntity(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::OverrideEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::entitymanager::v1::OverrideEntityResponse>>(AsyncOverrideEntityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::entitymanager::v1::OverrideEntityResponse>> PrepareAsyncOverrideEntity(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::OverrideEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::entitymanager::v1::OverrideEntityResponse>>(PrepareAsyncOverrideEntityRaw(context, request, cq));
    }
    // Remove an override for an Entity component.
    virtual ::grpc::Status RemoveEntityOverride(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::RemoveEntityOverrideRequest& request, ::anduril::entitymanager::v1::RemoveEntityOverrideResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::entitymanager::v1::RemoveEntityOverrideResponse>> AsyncRemoveEntityOverride(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::RemoveEntityOverrideRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::entitymanager::v1::RemoveEntityOverrideResponse>>(AsyncRemoveEntityOverrideRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::entitymanager::v1::RemoveEntityOverrideResponse>> PrepareAsyncRemoveEntityOverride(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::RemoveEntityOverrideRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::entitymanager::v1::RemoveEntityOverrideResponse>>(PrepareAsyncRemoveEntityOverrideRaw(context, request, cq));
    }
    // Returns a stream of entities with specified components populated.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::anduril::entitymanager::v1::StreamEntityComponentsResponse>> StreamEntityComponents(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::StreamEntityComponentsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::anduril::entitymanager::v1::StreamEntityComponentsResponse>>(StreamEntityComponentsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::anduril::entitymanager::v1::StreamEntityComponentsResponse>> AsyncStreamEntityComponents(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::StreamEntityComponentsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::anduril::entitymanager::v1::StreamEntityComponentsResponse>>(AsyncStreamEntityComponentsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::anduril::entitymanager::v1::StreamEntityComponentsResponse>> PrepareAsyncStreamEntityComponents(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::StreamEntityComponentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::anduril::entitymanager::v1::StreamEntityComponentsResponse>>(PrepareAsyncStreamEntityComponentsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Create or update an entity and get a response confirming whether the Entity Manager API succesfully processes
      // the entity. Ideal for testing environments.
      // When publishing an entity, only your integration can modify or delete that entity; other sources, such as the
      // UI or other integrations, can't. If you're pushing entity updates so fast that your publish task can't keep
      // up with your update rate (a rough estimate of >= 1 Hz), use the PublishEntities request instead.
      virtual void PublishEntity(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::PublishEntityRequest* request, ::anduril::entitymanager::v1::PublishEntityResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PublishEntity(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::PublishEntityRequest* request, ::anduril::entitymanager::v1::PublishEntityResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Create or update one or more entities rapidly using PublishEntities, which doesn't return error messages
      // for invalid entities or provide server feedback. When publishing entities, only your integration can
      // modify or delete those entities; other sources, such as the UI or other integrations, can't.
      // When you use PublishEntities, you gain higher throughput at the expense of receiving no server responses or
      // validation. In addition, due to gRPC stream mechanics, you risk losing messages queued on the outgoing gRPC
      // buffer if the stream connection is lost prior to the messages being sent. If you need validation responses,
      // are developing in testing environments, or have lower entity update rates, use PublishEntity.
      virtual void PublishEntities(::grpc::ClientContext* context, ::anduril::entitymanager::v1::PublishEntitiesResponse* response, ::grpc::ClientWriteReactor< ::anduril::entitymanager::v1::PublishEntitiesRequest>* reactor) = 0;
      // Get an entity using its entityId.
      virtual void GetEntity(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::GetEntityRequest* request, ::anduril::entitymanager::v1::GetEntityResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetEntity(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::GetEntityRequest* request, ::anduril::entitymanager::v1::GetEntityResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Override an Entity Component. An override is a definitive change to entity data. Any authorized user of service
      // can override overridable components on any entity. Only fields marked with overridable can be overridden.
      // When setting an override, the user or service setting the override is asserting that they are certain of the change
      // and the truth behind it.
      virtual void OverrideEntity(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::OverrideEntityRequest* request, ::anduril::entitymanager::v1::OverrideEntityResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OverrideEntity(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::OverrideEntityRequest* request, ::anduril::entitymanager::v1::OverrideEntityResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Remove an override for an Entity component.
      virtual void RemoveEntityOverride(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::RemoveEntityOverrideRequest* request, ::anduril::entitymanager::v1::RemoveEntityOverrideResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveEntityOverride(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::RemoveEntityOverrideRequest* request, ::anduril::entitymanager::v1::RemoveEntityOverrideResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Returns a stream of entities with specified components populated.
      virtual void StreamEntityComponents(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::StreamEntityComponentsRequest* request, ::grpc::ClientReadReactor< ::anduril::entitymanager::v1::StreamEntityComponentsResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::anduril::entitymanager::v1::PublishEntityResponse>* AsyncPublishEntityRaw(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::PublishEntityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::anduril::entitymanager::v1::PublishEntityResponse>* PrepareAsyncPublishEntityRaw(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::PublishEntityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::anduril::entitymanager::v1::PublishEntitiesRequest>* PublishEntitiesRaw(::grpc::ClientContext* context, ::anduril::entitymanager::v1::PublishEntitiesResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::anduril::entitymanager::v1::PublishEntitiesRequest>* AsyncPublishEntitiesRaw(::grpc::ClientContext* context, ::anduril::entitymanager::v1::PublishEntitiesResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::anduril::entitymanager::v1::PublishEntitiesRequest>* PrepareAsyncPublishEntitiesRaw(::grpc::ClientContext* context, ::anduril::entitymanager::v1::PublishEntitiesResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::anduril::entitymanager::v1::GetEntityResponse>* AsyncGetEntityRaw(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::GetEntityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::anduril::entitymanager::v1::GetEntityResponse>* PrepareAsyncGetEntityRaw(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::GetEntityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::anduril::entitymanager::v1::OverrideEntityResponse>* AsyncOverrideEntityRaw(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::OverrideEntityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::anduril::entitymanager::v1::OverrideEntityResponse>* PrepareAsyncOverrideEntityRaw(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::OverrideEntityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::anduril::entitymanager::v1::RemoveEntityOverrideResponse>* AsyncRemoveEntityOverrideRaw(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::RemoveEntityOverrideRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::anduril::entitymanager::v1::RemoveEntityOverrideResponse>* PrepareAsyncRemoveEntityOverrideRaw(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::RemoveEntityOverrideRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::anduril::entitymanager::v1::StreamEntityComponentsResponse>* StreamEntityComponentsRaw(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::StreamEntityComponentsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::anduril::entitymanager::v1::StreamEntityComponentsResponse>* AsyncStreamEntityComponentsRaw(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::StreamEntityComponentsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::anduril::entitymanager::v1::StreamEntityComponentsResponse>* PrepareAsyncStreamEntityComponentsRaw(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::StreamEntityComponentsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status PublishEntity(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::PublishEntityRequest& request, ::anduril::entitymanager::v1::PublishEntityResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::entitymanager::v1::PublishEntityResponse>> AsyncPublishEntity(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::PublishEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::entitymanager::v1::PublishEntityResponse>>(AsyncPublishEntityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::entitymanager::v1::PublishEntityResponse>> PrepareAsyncPublishEntity(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::PublishEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::entitymanager::v1::PublishEntityResponse>>(PrepareAsyncPublishEntityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::anduril::entitymanager::v1::PublishEntitiesRequest>> PublishEntities(::grpc::ClientContext* context, ::anduril::entitymanager::v1::PublishEntitiesResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::anduril::entitymanager::v1::PublishEntitiesRequest>>(PublishEntitiesRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::anduril::entitymanager::v1::PublishEntitiesRequest>> AsyncPublishEntities(::grpc::ClientContext* context, ::anduril::entitymanager::v1::PublishEntitiesResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::anduril::entitymanager::v1::PublishEntitiesRequest>>(AsyncPublishEntitiesRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::anduril::entitymanager::v1::PublishEntitiesRequest>> PrepareAsyncPublishEntities(::grpc::ClientContext* context, ::anduril::entitymanager::v1::PublishEntitiesResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::anduril::entitymanager::v1::PublishEntitiesRequest>>(PrepareAsyncPublishEntitiesRaw(context, response, cq));
    }
    ::grpc::Status GetEntity(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::GetEntityRequest& request, ::anduril::entitymanager::v1::GetEntityResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::entitymanager::v1::GetEntityResponse>> AsyncGetEntity(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::GetEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::entitymanager::v1::GetEntityResponse>>(AsyncGetEntityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::entitymanager::v1::GetEntityResponse>> PrepareAsyncGetEntity(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::GetEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::entitymanager::v1::GetEntityResponse>>(PrepareAsyncGetEntityRaw(context, request, cq));
    }
    ::grpc::Status OverrideEntity(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::OverrideEntityRequest& request, ::anduril::entitymanager::v1::OverrideEntityResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::entitymanager::v1::OverrideEntityResponse>> AsyncOverrideEntity(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::OverrideEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::entitymanager::v1::OverrideEntityResponse>>(AsyncOverrideEntityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::entitymanager::v1::OverrideEntityResponse>> PrepareAsyncOverrideEntity(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::OverrideEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::entitymanager::v1::OverrideEntityResponse>>(PrepareAsyncOverrideEntityRaw(context, request, cq));
    }
    ::grpc::Status RemoveEntityOverride(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::RemoveEntityOverrideRequest& request, ::anduril::entitymanager::v1::RemoveEntityOverrideResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::entitymanager::v1::RemoveEntityOverrideResponse>> AsyncRemoveEntityOverride(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::RemoveEntityOverrideRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::entitymanager::v1::RemoveEntityOverrideResponse>>(AsyncRemoveEntityOverrideRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::entitymanager::v1::RemoveEntityOverrideResponse>> PrepareAsyncRemoveEntityOverride(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::RemoveEntityOverrideRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::entitymanager::v1::RemoveEntityOverrideResponse>>(PrepareAsyncRemoveEntityOverrideRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::anduril::entitymanager::v1::StreamEntityComponentsResponse>> StreamEntityComponents(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::StreamEntityComponentsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::anduril::entitymanager::v1::StreamEntityComponentsResponse>>(StreamEntityComponentsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::anduril::entitymanager::v1::StreamEntityComponentsResponse>> AsyncStreamEntityComponents(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::StreamEntityComponentsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::anduril::entitymanager::v1::StreamEntityComponentsResponse>>(AsyncStreamEntityComponentsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::anduril::entitymanager::v1::StreamEntityComponentsResponse>> PrepareAsyncStreamEntityComponents(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::StreamEntityComponentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::anduril::entitymanager::v1::StreamEntityComponentsResponse>>(PrepareAsyncStreamEntityComponentsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void PublishEntity(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::PublishEntityRequest* request, ::anduril::entitymanager::v1::PublishEntityResponse* response, std::function<void(::grpc::Status)>) override;
      void PublishEntity(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::PublishEntityRequest* request, ::anduril::entitymanager::v1::PublishEntityResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PublishEntities(::grpc::ClientContext* context, ::anduril::entitymanager::v1::PublishEntitiesResponse* response, ::grpc::ClientWriteReactor< ::anduril::entitymanager::v1::PublishEntitiesRequest>* reactor) override;
      void GetEntity(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::GetEntityRequest* request, ::anduril::entitymanager::v1::GetEntityResponse* response, std::function<void(::grpc::Status)>) override;
      void GetEntity(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::GetEntityRequest* request, ::anduril::entitymanager::v1::GetEntityResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OverrideEntity(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::OverrideEntityRequest* request, ::anduril::entitymanager::v1::OverrideEntityResponse* response, std::function<void(::grpc::Status)>) override;
      void OverrideEntity(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::OverrideEntityRequest* request, ::anduril::entitymanager::v1::OverrideEntityResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RemoveEntityOverride(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::RemoveEntityOverrideRequest* request, ::anduril::entitymanager::v1::RemoveEntityOverrideResponse* response, std::function<void(::grpc::Status)>) override;
      void RemoveEntityOverride(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::RemoveEntityOverrideRequest* request, ::anduril::entitymanager::v1::RemoveEntityOverrideResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamEntityComponents(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::StreamEntityComponentsRequest* request, ::grpc::ClientReadReactor< ::anduril::entitymanager::v1::StreamEntityComponentsResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::anduril::entitymanager::v1::PublishEntityResponse>* AsyncPublishEntityRaw(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::PublishEntityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::anduril::entitymanager::v1::PublishEntityResponse>* PrepareAsyncPublishEntityRaw(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::PublishEntityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::anduril::entitymanager::v1::PublishEntitiesRequest>* PublishEntitiesRaw(::grpc::ClientContext* context, ::anduril::entitymanager::v1::PublishEntitiesResponse* response) override;
    ::grpc::ClientAsyncWriter< ::anduril::entitymanager::v1::PublishEntitiesRequest>* AsyncPublishEntitiesRaw(::grpc::ClientContext* context, ::anduril::entitymanager::v1::PublishEntitiesResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::anduril::entitymanager::v1::PublishEntitiesRequest>* PrepareAsyncPublishEntitiesRaw(::grpc::ClientContext* context, ::anduril::entitymanager::v1::PublishEntitiesResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::anduril::entitymanager::v1::GetEntityResponse>* AsyncGetEntityRaw(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::GetEntityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::anduril::entitymanager::v1::GetEntityResponse>* PrepareAsyncGetEntityRaw(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::GetEntityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::anduril::entitymanager::v1::OverrideEntityResponse>* AsyncOverrideEntityRaw(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::OverrideEntityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::anduril::entitymanager::v1::OverrideEntityResponse>* PrepareAsyncOverrideEntityRaw(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::OverrideEntityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::anduril::entitymanager::v1::RemoveEntityOverrideResponse>* AsyncRemoveEntityOverrideRaw(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::RemoveEntityOverrideRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::anduril::entitymanager::v1::RemoveEntityOverrideResponse>* PrepareAsyncRemoveEntityOverrideRaw(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::RemoveEntityOverrideRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::anduril::entitymanager::v1::StreamEntityComponentsResponse>* StreamEntityComponentsRaw(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::StreamEntityComponentsRequest& request) override;
    ::grpc::ClientAsyncReader< ::anduril::entitymanager::v1::StreamEntityComponentsResponse>* AsyncStreamEntityComponentsRaw(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::StreamEntityComponentsRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::anduril::entitymanager::v1::StreamEntityComponentsResponse>* PrepareAsyncStreamEntityComponentsRaw(::grpc::ClientContext* context, const ::anduril::entitymanager::v1::StreamEntityComponentsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_PublishEntity_;
    const ::grpc::internal::RpcMethod rpcmethod_PublishEntities_;
    const ::grpc::internal::RpcMethod rpcmethod_GetEntity_;
    const ::grpc::internal::RpcMethod rpcmethod_OverrideEntity_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveEntityOverride_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamEntityComponents_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Create or update an entity and get a response confirming whether the Entity Manager API succesfully processes
    // the entity. Ideal for testing environments.
    // When publishing an entity, only your integration can modify or delete that entity; other sources, such as the
    // UI or other integrations, can't. If you're pushing entity updates so fast that your publish task can't keep
    // up with your update rate (a rough estimate of >= 1 Hz), use the PublishEntities request instead.
    virtual ::grpc::Status PublishEntity(::grpc::ServerContext* context, const ::anduril::entitymanager::v1::PublishEntityRequest* request, ::anduril::entitymanager::v1::PublishEntityResponse* response);
    // Create or update one or more entities rapidly using PublishEntities, which doesn't return error messages
    // for invalid entities or provide server feedback. When publishing entities, only your integration can
    // modify or delete those entities; other sources, such as the UI or other integrations, can't.
    // When you use PublishEntities, you gain higher throughput at the expense of receiving no server responses or
    // validation. In addition, due to gRPC stream mechanics, you risk losing messages queued on the outgoing gRPC
    // buffer if the stream connection is lost prior to the messages being sent. If you need validation responses,
    // are developing in testing environments, or have lower entity update rates, use PublishEntity.
    virtual ::grpc::Status PublishEntities(::grpc::ServerContext* context, ::grpc::ServerReader< ::anduril::entitymanager::v1::PublishEntitiesRequest>* reader, ::anduril::entitymanager::v1::PublishEntitiesResponse* response);
    // Get an entity using its entityId.
    virtual ::grpc::Status GetEntity(::grpc::ServerContext* context, const ::anduril::entitymanager::v1::GetEntityRequest* request, ::anduril::entitymanager::v1::GetEntityResponse* response);
    // Override an Entity Component. An override is a definitive change to entity data. Any authorized user of service
    // can override overridable components on any entity. Only fields marked with overridable can be overridden.
    // When setting an override, the user or service setting the override is asserting that they are certain of the change
    // and the truth behind it.
    virtual ::grpc::Status OverrideEntity(::grpc::ServerContext* context, const ::anduril::entitymanager::v1::OverrideEntityRequest* request, ::anduril::entitymanager::v1::OverrideEntityResponse* response);
    // Remove an override for an Entity component.
    virtual ::grpc::Status RemoveEntityOverride(::grpc::ServerContext* context, const ::anduril::entitymanager::v1::RemoveEntityOverrideRequest* request, ::anduril::entitymanager::v1::RemoveEntityOverrideResponse* response);
    // Returns a stream of entities with specified components populated.
    virtual ::grpc::Status StreamEntityComponents(::grpc::ServerContext* context, const ::anduril::entitymanager::v1::StreamEntityComponentsRequest* request, ::grpc::ServerWriter< ::anduril::entitymanager::v1::StreamEntityComponentsResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_PublishEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PublishEntity() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_PublishEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishEntity(::grpc::ServerContext* /*context*/, const ::anduril::entitymanager::v1::PublishEntityRequest* /*request*/, ::anduril::entitymanager::v1::PublishEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublishEntity(::grpc::ServerContext* context, ::anduril::entitymanager::v1::PublishEntityRequest* request, ::grpc::ServerAsyncResponseWriter< ::anduril::entitymanager::v1::PublishEntityResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PublishEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PublishEntities() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PublishEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishEntities(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::anduril::entitymanager::v1::PublishEntitiesRequest>* /*reader*/, ::anduril::entitymanager::v1::PublishEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublishEntities(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::anduril::entitymanager::v1::PublishEntitiesResponse, ::anduril::entitymanager::v1::PublishEntitiesRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetEntity() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEntity(::grpc::ServerContext* /*context*/, const ::anduril::entitymanager::v1::GetEntityRequest* /*request*/, ::anduril::entitymanager::v1::GetEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEntity(::grpc::ServerContext* context, ::anduril::entitymanager::v1::GetEntityRequest* request, ::grpc::ServerAsyncResponseWriter< ::anduril::entitymanager::v1::GetEntityResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OverrideEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OverrideEntity() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_OverrideEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OverrideEntity(::grpc::ServerContext* /*context*/, const ::anduril::entitymanager::v1::OverrideEntityRequest* /*request*/, ::anduril::entitymanager::v1::OverrideEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOverrideEntity(::grpc::ServerContext* context, ::anduril::entitymanager::v1::OverrideEntityRequest* request, ::grpc::ServerAsyncResponseWriter< ::anduril::entitymanager::v1::OverrideEntityResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveEntityOverride : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveEntityOverride() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_RemoveEntityOverride() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveEntityOverride(::grpc::ServerContext* /*context*/, const ::anduril::entitymanager::v1::RemoveEntityOverrideRequest* /*request*/, ::anduril::entitymanager::v1::RemoveEntityOverrideResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveEntityOverride(::grpc::ServerContext* context, ::anduril::entitymanager::v1::RemoveEntityOverrideRequest* request, ::grpc::ServerAsyncResponseWriter< ::anduril::entitymanager::v1::RemoveEntityOverrideResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamEntityComponents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamEntityComponents() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_StreamEntityComponents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamEntityComponents(::grpc::ServerContext* /*context*/, const ::anduril::entitymanager::v1::StreamEntityComponentsRequest* /*request*/, ::grpc::ServerWriter< ::anduril::entitymanager::v1::StreamEntityComponentsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamEntityComponents(::grpc::ServerContext* context, ::anduril::entitymanager::v1::StreamEntityComponentsRequest* request, ::grpc::ServerAsyncWriter< ::anduril::entitymanager::v1::StreamEntityComponentsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_PublishEntity<WithAsyncMethod_PublishEntities<WithAsyncMethod_GetEntity<WithAsyncMethod_OverrideEntity<WithAsyncMethod_RemoveEntityOverride<WithAsyncMethod_StreamEntityComponents<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_PublishEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PublishEntity() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::anduril::entitymanager::v1::PublishEntityRequest, ::anduril::entitymanager::v1::PublishEntityResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::anduril::entitymanager::v1::PublishEntityRequest* request, ::anduril::entitymanager::v1::PublishEntityResponse* response) { return this->PublishEntity(context, request, response); }));}
    void SetMessageAllocatorFor_PublishEntity(
        ::grpc::MessageAllocator< ::anduril::entitymanager::v1::PublishEntityRequest, ::anduril::entitymanager::v1::PublishEntityResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::anduril::entitymanager::v1::PublishEntityRequest, ::anduril::entitymanager::v1::PublishEntityResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PublishEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishEntity(::grpc::ServerContext* /*context*/, const ::anduril::entitymanager::v1::PublishEntityRequest* /*request*/, ::anduril::entitymanager::v1::PublishEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PublishEntity(
      ::grpc::CallbackServerContext* /*context*/, const ::anduril::entitymanager::v1::PublishEntityRequest* /*request*/, ::anduril::entitymanager::v1::PublishEntityResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PublishEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PublishEntities() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::anduril::entitymanager::v1::PublishEntitiesRequest, ::anduril::entitymanager::v1::PublishEntitiesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, ::anduril::entitymanager::v1::PublishEntitiesResponse* response) { return this->PublishEntities(context, response); }));
    }
    ~WithCallbackMethod_PublishEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishEntities(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::anduril::entitymanager::v1::PublishEntitiesRequest>* /*reader*/, ::anduril::entitymanager::v1::PublishEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::anduril::entitymanager::v1::PublishEntitiesRequest>* PublishEntities(
      ::grpc::CallbackServerContext* /*context*/, ::anduril::entitymanager::v1::PublishEntitiesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetEntity() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::anduril::entitymanager::v1::GetEntityRequest, ::anduril::entitymanager::v1::GetEntityResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::anduril::entitymanager::v1::GetEntityRequest* request, ::anduril::entitymanager::v1::GetEntityResponse* response) { return this->GetEntity(context, request, response); }));}
    void SetMessageAllocatorFor_GetEntity(
        ::grpc::MessageAllocator< ::anduril::entitymanager::v1::GetEntityRequest, ::anduril::entitymanager::v1::GetEntityResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::anduril::entitymanager::v1::GetEntityRequest, ::anduril::entitymanager::v1::GetEntityResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEntity(::grpc::ServerContext* /*context*/, const ::anduril::entitymanager::v1::GetEntityRequest* /*request*/, ::anduril::entitymanager::v1::GetEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEntity(
      ::grpc::CallbackServerContext* /*context*/, const ::anduril::entitymanager::v1::GetEntityRequest* /*request*/, ::anduril::entitymanager::v1::GetEntityResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OverrideEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OverrideEntity() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::anduril::entitymanager::v1::OverrideEntityRequest, ::anduril::entitymanager::v1::OverrideEntityResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::anduril::entitymanager::v1::OverrideEntityRequest* request, ::anduril::entitymanager::v1::OverrideEntityResponse* response) { return this->OverrideEntity(context, request, response); }));}
    void SetMessageAllocatorFor_OverrideEntity(
        ::grpc::MessageAllocator< ::anduril::entitymanager::v1::OverrideEntityRequest, ::anduril::entitymanager::v1::OverrideEntityResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::anduril::entitymanager::v1::OverrideEntityRequest, ::anduril::entitymanager::v1::OverrideEntityResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OverrideEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OverrideEntity(::grpc::ServerContext* /*context*/, const ::anduril::entitymanager::v1::OverrideEntityRequest* /*request*/, ::anduril::entitymanager::v1::OverrideEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OverrideEntity(
      ::grpc::CallbackServerContext* /*context*/, const ::anduril::entitymanager::v1::OverrideEntityRequest* /*request*/, ::anduril::entitymanager::v1::OverrideEntityResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RemoveEntityOverride : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RemoveEntityOverride() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::anduril::entitymanager::v1::RemoveEntityOverrideRequest, ::anduril::entitymanager::v1::RemoveEntityOverrideResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::anduril::entitymanager::v1::RemoveEntityOverrideRequest* request, ::anduril::entitymanager::v1::RemoveEntityOverrideResponse* response) { return this->RemoveEntityOverride(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveEntityOverride(
        ::grpc::MessageAllocator< ::anduril::entitymanager::v1::RemoveEntityOverrideRequest, ::anduril::entitymanager::v1::RemoveEntityOverrideResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::anduril::entitymanager::v1::RemoveEntityOverrideRequest, ::anduril::entitymanager::v1::RemoveEntityOverrideResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RemoveEntityOverride() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveEntityOverride(::grpc::ServerContext* /*context*/, const ::anduril::entitymanager::v1::RemoveEntityOverrideRequest* /*request*/, ::anduril::entitymanager::v1::RemoveEntityOverrideResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveEntityOverride(
      ::grpc::CallbackServerContext* /*context*/, const ::anduril::entitymanager::v1::RemoveEntityOverrideRequest* /*request*/, ::anduril::entitymanager::v1::RemoveEntityOverrideResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamEntityComponents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamEntityComponents() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::anduril::entitymanager::v1::StreamEntityComponentsRequest, ::anduril::entitymanager::v1::StreamEntityComponentsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::anduril::entitymanager::v1::StreamEntityComponentsRequest* request) { return this->StreamEntityComponents(context, request); }));
    }
    ~WithCallbackMethod_StreamEntityComponents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamEntityComponents(::grpc::ServerContext* /*context*/, const ::anduril::entitymanager::v1::StreamEntityComponentsRequest* /*request*/, ::grpc::ServerWriter< ::anduril::entitymanager::v1::StreamEntityComponentsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::anduril::entitymanager::v1::StreamEntityComponentsResponse>* StreamEntityComponents(
      ::grpc::CallbackServerContext* /*context*/, const ::anduril::entitymanager::v1::StreamEntityComponentsRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_PublishEntity<WithCallbackMethod_PublishEntities<WithCallbackMethod_GetEntity<WithCallbackMethod_OverrideEntity<WithCallbackMethod_RemoveEntityOverride<WithCallbackMethod_StreamEntityComponents<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_PublishEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PublishEntity() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_PublishEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishEntity(::grpc::ServerContext* /*context*/, const ::anduril::entitymanager::v1::PublishEntityRequest* /*request*/, ::anduril::entitymanager::v1::PublishEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PublishEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PublishEntities() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PublishEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishEntities(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::anduril::entitymanager::v1::PublishEntitiesRequest>* /*reader*/, ::anduril::entitymanager::v1::PublishEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetEntity() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEntity(::grpc::ServerContext* /*context*/, const ::anduril::entitymanager::v1::GetEntityRequest* /*request*/, ::anduril::entitymanager::v1::GetEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OverrideEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OverrideEntity() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_OverrideEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OverrideEntity(::grpc::ServerContext* /*context*/, const ::anduril::entitymanager::v1::OverrideEntityRequest* /*request*/, ::anduril::entitymanager::v1::OverrideEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveEntityOverride : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveEntityOverride() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_RemoveEntityOverride() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveEntityOverride(::grpc::ServerContext* /*context*/, const ::anduril::entitymanager::v1::RemoveEntityOverrideRequest* /*request*/, ::anduril::entitymanager::v1::RemoveEntityOverrideResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamEntityComponents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamEntityComponents() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_StreamEntityComponents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamEntityComponents(::grpc::ServerContext* /*context*/, const ::anduril::entitymanager::v1::StreamEntityComponentsRequest* /*request*/, ::grpc::ServerWriter< ::anduril::entitymanager::v1::StreamEntityComponentsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_PublishEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PublishEntity() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_PublishEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishEntity(::grpc::ServerContext* /*context*/, const ::anduril::entitymanager::v1::PublishEntityRequest* /*request*/, ::anduril::entitymanager::v1::PublishEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublishEntity(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PublishEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PublishEntities() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_PublishEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishEntities(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::anduril::entitymanager::v1::PublishEntitiesRequest>* /*reader*/, ::anduril::entitymanager::v1::PublishEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublishEntities(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetEntity() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEntity(::grpc::ServerContext* /*context*/, const ::anduril::entitymanager::v1::GetEntityRequest* /*request*/, ::anduril::entitymanager::v1::GetEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEntity(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OverrideEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OverrideEntity() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_OverrideEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OverrideEntity(::grpc::ServerContext* /*context*/, const ::anduril::entitymanager::v1::OverrideEntityRequest* /*request*/, ::anduril::entitymanager::v1::OverrideEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOverrideEntity(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveEntityOverride : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveEntityOverride() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_RemoveEntityOverride() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveEntityOverride(::grpc::ServerContext* /*context*/, const ::anduril::entitymanager::v1::RemoveEntityOverrideRequest* /*request*/, ::anduril::entitymanager::v1::RemoveEntityOverrideResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveEntityOverride(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamEntityComponents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamEntityComponents() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_StreamEntityComponents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamEntityComponents(::grpc::ServerContext* /*context*/, const ::anduril::entitymanager::v1::StreamEntityComponentsRequest* /*request*/, ::grpc::ServerWriter< ::anduril::entitymanager::v1::StreamEntityComponentsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamEntityComponents(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PublishEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PublishEntity() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PublishEntity(context, request, response); }));
    }
    ~WithRawCallbackMethod_PublishEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishEntity(::grpc::ServerContext* /*context*/, const ::anduril::entitymanager::v1::PublishEntityRequest* /*request*/, ::anduril::entitymanager::v1::PublishEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PublishEntity(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PublishEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PublishEntities() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->PublishEntities(context, response); }));
    }
    ~WithRawCallbackMethod_PublishEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishEntities(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::anduril::entitymanager::v1::PublishEntitiesRequest>* /*reader*/, ::anduril::entitymanager::v1::PublishEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* PublishEntities(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetEntity() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetEntity(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEntity(::grpc::ServerContext* /*context*/, const ::anduril::entitymanager::v1::GetEntityRequest* /*request*/, ::anduril::entitymanager::v1::GetEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEntity(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OverrideEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OverrideEntity() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OverrideEntity(context, request, response); }));
    }
    ~WithRawCallbackMethod_OverrideEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OverrideEntity(::grpc::ServerContext* /*context*/, const ::anduril::entitymanager::v1::OverrideEntityRequest* /*request*/, ::anduril::entitymanager::v1::OverrideEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OverrideEntity(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RemoveEntityOverride : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RemoveEntityOverride() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveEntityOverride(context, request, response); }));
    }
    ~WithRawCallbackMethod_RemoveEntityOverride() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveEntityOverride(::grpc::ServerContext* /*context*/, const ::anduril::entitymanager::v1::RemoveEntityOverrideRequest* /*request*/, ::anduril::entitymanager::v1::RemoveEntityOverrideResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveEntityOverride(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamEntityComponents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamEntityComponents() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamEntityComponents(context, request); }));
    }
    ~WithRawCallbackMethod_StreamEntityComponents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamEntityComponents(::grpc::ServerContext* /*context*/, const ::anduril::entitymanager::v1::StreamEntityComponentsRequest* /*request*/, ::grpc::ServerWriter< ::anduril::entitymanager::v1::StreamEntityComponentsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamEntityComponents(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PublishEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PublishEntity() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::anduril::entitymanager::v1::PublishEntityRequest, ::anduril::entitymanager::v1::PublishEntityResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::anduril::entitymanager::v1::PublishEntityRequest, ::anduril::entitymanager::v1::PublishEntityResponse>* streamer) {
                       return this->StreamedPublishEntity(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PublishEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PublishEntity(::grpc::ServerContext* /*context*/, const ::anduril::entitymanager::v1::PublishEntityRequest* /*request*/, ::anduril::entitymanager::v1::PublishEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPublishEntity(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::anduril::entitymanager::v1::PublishEntityRequest,::anduril::entitymanager::v1::PublishEntityResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetEntity() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::anduril::entitymanager::v1::GetEntityRequest, ::anduril::entitymanager::v1::GetEntityResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::anduril::entitymanager::v1::GetEntityRequest, ::anduril::entitymanager::v1::GetEntityResponse>* streamer) {
                       return this->StreamedGetEntity(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetEntity(::grpc::ServerContext* /*context*/, const ::anduril::entitymanager::v1::GetEntityRequest* /*request*/, ::anduril::entitymanager::v1::GetEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetEntity(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::anduril::entitymanager::v1::GetEntityRequest,::anduril::entitymanager::v1::GetEntityResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OverrideEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OverrideEntity() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::anduril::entitymanager::v1::OverrideEntityRequest, ::anduril::entitymanager::v1::OverrideEntityResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::anduril::entitymanager::v1::OverrideEntityRequest, ::anduril::entitymanager::v1::OverrideEntityResponse>* streamer) {
                       return this->StreamedOverrideEntity(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OverrideEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OverrideEntity(::grpc::ServerContext* /*context*/, const ::anduril::entitymanager::v1::OverrideEntityRequest* /*request*/, ::anduril::entitymanager::v1::OverrideEntityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOverrideEntity(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::anduril::entitymanager::v1::OverrideEntityRequest,::anduril::entitymanager::v1::OverrideEntityResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveEntityOverride : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveEntityOverride() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::anduril::entitymanager::v1::RemoveEntityOverrideRequest, ::anduril::entitymanager::v1::RemoveEntityOverrideResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::anduril::entitymanager::v1::RemoveEntityOverrideRequest, ::anduril::entitymanager::v1::RemoveEntityOverrideResponse>* streamer) {
                       return this->StreamedRemoveEntityOverride(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveEntityOverride() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveEntityOverride(::grpc::ServerContext* /*context*/, const ::anduril::entitymanager::v1::RemoveEntityOverrideRequest* /*request*/, ::anduril::entitymanager::v1::RemoveEntityOverrideResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveEntityOverride(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::anduril::entitymanager::v1::RemoveEntityOverrideRequest,::anduril::entitymanager::v1::RemoveEntityOverrideResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_PublishEntity<WithStreamedUnaryMethod_GetEntity<WithStreamedUnaryMethod_OverrideEntity<WithStreamedUnaryMethod_RemoveEntityOverride<Service > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamEntityComponents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamEntityComponents() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::anduril::entitymanager::v1::StreamEntityComponentsRequest, ::anduril::entitymanager::v1::StreamEntityComponentsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::anduril::entitymanager::v1::StreamEntityComponentsRequest, ::anduril::entitymanager::v1::StreamEntityComponentsResponse>* streamer) {
                       return this->StreamedStreamEntityComponents(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamEntityComponents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamEntityComponents(::grpc::ServerContext* /*context*/, const ::anduril::entitymanager::v1::StreamEntityComponentsRequest* /*request*/, ::grpc::ServerWriter< ::anduril::entitymanager::v1::StreamEntityComponentsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamEntityComponents(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::anduril::entitymanager::v1::StreamEntityComponentsRequest,::anduril::entitymanager::v1::StreamEntityComponentsResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StreamEntityComponents<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_PublishEntity<WithStreamedUnaryMethod_GetEntity<WithStreamedUnaryMethod_OverrideEntity<WithStreamedUnaryMethod_RemoveEntityOverride<WithSplitStreamingMethod_StreamEntityComponents<Service > > > > > StreamedService;
};

}  // namespace v1
}  // namespace entitymanager
}  // namespace anduril


#endif  // GRPC_anduril_2fentitymanager_2fv1_2fentity_5fmanager_5fgrpcapi_2epub_2eproto__INCLUDED
