// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: anduril/ontology/v1/type.pub.proto
// Protobuf C++ Version: 5.28.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_anduril_2fontology_2fv1_2ftype_2epub_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_anduril_2fontology_2fv1_2ftype_2epub_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_anduril_2fontology_2fv1_2ftype_2epub_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_anduril_2fontology_2fv1_2ftype_2epub_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_anduril_2fontology_2fv1_2ftype_2epub_2eproto;
namespace anduril {
namespace ontology {
namespace v1 {
class ObjectType;
struct ObjectTypeDefaultTypeInternal;
extern ObjectTypeDefaultTypeInternal _ObjectType_default_instance_;
}  // namespace v1
}  // namespace ontology
}  // namespace anduril
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace anduril {
namespace ontology {
namespace v1 {
enum Class : int {
  CLASS_UNKNOWN = 0,
  CLASS_PERSON = 1,
  CLASS_CAR = 2,
  CLASS_ANIMAL = 3,
  CLASS_AIR_VEHICLE = 4,
  CLASS_BICYCLE = 5,
  CLASS_WATER_VEHICLE = 6,
  CLASS_UNKNOWN_VEHICLE = 7,
  CLASS_MISSILE = 8,
  CLASS_UNKNOWN_AIR_VEHICLE = 9,
  CLASS_BIRD = 10,
  CLASS_BACKGROUND = 11,
  Class_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Class_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Class_IsValid(int value);
extern const uint32_t Class_internal_data_[];
constexpr Class Class_MIN = static_cast<Class>(0);
constexpr Class Class_MAX = static_cast<Class>(11);
constexpr int Class_ARRAYSIZE = 11 + 1;
const ::google::protobuf::EnumDescriptor*
Class_descriptor();
template <typename T>
const std::string& Class_Name(T value) {
  static_assert(std::is_same<T, Class>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Class_Name().");
  return Class_Name(static_cast<Class>(value));
}
template <>
inline const std::string& Class_Name(Class value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Class_descriptor,
                                                 0, 11>(
      static_cast<int>(value));
}
inline bool Class_Parse(absl::string_view name, Class* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Class>(
      Class_descriptor(), name, value);
}
enum Disposition : int {
  DISPOSITION_UNKNOWN = 0,
  DISPOSITION_FRIENDLY = 1,
  DISPOSITION_HOSTILE = 2,
  DISPOSITION_SUSPICIOUS = 3,
  DISPOSITION_ASSUMED_FRIENDLY = 4,
  DISPOSITION_NEUTRAL = 5,
  DISPOSITION_PENDING = 6,
  Disposition_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Disposition_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Disposition_IsValid(int value);
extern const uint32_t Disposition_internal_data_[];
constexpr Disposition Disposition_MIN = static_cast<Disposition>(0);
constexpr Disposition Disposition_MAX = static_cast<Disposition>(6);
constexpr int Disposition_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
Disposition_descriptor();
template <typename T>
const std::string& Disposition_Name(T value) {
  static_assert(std::is_same<T, Disposition>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Disposition_Name().");
  return Disposition_Name(static_cast<Disposition>(value));
}
template <>
inline const std::string& Disposition_Name(Disposition value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Disposition_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool Disposition_Parse(absl::string_view name, Disposition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Disposition>(
      Disposition_descriptor(), name, value);
}
enum Environment : int {
  ENVIRONMENT_UNKNOWN = 0,
  ENVIRONMENT_AIR = 1,
  ENVIRONMENT_SURFACE = 2,
  ENVIRONMENT_SUB_SURFACE = 3,
  ENVIRONMENT_LAND = 4,
  ENVIRONMENT_SPACE = 5,
  Environment_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Environment_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Environment_IsValid(int value);
extern const uint32_t Environment_internal_data_[];
constexpr Environment Environment_MIN = static_cast<Environment>(0);
constexpr Environment Environment_MAX = static_cast<Environment>(5);
constexpr int Environment_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
Environment_descriptor();
template <typename T>
const std::string& Environment_Name(T value) {
  static_assert(std::is_same<T, Environment>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Environment_Name().");
  return Environment_Name(static_cast<Environment>(value));
}
template <>
inline const std::string& Environment_Name(Environment value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Environment_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool Environment_Parse(absl::string_view name, Environment* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Environment>(
      Environment_descriptor(), name, value);
}
enum Nationality : int {
  NATIONALITY_INVALID = 0,
  NATIONALITY_ALBANIA = 1,
  NATIONALITY_ALGERIA = 62,
  NATIONALITY_ARGENTINA = 79,
  NATIONALITY_ARMENIA = 2,
  NATIONALITY_AUSTRALIA = 3,
  NATIONALITY_AUSTRIA = 4,
  NATIONALITY_AZERBAIJAN = 5,
  NATIONALITY_BELARUS = 6,
  NATIONALITY_BELGIUM = 7,
  NATIONALITY_BOLIVIA = 106,
  NATIONALITY_BOSNIA_AND_HERZEGOVINA = 8,
  NATIONALITY_BRAZIL = 80,
  NATIONALITY_BULGARIA = 9,
  NATIONALITY_CAMBODIA = 68,
  NATIONALITY_CANADA = 10,
  NATIONALITY_CHILE = 81,
  NATIONALITY_CHINA = 72,
  NATIONALITY_COLOMBIA = 82,
  NATIONALITY_CROATIA = 11,
  NATIONALITY_CUBA = 87,
  NATIONALITY_CYPRUS = 53,
  NATIONALITY_CZECH_REPUBLIC = 12,
  NATIONALITY_DEMOCRATIC_PEOPLES_REPUBLIC_OF_KOREA = 74,
  NATIONALITY_DENMARK = 13,
  NATIONALITY_DOMINICAN_REPUBLIC = 88,
  NATIONALITY_ECUADOR = 107,
  NATIONALITY_EGYPT = 54,
  NATIONALITY_ESTONIA = 14,
  NATIONALITY_ETHIOPIA = 63,
  NATIONALITY_FINLAND = 15,
  NATIONALITY_FRANCE = 16,
  NATIONALITY_GEORGIA = 17,
  NATIONALITY_GERMANY = 18,
  NATIONALITY_GREECE = 19,
  NATIONALITY_GUATEMALA = 108,
  NATIONALITY_GUINEA = 92,
  NATIONALITY_HUNGARY = 20,
  NATIONALITY_ICELAND = 21,
  NATIONALITY_INDIA = 66,
  NATIONALITY_INDONESIA = 103,
  NATIONALITY_INTERNATIONAL_RED_CROSS = 113,
  NATIONALITY_IRAQ = 56,
  NATIONALITY_IRELAND = 22,
  NATIONALITY_ISLAMIC_REPUBLIC_OF_IRAN = 55,
  NATIONALITY_ISRAEL = 57,
  NATIONALITY_ITALY = 23,
  NATIONALITY_JAMAICA = 112,
  NATIONALITY_JAPAN = 76,
  NATIONALITY_JORDAN = 58,
  NATIONALITY_KAZAKHSTAN = 24,
  NATIONALITY_KUWAIT = 90,
  NATIONALITY_KYRGHYZ_REPUBLIC = 25,
  NATIONALITY_LAO_PEOPLES_DEMOCRATIC_REPUBLIC = 69,
  NATIONALITY_LATVIA = 26,
  NATIONALITY_LEBANON = 59,
  NATIONALITY_LIBERIA = 64,
  NATIONALITY_LITHUANIA = 27,
  NATIONALITY_LUXEMBOURG = 28,
  NATIONALITY_MADAGASCAR = 93,
  NATIONALITY_MALAYSIA = 104,
  NATIONALITY_MALTA = 29,
  NATIONALITY_MEXICO = 83,
  NATIONALITY_MOLDOVA = 30,
  NATIONALITY_MONTENEGRO = 31,
  NATIONALITY_MOROCCO = 94,
  NATIONALITY_MYANMAR = 102,
  NATIONALITY_NATO = 32,
  NATIONALITY_NETHERLANDS = 33,
  NATIONALITY_NEW_ZEALAND = 78,
  NATIONALITY_NICARAGUA = 109,
  NATIONALITY_NIGERIA = 95,
  NATIONALITY_NORWAY = 34,
  NATIONALITY_PAKISTAN = 67,
  NATIONALITY_PANAMA = 84,
  NATIONALITY_PARAGUAY = 110,
  NATIONALITY_PERU = 85,
  NATIONALITY_PHILIPPINES = 77,
  NATIONALITY_POLAND = 35,
  NATIONALITY_PORTUGAL = 36,
  NATIONALITY_REPUBLIC_OF_KOREA = 75,
  NATIONALITY_ROMANIA = 37,
  NATIONALITY_RUSSIA = 38,
  NATIONALITY_SAUDI_ARABIA = 60,
  NATIONALITY_SENEGAL = 96,
  NATIONALITY_SERBIA = 39,
  NATIONALITY_SINGAPORE = 105,
  NATIONALITY_SLOVAKIA = 40,
  NATIONALITY_SLOVENIA = 41,
  NATIONALITY_SOUTH_AFRICA = 65,
  NATIONALITY_SPAIN = 42,
  NATIONALITY_SUDAN = 98,
  NATIONALITY_SWEDEN = 43,
  NATIONALITY_SWITZERLAND = 44,
  NATIONALITY_SYRIAN_ARAB_REPUBLIC = 61,
  NATIONALITY_TAIWAN_PROVINCE_OF_CHINA = 73,
  NATIONALITY_TAJIKISTAN = 45,
  NATIONALITY_THAILAND = 70,
  NATIONALITY_THE_FORMER_YUGOSLAV_REPUBLIC_OF_MACEDONIA = 46,
  NATIONALITY_TUNISIA = 100,
  NATIONALITY_TURKEY = 47,
  NATIONALITY_TURKMENISTAN = 48,
  NATIONALITY_UGANDA = 101,
  NATIONALITY_UKRAINE = 49,
  NATIONALITY_UNITED_KINGDOM = 50,
  NATIONALITY_UNITED_NATIONS = 89,
  NATIONALITY_UNITED_REPUBLIC_OF_TANZANIA = 99,
  NATIONALITY_UNITED_STATES_OF_AMERICA = 51,
  NATIONALITY_URUGUAY = 111,
  NATIONALITY_UZBEKISTAN = 52,
  NATIONALITY_VENEZUELA = 86,
  NATIONALITY_VIETNAM = 71,
  NATIONALITY_YEMEN = 91,
  NATIONALITY_ZIMBABWE = 97,
  Nationality_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Nationality_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Nationality_IsValid(int value);
extern const uint32_t Nationality_internal_data_[];
constexpr Nationality Nationality_MIN = static_cast<Nationality>(0);
constexpr Nationality Nationality_MAX = static_cast<Nationality>(113);
constexpr int Nationality_ARRAYSIZE = 113 + 1;
const ::google::protobuf::EnumDescriptor*
Nationality_descriptor();
template <typename T>
const std::string& Nationality_Name(T value) {
  static_assert(std::is_same<T, Nationality>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Nationality_Name().");
  return Nationality_Name(static_cast<Nationality>(value));
}
template <>
inline const std::string& Nationality_Name(Nationality value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Nationality_descriptor,
                                                 0, 113>(
      static_cast<int>(value));
}
inline bool Nationality_Parse(absl::string_view name, Nationality* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Nationality>(
      Nationality_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ObjectType final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.ontology.v1.ObjectType) */ {
 public:
  inline ObjectType() : ObjectType(nullptr) {}
  ~ObjectType() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ObjectType(
      ::google::protobuf::internal::ConstantInitialized);

  inline ObjectType(const ObjectType& from) : ObjectType(nullptr, from) {}
  inline ObjectType(ObjectType&& from) noexcept
      : ObjectType(nullptr, std::move(from)) {}
  inline ObjectType& operator=(const ObjectType& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectType& operator=(ObjectType&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectType& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectType* internal_default_instance() {
    return reinterpret_cast<const ObjectType*>(
        &_ObjectType_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ObjectType& a, ObjectType& b) { a.Swap(&b); }
  inline void Swap(ObjectType* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectType* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectType* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<ObjectType>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ObjectType& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ObjectType& from) { ObjectType::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ObjectType* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "anduril.ontology.v1.ObjectType"; }

 protected:
  explicit ObjectType(::google::protobuf::Arena* arena);
  ObjectType(::google::protobuf::Arena* arena, const ObjectType& from);
  ObjectType(::google::protobuf::Arena* arena, ObjectType&& from) noexcept
      : ObjectType(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kClassFieldNumber = 1,
    kDispositionFieldNumber = 2,
    kEnvironmentFieldNumber = 3,
  };
  // .anduril.ontology.v1.Class class = 1 [json_name = "class"];
  void clear_class_() ;
  ::anduril::ontology::v1::Class class_() const;
  void set_class_(::anduril::ontology::v1::Class value);

  private:
  ::anduril::ontology::v1::Class _internal_class_() const;
  void _internal_set_class_(::anduril::ontology::v1::Class value);

  public:
  // .anduril.ontology.v1.Disposition disposition = 2 [json_name = "disposition"];
  void clear_disposition() ;
  ::anduril::ontology::v1::Disposition disposition() const;
  void set_disposition(::anduril::ontology::v1::Disposition value);

  private:
  ::anduril::ontology::v1::Disposition _internal_disposition() const;
  void _internal_set_disposition(::anduril::ontology::v1::Disposition value);

  public:
  // .anduril.ontology.v1.Environment environment = 3 [json_name = "environment"];
  void clear_environment() ;
  ::anduril::ontology::v1::Environment environment() const;
  void set_environment(::anduril::ontology::v1::Environment value);

  private:
  ::anduril::ontology::v1::Environment _internal_environment() const;
  void _internal_set_environment(::anduril::ontology::v1::Environment value);

  public:
  // @@protoc_insertion_point(class_scope:anduril.ontology.v1.ObjectType)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ObjectType_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ObjectType& from_msg);
    int class__;
    int disposition_;
    int environment_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fontology_2fv1_2ftype_2epub_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ObjectType

// .anduril.ontology.v1.Class class = 1 [json_name = "class"];
inline void ObjectType::clear_class_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class__ = 0;
}
inline ::anduril::ontology::v1::Class ObjectType::class_() const {
  // @@protoc_insertion_point(field_get:anduril.ontology.v1.ObjectType.class)
  return _internal_class_();
}
inline void ObjectType::set_class_(::anduril::ontology::v1::Class value) {
  _internal_set_class_(value);
  // @@protoc_insertion_point(field_set:anduril.ontology.v1.ObjectType.class)
}
inline ::anduril::ontology::v1::Class ObjectType::_internal_class_() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::anduril::ontology::v1::Class>(_impl_.class__);
}
inline void ObjectType::_internal_set_class_(::anduril::ontology::v1::Class value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.class__ = value;
}

// .anduril.ontology.v1.Disposition disposition = 2 [json_name = "disposition"];
inline void ObjectType::clear_disposition() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disposition_ = 0;
}
inline ::anduril::ontology::v1::Disposition ObjectType::disposition() const {
  // @@protoc_insertion_point(field_get:anduril.ontology.v1.ObjectType.disposition)
  return _internal_disposition();
}
inline void ObjectType::set_disposition(::anduril::ontology::v1::Disposition value) {
  _internal_set_disposition(value);
  // @@protoc_insertion_point(field_set:anduril.ontology.v1.ObjectType.disposition)
}
inline ::anduril::ontology::v1::Disposition ObjectType::_internal_disposition() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::anduril::ontology::v1::Disposition>(_impl_.disposition_);
}
inline void ObjectType::_internal_set_disposition(::anduril::ontology::v1::Disposition value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disposition_ = value;
}

// .anduril.ontology.v1.Environment environment = 3 [json_name = "environment"];
inline void ObjectType::clear_environment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.environment_ = 0;
}
inline ::anduril::ontology::v1::Environment ObjectType::environment() const {
  // @@protoc_insertion_point(field_get:anduril.ontology.v1.ObjectType.environment)
  return _internal_environment();
}
inline void ObjectType::set_environment(::anduril::ontology::v1::Environment value) {
  _internal_set_environment(value);
  // @@protoc_insertion_point(field_set:anduril.ontology.v1.ObjectType.environment)
}
inline ::anduril::ontology::v1::Environment ObjectType::_internal_environment() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::anduril::ontology::v1::Environment>(_impl_.environment_);
}
inline void ObjectType::_internal_set_environment(::anduril::ontology::v1::Environment value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.environment_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace ontology
}  // namespace anduril


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::anduril::ontology::v1::Class> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::anduril::ontology::v1::Class>() {
  return ::anduril::ontology::v1::Class_descriptor();
}
template <>
struct is_proto_enum<::anduril::ontology::v1::Disposition> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::anduril::ontology::v1::Disposition>() {
  return ::anduril::ontology::v1::Disposition_descriptor();
}
template <>
struct is_proto_enum<::anduril::ontology::v1::Environment> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::anduril::ontology::v1::Environment>() {
  return ::anduril::ontology::v1::Environment_descriptor();
}
template <>
struct is_proto_enum<::anduril::ontology::v1::Nationality> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::anduril::ontology::v1::Nationality>() {
  return ::anduril::ontology::v1::Nationality_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_anduril_2fontology_2fv1_2ftype_2epub_2eproto_2epb_2eh
