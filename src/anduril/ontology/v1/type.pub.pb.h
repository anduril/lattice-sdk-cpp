// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: anduril/ontology/v1/type.pub.proto
// Protobuf C++ Version: 5.29.0

#ifndef anduril_2fontology_2fv1_2ftype_2epub_2eproto_2epb_2eh
#define anduril_2fontology_2fv1_2ftype_2epub_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_anduril_2fontology_2fv1_2ftype_2epub_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_anduril_2fontology_2fv1_2ftype_2epub_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_anduril_2fontology_2fv1_2ftype_2epub_2eproto;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace anduril {
namespace ontology {
namespace v1 {
enum Disposition : int {
  DISPOSITION_UNKNOWN = 0,
  DISPOSITION_FRIENDLY = 1,
  DISPOSITION_HOSTILE = 2,
  DISPOSITION_SUSPICIOUS = 3,
  DISPOSITION_ASSUMED_FRIENDLY = 4,
  DISPOSITION_NEUTRAL = 5,
  DISPOSITION_PENDING = 6,
  Disposition_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Disposition_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Disposition_IsValid(int value);
extern const uint32_t Disposition_internal_data_[];
constexpr Disposition Disposition_MIN = static_cast<Disposition>(0);
constexpr Disposition Disposition_MAX = static_cast<Disposition>(6);
constexpr int Disposition_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
Disposition_descriptor();
template <typename T>
const std::string& Disposition_Name(T value) {
  static_assert(std::is_same<T, Disposition>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Disposition_Name().");
  return Disposition_Name(static_cast<Disposition>(value));
}
template <>
inline const std::string& Disposition_Name(Disposition value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Disposition_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool Disposition_Parse(absl::string_view name, Disposition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Disposition>(
      Disposition_descriptor(), name, value);
}
enum Environment : int {
  ENVIRONMENT_UNKNOWN = 0,
  ENVIRONMENT_AIR = 1,
  ENVIRONMENT_SURFACE = 2,
  ENVIRONMENT_SUB_SURFACE = 3,
  ENVIRONMENT_LAND = 4,
  ENVIRONMENT_SPACE = 5,
  Environment_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Environment_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Environment_IsValid(int value);
extern const uint32_t Environment_internal_data_[];
constexpr Environment Environment_MIN = static_cast<Environment>(0);
constexpr Environment Environment_MAX = static_cast<Environment>(5);
constexpr int Environment_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
Environment_descriptor();
template <typename T>
const std::string& Environment_Name(T value) {
  static_assert(std::is_same<T, Environment>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Environment_Name().");
  return Environment_Name(static_cast<Environment>(value));
}
template <>
inline const std::string& Environment_Name(Environment value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Environment_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool Environment_Parse(absl::string_view name, Environment* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Environment>(
      Environment_descriptor(), name, value);
}
enum Nationality : int {
  NATIONALITY_INVALID = 0,
  NATIONALITY_ALBANIA = 1,
  NATIONALITY_ALGERIA = 62,
  NATIONALITY_ARGENTINA = 79,
  NATIONALITY_ARMENIA = 2,
  NATIONALITY_AUSTRALIA = 3,
  NATIONALITY_AUSTRIA = 4,
  NATIONALITY_AZERBAIJAN = 5,
  NATIONALITY_BELARUS = 6,
  NATIONALITY_BELGIUM = 7,
  NATIONALITY_BOLIVIA = 106,
  NATIONALITY_BOSNIA_AND_HERZEGOVINA = 8,
  NATIONALITY_BRAZIL = 80,
  NATIONALITY_BULGARIA = 9,
  NATIONALITY_CAMBODIA = 68,
  NATIONALITY_CANADA = 10,
  NATIONALITY_CHILE = 81,
  NATIONALITY_CHINA = 72,
  NATIONALITY_COLOMBIA = 82,
  NATIONALITY_CROATIA = 11,
  NATIONALITY_CUBA = 87,
  NATIONALITY_CYPRUS = 53,
  NATIONALITY_CZECH_REPUBLIC = 12,
  NATIONALITY_DEMOCRATIC_PEOPLES_REPUBLIC_OF_KOREA = 74,
  NATIONALITY_DENMARK = 13,
  NATIONALITY_DOMINICAN_REPUBLIC = 88,
  NATIONALITY_ECUADOR = 107,
  NATIONALITY_EGYPT = 54,
  NATIONALITY_ESTONIA = 14,
  NATIONALITY_ETHIOPIA = 63,
  NATIONALITY_FINLAND = 15,
  NATIONALITY_FRANCE = 16,
  NATIONALITY_GEORGIA = 17,
  NATIONALITY_GERMANY = 18,
  NATIONALITY_GREECE = 19,
  NATIONALITY_GUATEMALA = 108,
  NATIONALITY_GUINEA = 92,
  NATIONALITY_HUNGARY = 20,
  NATIONALITY_ICELAND = 21,
  NATIONALITY_INDIA = 66,
  NATIONALITY_INDONESIA = 103,
  NATIONALITY_INTERNATIONAL_RED_CROSS = 113,
  NATIONALITY_IRAQ = 56,
  NATIONALITY_IRELAND = 22,
  NATIONALITY_ISLAMIC_REPUBLIC_OF_IRAN = 55,
  NATIONALITY_ISRAEL = 57,
  NATIONALITY_ITALY = 23,
  NATIONALITY_JAMAICA = 112,
  NATIONALITY_JAPAN = 76,
  NATIONALITY_JORDAN = 58,
  NATIONALITY_KAZAKHSTAN = 24,
  NATIONALITY_KUWAIT = 90,
  NATIONALITY_KYRGHYZ_REPUBLIC = 25,
  NATIONALITY_LAO_PEOPLES_DEMOCRATIC_REPUBLIC = 69,
  NATIONALITY_LATVIA = 26,
  NATIONALITY_LEBANON = 59,
  NATIONALITY_LIBERIA = 64,
  NATIONALITY_LITHUANIA = 27,
  NATIONALITY_LUXEMBOURG = 28,
  NATIONALITY_MADAGASCAR = 93,
  NATIONALITY_MALAYSIA = 104,
  NATIONALITY_MALTA = 29,
  NATIONALITY_MEXICO = 83,
  NATIONALITY_MOLDOVA = 30,
  NATIONALITY_MONTENEGRO = 31,
  NATIONALITY_MOROCCO = 94,
  NATIONALITY_MYANMAR = 102,
  NATIONALITY_NATO = 32,
  NATIONALITY_NETHERLANDS = 33,
  NATIONALITY_NEW_ZEALAND = 78,
  NATIONALITY_NICARAGUA = 109,
  NATIONALITY_NIGERIA = 95,
  NATIONALITY_NORWAY = 34,
  NATIONALITY_PAKISTAN = 67,
  NATIONALITY_PANAMA = 84,
  NATIONALITY_PARAGUAY = 110,
  NATIONALITY_PERU = 85,
  NATIONALITY_PHILIPPINES = 77,
  NATIONALITY_POLAND = 35,
  NATIONALITY_PORTUGAL = 36,
  NATIONALITY_REPUBLIC_OF_KOREA = 75,
  NATIONALITY_ROMANIA = 37,
  NATIONALITY_RUSSIA = 38,
  NATIONALITY_SAUDI_ARABIA = 60,
  NATIONALITY_SENEGAL = 96,
  NATIONALITY_SERBIA = 39,
  NATIONALITY_SINGAPORE = 105,
  NATIONALITY_SLOVAKIA = 40,
  NATIONALITY_SLOVENIA = 41,
  NATIONALITY_SOUTH_AFRICA = 65,
  NATIONALITY_SPAIN = 42,
  NATIONALITY_SUDAN = 98,
  NATIONALITY_SWEDEN = 43,
  NATIONALITY_SWITZERLAND = 44,
  NATIONALITY_SYRIAN_ARAB_REPUBLIC = 61,
  NATIONALITY_TAIWAN = 73,
  NATIONALITY_TAJIKISTAN = 45,
  NATIONALITY_THAILAND = 70,
  NATIONALITY_THE_FORMER_YUGOSLAV_REPUBLIC_OF_MACEDONIA = 46,
  NATIONALITY_TUNISIA = 100,
  NATIONALITY_TURKEY = 47,
  NATIONALITY_TURKMENISTAN = 48,
  NATIONALITY_UGANDA = 101,
  NATIONALITY_UKRAINE = 49,
  NATIONALITY_UNITED_KINGDOM = 50,
  NATIONALITY_UNITED_NATIONS = 89,
  NATIONALITY_UNITED_REPUBLIC_OF_TANZANIA = 99,
  NATIONALITY_UNITED_STATES_OF_AMERICA = 51,
  NATIONALITY_URUGUAY = 111,
  NATIONALITY_UZBEKISTAN = 52,
  NATIONALITY_VENEZUELA = 86,
  NATIONALITY_VIETNAM = 71,
  NATIONALITY_YEMEN = 91,
  NATIONALITY_ZIMBABWE = 97,
  Nationality_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Nationality_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Nationality_IsValid(int value);
extern const uint32_t Nationality_internal_data_[];
constexpr Nationality Nationality_MIN = static_cast<Nationality>(0);
constexpr Nationality Nationality_MAX = static_cast<Nationality>(113);
constexpr int Nationality_ARRAYSIZE = 113 + 1;
const ::google::protobuf::EnumDescriptor*
Nationality_descriptor();
template <typename T>
const std::string& Nationality_Name(T value) {
  static_assert(std::is_same<T, Nationality>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Nationality_Name().");
  return Nationality_Name(static_cast<Nationality>(value));
}
template <>
inline const std::string& Nationality_Name(Nationality value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Nationality_descriptor,
                                                 0, 113>(
      static_cast<int>(value));
}
inline bool Nationality_Parse(absl::string_view name, Nationality* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Nationality>(
      Nationality_descriptor(), name, value);
}

// ===================================================================



// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace ontology
}  // namespace anduril


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::anduril::ontology::v1::Disposition> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::anduril::ontology::v1::Disposition>() {
  return ::anduril::ontology::v1::Disposition_descriptor();
}
template <>
struct is_proto_enum<::anduril::ontology::v1::Environment> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::anduril::ontology::v1::Environment>() {
  return ::anduril::ontology::v1::Environment_descriptor();
}
template <>
struct is_proto_enum<::anduril::ontology::v1::Nationality> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::anduril::ontology::v1::Nationality>() {
  return ::anduril::ontology::v1::Nationality_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // anduril_2fontology_2fv1_2ftype_2epub_2eproto_2epb_2eh
