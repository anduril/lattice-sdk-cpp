// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: anduril/auth/v2/tokens.pub.proto

#include "anduril/auth/v2/tokens.pub.pb.h"
#include "anduril/auth/v2/tokens.pub.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace anduril {
namespace auth {
namespace v2 {

static const char* Tokens_method_names[] = {
  "/anduril.auth.v2.Tokens/RefreshOidcTokens",
};

std::unique_ptr< Tokens::Stub> Tokens::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Tokens::Stub> stub(new Tokens::Stub(channel, options));
  return stub;
}

Tokens::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RefreshOidcTokens_(Tokens_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Tokens::Stub::RefreshOidcTokens(::grpc::ClientContext* context, const ::anduril::auth::v2::RefreshOidcTokensRequest& request, ::anduril::auth::v2::RefreshOidcTokensResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::anduril::auth::v2::RefreshOidcTokensRequest, ::anduril::auth::v2::RefreshOidcTokensResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RefreshOidcTokens_, context, request, response);
}

void Tokens::Stub::async::RefreshOidcTokens(::grpc::ClientContext* context, const ::anduril::auth::v2::RefreshOidcTokensRequest* request, ::anduril::auth::v2::RefreshOidcTokensResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::anduril::auth::v2::RefreshOidcTokensRequest, ::anduril::auth::v2::RefreshOidcTokensResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RefreshOidcTokens_, context, request, response, std::move(f));
}

void Tokens::Stub::async::RefreshOidcTokens(::grpc::ClientContext* context, const ::anduril::auth::v2::RefreshOidcTokensRequest* request, ::anduril::auth::v2::RefreshOidcTokensResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RefreshOidcTokens_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::anduril::auth::v2::RefreshOidcTokensResponse>* Tokens::Stub::PrepareAsyncRefreshOidcTokensRaw(::grpc::ClientContext* context, const ::anduril::auth::v2::RefreshOidcTokensRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::anduril::auth::v2::RefreshOidcTokensResponse, ::anduril::auth::v2::RefreshOidcTokensRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RefreshOidcTokens_, context, request);
}

::grpc::ClientAsyncResponseReader< ::anduril::auth::v2::RefreshOidcTokensResponse>* Tokens::Stub::AsyncRefreshOidcTokensRaw(::grpc::ClientContext* context, const ::anduril::auth::v2::RefreshOidcTokensRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRefreshOidcTokensRaw(context, request, cq);
  result->StartCall();
  return result;
}

Tokens::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tokens_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tokens::Service, ::anduril::auth::v2::RefreshOidcTokensRequest, ::anduril::auth::v2::RefreshOidcTokensResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Tokens::Service* service,
             ::grpc::ServerContext* ctx,
             const ::anduril::auth::v2::RefreshOidcTokensRequest* req,
             ::anduril::auth::v2::RefreshOidcTokensResponse* resp) {
               return service->RefreshOidcTokens(ctx, req, resp);
             }, this)));
}

Tokens::Service::~Service() {
}

::grpc::Status Tokens::Service::RefreshOidcTokens(::grpc::ServerContext* context, const ::anduril::auth::v2::RefreshOidcTokensRequest* request, ::anduril::auth::v2::RefreshOidcTokensResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace anduril
}  // namespace auth
}  // namespace v2

