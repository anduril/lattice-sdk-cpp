// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: anduril/taskmanager/v1/task_api.pub.proto
// Protobuf C++ Version: 5.29.0

#ifndef anduril_2ftaskmanager_2fv1_2ftask_5fapi_2epub_2eproto_2epb_2eh
#define anduril_2ftaskmanager_2fv1_2ftask_5fapi_2epub_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "anduril/taskmanager/v1/task.pub.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_anduril_2ftaskmanager_2fv1_2ftask_5fapi_2epub_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_anduril_2ftaskmanager_2fv1_2ftask_5fapi_2epub_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_5fapi_2epub_2eproto;
namespace anduril {
namespace taskmanager {
namespace v1 {
class CancelRequest;
struct CancelRequestDefaultTypeInternal;
extern CancelRequestDefaultTypeInternal _CancelRequest_default_instance_;
class CompleteRequest;
struct CompleteRequestDefaultTypeInternal;
extern CompleteRequestDefaultTypeInternal _CompleteRequest_default_instance_;
class ExecuteRequest;
struct ExecuteRequestDefaultTypeInternal;
extern ExecuteRequestDefaultTypeInternal _ExecuteRequest_default_instance_;
}  // namespace v1
}  // namespace taskmanager
}  // namespace anduril
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace anduril {
namespace taskmanager {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class CompleteRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.taskmanager.v1.CompleteRequest) */ {
 public:
  inline CompleteRequest() : CompleteRequest(nullptr) {}
  ~CompleteRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CompleteRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CompleteRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CompleteRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline CompleteRequest(const CompleteRequest& from) : CompleteRequest(nullptr, from) {}
  inline CompleteRequest(CompleteRequest&& from) noexcept
      : CompleteRequest(nullptr, std::move(from)) {}
  inline CompleteRequest& operator=(const CompleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompleteRequest& operator=(CompleteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompleteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompleteRequest* internal_default_instance() {
    return reinterpret_cast<const CompleteRequest*>(
        &_CompleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(CompleteRequest& a, CompleteRequest& b) { a.Swap(&b); }
  inline void Swap(CompleteRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompleteRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompleteRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CompleteRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CompleteRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CompleteRequest& from) { CompleteRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CompleteRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "anduril.taskmanager.v1.CompleteRequest"; }

 protected:
  explicit CompleteRequest(::google::protobuf::Arena* arena);
  CompleteRequest(::google::protobuf::Arena* arena, const CompleteRequest& from);
  CompleteRequest(::google::protobuf::Arena* arena, CompleteRequest&& from) noexcept
      : CompleteRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTaskIdFieldNumber = 1,
  };
  // string task_id = 1 [json_name = "taskId"];
  void clear_task_id() ;
  const std::string& task_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_task_id(Arg_&& arg, Args_... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* value);

  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(
      const std::string& value);
  std::string* _internal_mutable_task_id();

  public:
  // @@protoc_insertion_point(class_scope:anduril.taskmanager.v1.CompleteRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      54, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CompleteRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr task_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2ftaskmanager_2fv1_2ftask_5fapi_2epub_2eproto;
};
// -------------------------------------------------------------------

class CancelRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.taskmanager.v1.CancelRequest) */ {
 public:
  inline CancelRequest() : CancelRequest(nullptr) {}
  ~CancelRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CancelRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CancelRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CancelRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline CancelRequest(const CancelRequest& from) : CancelRequest(nullptr, from) {}
  inline CancelRequest(CancelRequest&& from) noexcept
      : CancelRequest(nullptr, std::move(from)) {}
  inline CancelRequest& operator=(const CancelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelRequest& operator=(CancelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelRequest* internal_default_instance() {
    return reinterpret_cast<const CancelRequest*>(
        &_CancelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(CancelRequest& a, CancelRequest& b) { a.Swap(&b); }
  inline void Swap(CancelRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CancelRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CancelRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CancelRequest& from) { CancelRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CancelRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "anduril.taskmanager.v1.CancelRequest"; }

 protected:
  explicit CancelRequest(::google::protobuf::Arena* arena);
  CancelRequest(::google::protobuf::Arena* arena, const CancelRequest& from);
  CancelRequest(::google::protobuf::Arena* arena, CancelRequest&& from) noexcept
      : CancelRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTaskIdFieldNumber = 1,
    kAssigneeFieldNumber = 2,
  };
  // string task_id = 1 [json_name = "taskId"];
  void clear_task_id() ;
  const std::string& task_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_task_id(Arg_&& arg, Args_... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* value);

  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(
      const std::string& value);
  std::string* _internal_mutable_task_id();

  public:
  // .anduril.taskmanager.v1.Principal assignee = 2 [json_name = "assignee"];
  bool has_assignee() const;
  void clear_assignee() ;
  const ::anduril::taskmanager::v1::Principal& assignee() const;
  PROTOBUF_NODISCARD ::anduril::taskmanager::v1::Principal* release_assignee();
  ::anduril::taskmanager::v1::Principal* mutable_assignee();
  void set_allocated_assignee(::anduril::taskmanager::v1::Principal* value);
  void unsafe_arena_set_allocated_assignee(::anduril::taskmanager::v1::Principal* value);
  ::anduril::taskmanager::v1::Principal* unsafe_arena_release_assignee();

  private:
  const ::anduril::taskmanager::v1::Principal& _internal_assignee() const;
  ::anduril::taskmanager::v1::Principal* _internal_mutable_assignee();

  public:
  // @@protoc_insertion_point(class_scope:anduril.taskmanager.v1.CancelRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      52, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CancelRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr task_id_;
    ::anduril::taskmanager::v1::Principal* assignee_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2ftaskmanager_2fv1_2ftask_5fapi_2epub_2eproto;
};
// -------------------------------------------------------------------

class ExecuteRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.taskmanager.v1.ExecuteRequest) */ {
 public:
  inline ExecuteRequest() : ExecuteRequest(nullptr) {}
  ~ExecuteRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ExecuteRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ExecuteRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ExecuteRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ExecuteRequest(const ExecuteRequest& from) : ExecuteRequest(nullptr, from) {}
  inline ExecuteRequest(ExecuteRequest&& from) noexcept
      : ExecuteRequest(nullptr, std::move(from)) {}
  inline ExecuteRequest& operator=(const ExecuteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteRequest& operator=(ExecuteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExecuteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecuteRequest* internal_default_instance() {
    return reinterpret_cast<const ExecuteRequest*>(
        &_ExecuteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ExecuteRequest& a, ExecuteRequest& b) { a.Swap(&b); }
  inline void Swap(ExecuteRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecuteRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExecuteRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ExecuteRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ExecuteRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ExecuteRequest& from) { ExecuteRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ExecuteRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "anduril.taskmanager.v1.ExecuteRequest"; }

 protected:
  explicit ExecuteRequest(::google::protobuf::Arena* arena);
  ExecuteRequest(::google::protobuf::Arena* arena, const ExecuteRequest& from);
  ExecuteRequest(::google::protobuf::Arena* arena, ExecuteRequest&& from) noexcept
      : ExecuteRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTaskFieldNumber = 1,
  };
  // .anduril.taskmanager.v1.Task task = 1 [json_name = "task"];
  bool has_task() const;
  void clear_task() ;
  const ::anduril::taskmanager::v1::Task& task() const;
  PROTOBUF_NODISCARD ::anduril::taskmanager::v1::Task* release_task();
  ::anduril::taskmanager::v1::Task* mutable_task();
  void set_allocated_task(::anduril::taskmanager::v1::Task* value);
  void unsafe_arena_set_allocated_task(::anduril::taskmanager::v1::Task* value);
  ::anduril::taskmanager::v1::Task* unsafe_arena_release_task();

  private:
  const ::anduril::taskmanager::v1::Task& _internal_task() const;
  ::anduril::taskmanager::v1::Task* _internal_mutable_task();

  public:
  // @@protoc_insertion_point(class_scope:anduril.taskmanager.v1.ExecuteRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ExecuteRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::anduril::taskmanager::v1::Task* task_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2ftaskmanager_2fv1_2ftask_5fapi_2epub_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ExecuteRequest

// .anduril.taskmanager.v1.Task task = 1 [json_name = "task"];
inline bool ExecuteRequest::has_task() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.task_ != nullptr);
  return value;
}
inline const ::anduril::taskmanager::v1::Task& ExecuteRequest::_internal_task() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::anduril::taskmanager::v1::Task* p = _impl_.task_;
  return p != nullptr ? *p : reinterpret_cast<const ::anduril::taskmanager::v1::Task&>(::anduril::taskmanager::v1::_Task_default_instance_);
}
inline const ::anduril::taskmanager::v1::Task& ExecuteRequest::task() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.taskmanager.v1.ExecuteRequest.task)
  return _internal_task();
}
inline void ExecuteRequest::unsafe_arena_set_allocated_task(::anduril::taskmanager::v1::Task* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.task_);
  }
  _impl_.task_ = reinterpret_cast<::anduril::taskmanager::v1::Task*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.taskmanager.v1.ExecuteRequest.task)
}
inline ::anduril::taskmanager::v1::Task* ExecuteRequest::release_task() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::taskmanager::v1::Task* released = _impl_.task_;
  _impl_.task_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::anduril::taskmanager::v1::Task* ExecuteRequest::unsafe_arena_release_task() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.taskmanager.v1.ExecuteRequest.task)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::taskmanager::v1::Task* temp = _impl_.task_;
  _impl_.task_ = nullptr;
  return temp;
}
inline ::anduril::taskmanager::v1::Task* ExecuteRequest::_internal_mutable_task() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.task_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::anduril::taskmanager::v1::Task>(GetArena());
    _impl_.task_ = reinterpret_cast<::anduril::taskmanager::v1::Task*>(p);
  }
  return _impl_.task_;
}
inline ::anduril::taskmanager::v1::Task* ExecuteRequest::mutable_task() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::anduril::taskmanager::v1::Task* _msg = _internal_mutable_task();
  // @@protoc_insertion_point(field_mutable:anduril.taskmanager.v1.ExecuteRequest.task)
  return _msg;
}
inline void ExecuteRequest::set_allocated_task(::anduril::taskmanager::v1::Task* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.task_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.task_ = reinterpret_cast<::anduril::taskmanager::v1::Task*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.taskmanager.v1.ExecuteRequest.task)
}

// -------------------------------------------------------------------

// CancelRequest

// string task_id = 1 [json_name = "taskId"];
inline void CancelRequest::clear_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.ClearToEmpty();
}
inline const std::string& CancelRequest::task_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.taskmanager.v1.CancelRequest.task_id)
  return _internal_task_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CancelRequest::set_task_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:anduril.taskmanager.v1.CancelRequest.task_id)
}
inline std::string* CancelRequest::mutable_task_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:anduril.taskmanager.v1.CancelRequest.task_id)
  return _s;
}
inline const std::string& CancelRequest::_internal_task_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.task_id_.Get();
}
inline void CancelRequest::_internal_set_task_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.Set(value, GetArena());
}
inline std::string* CancelRequest::_internal_mutable_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.task_id_.Mutable( GetArena());
}
inline std::string* CancelRequest::release_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.taskmanager.v1.CancelRequest.task_id)
  return _impl_.task_id_.Release();
}
inline void CancelRequest::set_allocated_task_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.task_id_.IsDefault()) {
    _impl_.task_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:anduril.taskmanager.v1.CancelRequest.task_id)
}

// .anduril.taskmanager.v1.Principal assignee = 2 [json_name = "assignee"];
inline bool CancelRequest::has_assignee() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.assignee_ != nullptr);
  return value;
}
inline const ::anduril::taskmanager::v1::Principal& CancelRequest::_internal_assignee() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::anduril::taskmanager::v1::Principal* p = _impl_.assignee_;
  return p != nullptr ? *p : reinterpret_cast<const ::anduril::taskmanager::v1::Principal&>(::anduril::taskmanager::v1::_Principal_default_instance_);
}
inline const ::anduril::taskmanager::v1::Principal& CancelRequest::assignee() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.taskmanager.v1.CancelRequest.assignee)
  return _internal_assignee();
}
inline void CancelRequest::unsafe_arena_set_allocated_assignee(::anduril::taskmanager::v1::Principal* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.assignee_);
  }
  _impl_.assignee_ = reinterpret_cast<::anduril::taskmanager::v1::Principal*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.taskmanager.v1.CancelRequest.assignee)
}
inline ::anduril::taskmanager::v1::Principal* CancelRequest::release_assignee() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::taskmanager::v1::Principal* released = _impl_.assignee_;
  _impl_.assignee_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::anduril::taskmanager::v1::Principal* CancelRequest::unsafe_arena_release_assignee() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.taskmanager.v1.CancelRequest.assignee)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::taskmanager::v1::Principal* temp = _impl_.assignee_;
  _impl_.assignee_ = nullptr;
  return temp;
}
inline ::anduril::taskmanager::v1::Principal* CancelRequest::_internal_mutable_assignee() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.assignee_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::anduril::taskmanager::v1::Principal>(GetArena());
    _impl_.assignee_ = reinterpret_cast<::anduril::taskmanager::v1::Principal*>(p);
  }
  return _impl_.assignee_;
}
inline ::anduril::taskmanager::v1::Principal* CancelRequest::mutable_assignee() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::anduril::taskmanager::v1::Principal* _msg = _internal_mutable_assignee();
  // @@protoc_insertion_point(field_mutable:anduril.taskmanager.v1.CancelRequest.assignee)
  return _msg;
}
inline void CancelRequest::set_allocated_assignee(::anduril::taskmanager::v1::Principal* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.assignee_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.assignee_ = reinterpret_cast<::anduril::taskmanager::v1::Principal*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.taskmanager.v1.CancelRequest.assignee)
}

// -------------------------------------------------------------------

// CompleteRequest

// string task_id = 1 [json_name = "taskId"];
inline void CompleteRequest::clear_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.ClearToEmpty();
}
inline const std::string& CompleteRequest::task_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.taskmanager.v1.CompleteRequest.task_id)
  return _internal_task_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CompleteRequest::set_task_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:anduril.taskmanager.v1.CompleteRequest.task_id)
}
inline std::string* CompleteRequest::mutable_task_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:anduril.taskmanager.v1.CompleteRequest.task_id)
  return _s;
}
inline const std::string& CompleteRequest::_internal_task_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.task_id_.Get();
}
inline void CompleteRequest::_internal_set_task_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.Set(value, GetArena());
}
inline std::string* CompleteRequest::_internal_mutable_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.task_id_.Mutable( GetArena());
}
inline std::string* CompleteRequest::release_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.taskmanager.v1.CompleteRequest.task_id)
  return _impl_.task_id_.Release();
}
inline void CompleteRequest::set_allocated_task_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.task_id_.IsDefault()) {
    _impl_.task_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:anduril.taskmanager.v1.CompleteRequest.task_id)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace taskmanager
}  // namespace anduril


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // anduril_2ftaskmanager_2fv1_2ftask_5fapi_2epub_2eproto_2epb_2eh
