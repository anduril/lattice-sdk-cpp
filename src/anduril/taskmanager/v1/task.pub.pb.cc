// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: anduril/taskmanager/v1/task.pub.proto

#include "anduril/taskmanager/v1/task.pub.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace anduril {
namespace taskmanager {
namespace v1 {

inline constexpr User::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : user_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR User::User(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct UserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserDefaultTypeInternal() {}
  union {
    User _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserDefaultTypeInternal _User_default_instance_;

inline constexpr TaskVersion::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : task_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        definition_version_{0u},
        status_version_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TaskVersion::TaskVersion(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TaskVersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskVersionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskVersionDefaultTypeInternal() {}
  union {
    TaskVersion _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskVersionDefaultTypeInternal _TaskVersion_default_instance_;

inline constexpr TaskError::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        code_{static_cast< ::anduril::taskmanager::v1::ErrorCode >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TaskError::TaskError(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TaskErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskErrorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskErrorDefaultTypeInternal() {}
  union {
    TaskError _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskErrorDefaultTypeInternal _TaskError_default_instance_;

inline constexpr System::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : service_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        entity_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        asset_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        manages_own_scheduling_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR System::System(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SystemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemDefaultTypeInternal() {}
  union {
    System _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemDefaultTypeInternal _System_default_instance_;

inline constexpr Owner::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : asset_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        entity_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Owner::Owner(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct OwnerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OwnerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OwnerDefaultTypeInternal() {}
  union {
    Owner _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OwnerDefaultTypeInternal _Owner_default_instance_;

inline constexpr Agent::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : asset_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        entity_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Agent::Agent(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AgentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AgentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AgentDefaultTypeInternal() {}
  union {
    Agent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AgentDefaultTypeInternal _Agent_default_instance_;

inline constexpr Team::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : members_{},
        entity_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Team::Team(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TeamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeamDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeamDefaultTypeInternal() {}
  union {
    Team _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeamDefaultTypeInternal _Team_default_instance_;

inline constexpr Replication::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        stale_time_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Replication::Replication(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ReplicationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReplicationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReplicationDefaultTypeInternal() {}
  union {
    Replication _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReplicationDefaultTypeInternal _Replication_default_instance_;

inline constexpr Allocation::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : active_agents_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Allocation::Allocation(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AllocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllocationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllocationDefaultTypeInternal() {}
  union {
    Allocation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllocationDefaultTypeInternal _Allocation_default_instance_;

inline constexpr TaskStatus::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        task_error_{nullptr},
        progress_{nullptr},
        result_{nullptr},
        start_time_{nullptr},
        estimate_{nullptr},
        allocation_{nullptr},
        status_{static_cast< ::anduril::taskmanager::v1::Status >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR TaskStatus::TaskStatus(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TaskStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskStatusDefaultTypeInternal() {}
  union {
    TaskStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskStatusDefaultTypeInternal _TaskStatus_default_instance_;

inline constexpr Principal::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        on_behalf_of_{nullptr},
        agent_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Principal::Principal(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PrincipalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrincipalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrincipalDefaultTypeInternal() {}
  union {
    Principal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrincipalDefaultTypeInternal _Principal_default_instance_;

inline constexpr StatusUpdate::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        version_{nullptr},
        status_{nullptr},
        author_{nullptr},
        scheduled_time_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR StatusUpdate::StatusUpdate(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct StatusUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusUpdateDefaultTypeInternal() {}
  union {
    StatusUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusUpdateDefaultTypeInternal _StatusUpdate_default_instance_;

inline constexpr Relations::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        parent_task_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        assignee_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Relations::Relations(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RelationsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelationsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelationsDefaultTypeInternal() {}
  union {
    Relations _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelationsDefaultTypeInternal _Relations_default_instance_;

inline constexpr TaskEntity::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        entity_{nullptr},
        snapshot_{false} {}

template <typename>
PROTOBUF_CONSTEXPR TaskEntity::TaskEntity(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TaskEntityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskEntityDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskEntityDefaultTypeInternal() {}
  union {
    TaskEntity _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskEntityDefaultTypeInternal _TaskEntity_default_instance_;

inline constexpr Task::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        initial_entities_{},
        display_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        version_{nullptr},
        specification_{nullptr},
        last_updated_by_{nullptr},
        status_{nullptr},
        scheduled_time_{nullptr},
        relations_{nullptr},
        last_update_time_{nullptr},
        owner_{nullptr},
        create_time_{nullptr},
        replication_{nullptr},
        created_by_{nullptr},
        is_executed_elsewhere_{false} {}

template <typename>
PROTOBUF_CONSTEXPR Task::Task(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskDefaultTypeInternal() {}
  union {
    Task _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskDefaultTypeInternal _Task_default_instance_;

inline constexpr TaskEvent::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        task_{nullptr},
        time_{nullptr},
        event_type_{static_cast< ::anduril::taskmanager::v1::EventType >(0)},
        task_view_{static_cast< ::anduril::taskmanager::v1::TaskView >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR TaskEvent::TaskEvent(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TaskEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskEventDefaultTypeInternal() {}
  union {
    TaskEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskEventDefaultTypeInternal _TaskEvent_default_instance_;

inline constexpr DefinitionUpdate::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        task_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR DefinitionUpdate::DefinitionUpdate(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DefinitionUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DefinitionUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DefinitionUpdateDefaultTypeInternal() {}
  union {
    DefinitionUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DefinitionUpdateDefaultTypeInternal _DefinitionUpdate_default_instance_;
}  // namespace v1
}  // namespace taskmanager
}  // namespace anduril
static ::_pb::Metadata file_level_metadata_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto[17];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto[4];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto = nullptr;
const ::uint32_t TableStruct_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Task, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Task, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Task, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Task, _impl_.display_name_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Task, _impl_.specification_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Task, _impl_.created_by_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Task, _impl_.last_updated_by_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Task, _impl_.last_update_time_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Task, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Task, _impl_.scheduled_time_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Task, _impl_.relations_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Task, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Task, _impl_.is_executed_elsewhere_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Task, _impl_.create_time_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Task, _impl_.replication_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Task, _impl_.initial_entities_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Task, _impl_.owner_),
    0,
    ~0u,
    1,
    10,
    2,
    6,
    3,
    4,
    5,
    ~0u,
    ~0u,
    8,
    9,
    ~0u,
    7,
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::TaskStatus, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::TaskStatus, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::TaskStatus, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::TaskStatus, _impl_.task_error_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::TaskStatus, _impl_.progress_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::TaskStatus, _impl_.result_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::TaskStatus, _impl_.start_time_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::TaskStatus, _impl_.estimate_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::TaskStatus, _impl_.allocation_),
    ~0u,
    0,
    1,
    2,
    3,
    4,
    5,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::TaskError, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::TaskError, _impl_.code_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::TaskError, _impl_.message_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Principal, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Principal, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Principal, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Principal, _impl_.on_behalf_of_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Principal, _impl_.agent_),
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::System, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::System, _impl_.service_name_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::System, _impl_.entity_id_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::System, _impl_.asset_id_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::System, _impl_.manages_own_scheduling_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::User, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::User, _impl_.user_id_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Relations, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Relations, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Relations, _impl_.assignee_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Relations, _impl_.parent_task_id_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::TaskEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::TaskEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::TaskEvent, _impl_.event_type_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::TaskEvent, _impl_.task_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::TaskEvent, _impl_.task_view_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::TaskEvent, _impl_.time_),
    ~0u,
    0,
    ~0u,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::TaskVersion, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::TaskVersion, _impl_.task_id_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::TaskVersion, _impl_.definition_version_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::TaskVersion, _impl_.status_version_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::StatusUpdate, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::StatusUpdate, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::StatusUpdate, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::StatusUpdate, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::StatusUpdate, _impl_.author_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::StatusUpdate, _impl_.scheduled_time_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::DefinitionUpdate, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::DefinitionUpdate, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::DefinitionUpdate, _impl_.task_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Owner, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Owner, _impl_.asset_id_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Owner, _impl_.entity_id_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Replication, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Replication, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Replication, _impl_.stale_time_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Allocation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Allocation, _impl_.active_agents_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Team, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Team, _impl_.entity_id_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Team, _impl_.members_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Agent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Agent, _impl_.asset_id_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Agent, _impl_.entity_id_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::TaskEntity, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::TaskEntity, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::TaskEntity, _impl_.entity_),
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::TaskEntity, _impl_.snapshot_),
    0,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 23, -1, sizeof(::anduril::taskmanager::v1::Task)},
        {38, 53, -1, sizeof(::anduril::taskmanager::v1::TaskStatus)},
        {60, -1, -1, sizeof(::anduril::taskmanager::v1::TaskError)},
        {70, 83, -1, sizeof(::anduril::taskmanager::v1::Principal)},
        {87, -1, -1, sizeof(::anduril::taskmanager::v1::System)},
        {99, -1, -1, sizeof(::anduril::taskmanager::v1::User)},
        {108, 118, -1, sizeof(::anduril::taskmanager::v1::Relations)},
        {120, 132, -1, sizeof(::anduril::taskmanager::v1::TaskEvent)},
        {136, -1, -1, sizeof(::anduril::taskmanager::v1::TaskVersion)},
        {147, 159, -1, sizeof(::anduril::taskmanager::v1::StatusUpdate)},
        {163, 172, -1, sizeof(::anduril::taskmanager::v1::DefinitionUpdate)},
        {173, -1, -1, sizeof(::anduril::taskmanager::v1::Owner)},
        {183, 192, -1, sizeof(::anduril::taskmanager::v1::Replication)},
        {193, -1, -1, sizeof(::anduril::taskmanager::v1::Allocation)},
        {202, -1, -1, sizeof(::anduril::taskmanager::v1::Team)},
        {212, -1, -1, sizeof(::anduril::taskmanager::v1::Agent)},
        {222, 232, -1, sizeof(::anduril::taskmanager::v1::TaskEntity)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::anduril::taskmanager::v1::_Task_default_instance_._instance,
    &::anduril::taskmanager::v1::_TaskStatus_default_instance_._instance,
    &::anduril::taskmanager::v1::_TaskError_default_instance_._instance,
    &::anduril::taskmanager::v1::_Principal_default_instance_._instance,
    &::anduril::taskmanager::v1::_System_default_instance_._instance,
    &::anduril::taskmanager::v1::_User_default_instance_._instance,
    &::anduril::taskmanager::v1::_Relations_default_instance_._instance,
    &::anduril::taskmanager::v1::_TaskEvent_default_instance_._instance,
    &::anduril::taskmanager::v1::_TaskVersion_default_instance_._instance,
    &::anduril::taskmanager::v1::_StatusUpdate_default_instance_._instance,
    &::anduril::taskmanager::v1::_DefinitionUpdate_default_instance_._instance,
    &::anduril::taskmanager::v1::_Owner_default_instance_._instance,
    &::anduril::taskmanager::v1::_Replication_default_instance_._instance,
    &::anduril::taskmanager::v1::_Allocation_default_instance_._instance,
    &::anduril::taskmanager::v1::_Team_default_instance_._instance,
    &::anduril::taskmanager::v1::_Agent_default_instance_._instance,
    &::anduril::taskmanager::v1::_TaskEntity_default_instance_._instance,
};
const char descriptor_table_protodef_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n%anduril/taskmanager/v1/task.pub.proto\022"
    "\026anduril.taskmanager.v1\032)anduril/entitym"
    "anager/v1/entity.pub.proto\032\031google/proto"
    "buf/any.proto\032\037google/protobuf/timestamp"
    ".proto\"\233\007\n\004Task\022=\n\007version\030\001 \001(\0132#.andur"
    "il.taskmanager.v1.TaskVersionR\007version\022!"
    "\n\014display_name\030\002 \001(\tR\013displayName\022:\n\rspe"
    "cification\030\003 \001(\0132\024.google.protobuf.AnyR\r"
    "specification\022@\n\ncreated_by\030\020 \001(\0132!.andu"
    "ril.taskmanager.v1.PrincipalR\tcreatedBy\022"
    "I\n\017last_updated_by\030\004 \001(\0132!.anduril.taskm"
    "anager.v1.PrincipalR\rlastUpdatedBy\022D\n\020la"
    "st_update_time\030\t \001(\0132\032.google.protobuf.T"
    "imestampR\016lastUpdateTime\022:\n\006status\030\005 \001(\013"
    "2\".anduril.taskmanager.v1.TaskStatusR\006st"
    "atus\022A\n\016scheduled_time\030\006 \001(\0132\032.google.pr"
    "otobuf.TimestampR\rscheduledTime\022\?\n\trelat"
    "ions\030\010 \001(\0132!.anduril.taskmanager.v1.Rela"
    "tionsR\trelations\022 \n\013description\030\n \001(\tR\013d"
    "escription\0222\n\025is_executed_elsewhere\030\013 \001("
    "\010R\023isExecutedElsewhere\022;\n\013create_time\030\r "
    "\001(\0132\032.google.protobuf.TimestampR\ncreateT"
    "ime\022E\n\013replication\030\016 \001(\0132#.anduril.taskm"
    "anager.v1.ReplicationR\013replication\022M\n\020in"
    "itial_entities\030\017 \003(\0132\".anduril.taskmanag"
    "er.v1.TaskEntityR\017initialEntities\0223\n\005own"
    "er\030\014 \001(\0132\035.anduril.taskmanager.v1.OwnerR"
    "\005ownerJ\004\010\007\020\010\"\227\003\n\nTaskStatus\0226\n\006status\030\001 "
    "\001(\0162\036.anduril.taskmanager.v1.StatusR\006sta"
    "tus\022@\n\ntask_error\030\002 \001(\0132!.anduril.taskma"
    "nager.v1.TaskErrorR\ttaskError\0220\n\010progres"
    "s\030\004 \001(\0132\024.google.protobuf.AnyR\010progress\022"
    ",\n\006result\030\005 \001(\0132\024.google.protobuf.AnyR\006r"
    "esult\0229\n\nstart_time\030\006 \001(\0132\032.google.proto"
    "buf.TimestampR\tstartTime\0220\n\010estimate\030\007 \001"
    "(\0132\024.google.protobuf.AnyR\010estimate\022B\n\nal"
    "location\030\010 \001(\0132\".anduril.taskmanager.v1."
    "AllocationR\nallocation\"\\\n\tTaskError\0225\n\004c"
    "ode\030\001 \001(\0162!.anduril.taskmanager.v1.Error"
    "CodeR\004code\022\030\n\007message\030\002 \001(\tR\007message\"\373\001\n"
    "\tPrincipal\0228\n\006system\030\001 \001(\0132\036.anduril.tas"
    "kmanager.v1.SystemH\000R\006system\0222\n\004user\030\002 \001"
    "(\0132\034.anduril.taskmanager.v1.UserH\000R\004user"
    "\0222\n\004team\030\004 \001(\0132\034.anduril.taskmanager.v1."
    "TeamH\000R\004team\022C\n\014on_behalf_of\030\003 \001(\0132!.and"
    "uril.taskmanager.v1.PrincipalR\nonBehalfO"
    "fB\007\n\005agent\"\231\001\n\006System\022!\n\014service_name\030\001 "
    "\001(\tR\013serviceName\022\033\n\tentity_id\030\002 \001(\tR\010ent"
    "ityId\022\031\n\010asset_id\030\003 \001(\tR\007assetId\0224\n\026mana"
    "ges_own_scheduling\030\004 \001(\010R\024managesOwnSche"
    "duling\"\037\n\004User\022\027\n\007user_id\030\001 \001(\tR\006userId\""
    "p\n\tRelations\022=\n\010assignee\030\001 \001(\0132!.anduril"
    ".taskmanager.v1.PrincipalR\010assignee\022$\n\016p"
    "arent_task_id\030\002 \001(\tR\014parentTaskId\"\356\001\n\tTa"
    "skEvent\022@\n\nevent_type\030\001 \001(\0162!.anduril.ta"
    "skmanager.v1.EventTypeR\teventType\0220\n\004tas"
    "k\030\002 \001(\0132\034.anduril.taskmanager.v1.TaskR\004t"
    "ask\022=\n\ttask_view\030\003 \001(\0162 .anduril.taskman"
    "ager.v1.TaskViewR\010taskView\022.\n\004time\030\004 \001(\013"
    "2\032.google.protobuf.TimestampR\004time\"|\n\013Ta"
    "skVersion\022\027\n\007task_id\030\001 \001(\tR\006taskId\022-\n\022de"
    "finition_version\030\002 \001(\rR\021definitionVersio"
    "n\022%\n\016status_version\030\003 \001(\rR\rstatusVersion"
    "\"\207\002\n\014StatusUpdate\022=\n\007version\030\001 \001(\0132#.and"
    "uril.taskmanager.v1.TaskVersionR\007version"
    "\022:\n\006status\030\002 \001(\0132\".anduril.taskmanager.v"
    "1.TaskStatusR\006status\0229\n\006author\030\003 \001(\0132!.a"
    "nduril.taskmanager.v1.PrincipalR\006author\022"
    "A\n\016scheduled_time\030\004 \001(\0132\032.google.protobu"
    "f.TimestampR\rscheduledTime\"D\n\020Definition"
    "Update\0220\n\004task\030\001 \001(\0132\034.anduril.taskmanag"
    "er.v1.TaskR\004task\"\?\n\005Owner\022\031\n\010asset_id\030\001 "
    "\001(\tR\007assetId\022\033\n\tentity_id\030\002 \001(\tR\010entityI"
    "d\"H\n\013Replication\0229\n\nstale_time\030\001 \001(\0132\032.g"
    "oogle.protobuf.TimestampR\tstaleTime\"P\n\nA"
    "llocation\022B\n\ractive_agents\030\001 \003(\0132\035.andur"
    "il.taskmanager.v1.AgentR\014activeAgents\"\\\n"
    "\004Team\022\033\n\tentity_id\030\001 \001(\tR\010entityId\0227\n\007me"
    "mbers\030\002 \003(\0132\035.anduril.taskmanager.v1.Age"
    "ntR\007members\"\?\n\005Agent\022\031\n\010asset_id\030\001 \001(\tR\007"
    "assetId\022\033\n\tentity_id\030\002 \001(\tR\010entityId\"b\n\n"
    "TaskEntity\0228\n\006entity\030\001 \001(\0132 .anduril.ent"
    "itymanager.v1.EntityR\006entity\022\032\n\010snapshot"
    "\030\002 \001(\010R\010snapshot*\357\002\n\006Status\022\022\n\016STATUS_IN"
    "VALID\020\000\022\022\n\016STATUS_CREATED\020\001\022\037\n\033STATUS_SC"
    "HEDULED_IN_MANAGER\020\002\022\017\n\013STATUS_SENT\020\003\022\032\n"
    "\026STATUS_MACHINE_RECEIPT\020\004\022\016\n\nSTATUS_ACK\020"
    "\005\022\020\n\014STATUS_WILCO\020\006\022\024\n\020STATUS_EXECUTING\020"
    "\007\022\035\n\031STATUS_WAITING_FOR_UPDATE\020\010\022\022\n\016STAT"
    "US_DONE_OK\020\t\022\026\n\022STATUS_DONE_NOT_OK\020\n\022\023\n\017"
    "STATUS_REPLACED\020\013\022\033\n\027STATUS_CANCEL_REQUE"
    "STED\020\014\022\035\n\031STATUS_COMPLETE_REQUESTED\020\r\022\033\n"
    "\027STATUS_VERSION_REJECTED\020\016*\205\001\n\tErrorCode"
    "\022\026\n\022ERROR_CODE_INVALID\020\000\022\030\n\024ERROR_CODE_C"
    "ANCELLED\020\001\022\027\n\023ERROR_CODE_REJECTED\020\002\022\026\n\022E"
    "RROR_CODE_TIMEOUT\020\003\022\025\n\021ERROR_CODE_FAILED"
    "\020\004*n\n\tEventType\022\026\n\022EVENT_TYPE_INVALID\020\000\022"
    "\026\n\022EVENT_TYPE_CREATED\020\001\022\025\n\021EVENT_TYPE_UP"
    "DATE\020\002\022\032\n\026EVENT_TYPE_PREEXISTING\020\003*M\n\010Ta"
    "skView\022\025\n\021TASK_VIEW_INVALID\020\000\022\025\n\021TASK_VI"
    "EW_MANAGER\020\001\022\023\n\017TASK_VIEW_AGENT\020\002B\357\001\n\032co"
    "m.anduril.taskmanager.v1B\014TaskPubProtoP\001"
    "ZIghe.anduril.dev/anduril/andurilapis-go"
    "/anduril/taskmanager/v1;taskmanager\242\002\003AT"
    "X\252\002\026Anduril.Taskmanager.V1\312\002\026Anduril\\Tas"
    "kmanager\\V1\342\002\"Anduril\\Taskmanager\\V1\\GPB"
    "Metadata\352\002\030Anduril::Taskmanager::V1b\006pro"
    "to3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_deps[3] =
    {
        &::descriptor_table_anduril_2fentitymanager_2fv1_2fentity_2epub_2eproto,
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto = {
    false,
    false,
    4283,
    descriptor_table_protodef_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto,
    "anduril/taskmanager/v1/task.pub.proto",
    &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_once,
    descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_deps,
    3,
    17,
    schemas,
    file_default_instances,
    TableStruct_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto::offsets,
    file_level_metadata_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto,
    file_level_enum_descriptors_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto,
    file_level_service_descriptors_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_getter() {
  return &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto(&descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto);
namespace anduril {
namespace taskmanager {
namespace v1 {
const ::google::protobuf::EnumDescriptor* Status_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto);
  return file_level_enum_descriptors_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t Status_internal_data_[] = {
    983040u, 0u, };
bool Status_IsValid(int value) {
  return 0 <= value && value <= 14;
}
const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto);
  return file_level_enum_descriptors_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t ErrorCode_internal_data_[] = {
    327680u, 0u, };
bool ErrorCode_IsValid(int value) {
  return 0 <= value && value <= 4;
}
const ::google::protobuf::EnumDescriptor* EventType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto);
  return file_level_enum_descriptors_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t EventType_internal_data_[] = {
    262144u, 0u, };
bool EventType_IsValid(int value) {
  return 0 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* TaskView_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto);
  return file_level_enum_descriptors_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t TaskView_internal_data_[] = {
    196608u, 0u, };
bool TaskView_IsValid(int value) {
  return 0 <= value && value <= 2;
}
// ===================================================================

class Task::_Internal {
 public:
  using HasBits = decltype(std::declval<Task>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Task, _impl_._has_bits_);
  static const ::anduril::taskmanager::v1::TaskVersion& version(const Task* msg);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Any& specification(const Task* msg);
  static void set_has_specification(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::anduril::taskmanager::v1::Principal& created_by(const Task* msg);
  static void set_has_created_by(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::anduril::taskmanager::v1::Principal& last_updated_by(const Task* msg);
  static void set_has_last_updated_by(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::google::protobuf::Timestamp& last_update_time(const Task* msg);
  static void set_has_last_update_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::anduril::taskmanager::v1::TaskStatus& status(const Task* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::google::protobuf::Timestamp& scheduled_time(const Task* msg);
  static void set_has_scheduled_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::anduril::taskmanager::v1::Relations& relations(const Task* msg);
  static void set_has_relations(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::google::protobuf::Timestamp& create_time(const Task* msg);
  static void set_has_create_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::anduril::taskmanager::v1::Replication& replication(const Task* msg);
  static void set_has_replication(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::anduril::taskmanager::v1::Owner& owner(const Task* msg);
  static void set_has_owner(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::anduril::taskmanager::v1::TaskVersion& Task::_Internal::version(const Task* msg) {
  return *msg->_impl_.version_;
}
const ::google::protobuf::Any& Task::_Internal::specification(const Task* msg) {
  return *msg->_impl_.specification_;
}
const ::anduril::taskmanager::v1::Principal& Task::_Internal::created_by(const Task* msg) {
  return *msg->_impl_.created_by_;
}
const ::anduril::taskmanager::v1::Principal& Task::_Internal::last_updated_by(const Task* msg) {
  return *msg->_impl_.last_updated_by_;
}
const ::google::protobuf::Timestamp& Task::_Internal::last_update_time(const Task* msg) {
  return *msg->_impl_.last_update_time_;
}
const ::anduril::taskmanager::v1::TaskStatus& Task::_Internal::status(const Task* msg) {
  return *msg->_impl_.status_;
}
const ::google::protobuf::Timestamp& Task::_Internal::scheduled_time(const Task* msg) {
  return *msg->_impl_.scheduled_time_;
}
const ::anduril::taskmanager::v1::Relations& Task::_Internal::relations(const Task* msg) {
  return *msg->_impl_.relations_;
}
const ::google::protobuf::Timestamp& Task::_Internal::create_time(const Task* msg) {
  return *msg->_impl_.create_time_;
}
const ::anduril::taskmanager::v1::Replication& Task::_Internal::replication(const Task* msg) {
  return *msg->_impl_.replication_;
}
const ::anduril::taskmanager::v1::Owner& Task::_Internal::owner(const Task* msg) {
  return *msg->_impl_.owner_;
}
void Task::clear_specification() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.specification_ != nullptr) _impl_.specification_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Task::clear_last_update_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.last_update_time_ != nullptr) _impl_.last_update_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void Task::clear_scheduled_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.scheduled_time_ != nullptr) _impl_.scheduled_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void Task::clear_create_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.create_time_ != nullptr) _impl_.create_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
Task::Task(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anduril.taskmanager.v1.Task)
}
inline PROTOBUF_NDEBUG_INLINE Task::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        initial_entities_{visibility, arena, from.initial_entities_},
        display_name_(arena, from.display_name_),
        description_(arena, from.description_) {}

Task::Task(
    ::google::protobuf::Arena* arena,
    const Task& from)
    : ::google::protobuf::Message(arena) {
  Task* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.version_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::anduril::taskmanager::v1::TaskVersion>(arena, *from._impl_.version_)
                : nullptr;
  _impl_.specification_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Any>(arena, *from._impl_.specification_)
                : nullptr;
  _impl_.last_updated_by_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::anduril::taskmanager::v1::Principal>(arena, *from._impl_.last_updated_by_)
                : nullptr;
  _impl_.status_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::anduril::taskmanager::v1::TaskStatus>(arena, *from._impl_.status_)
                : nullptr;
  _impl_.scheduled_time_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.scheduled_time_)
                : nullptr;
  _impl_.relations_ = (cached_has_bits & 0x00000020u)
                ? CreateMaybeMessage<::anduril::taskmanager::v1::Relations>(arena, *from._impl_.relations_)
                : nullptr;
  _impl_.last_update_time_ = (cached_has_bits & 0x00000040u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.last_update_time_)
                : nullptr;
  _impl_.owner_ = (cached_has_bits & 0x00000080u)
                ? CreateMaybeMessage<::anduril::taskmanager::v1::Owner>(arena, *from._impl_.owner_)
                : nullptr;
  _impl_.create_time_ = (cached_has_bits & 0x00000100u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.create_time_)
                : nullptr;
  _impl_.replication_ = (cached_has_bits & 0x00000200u)
                ? CreateMaybeMessage<::anduril::taskmanager::v1::Replication>(arena, *from._impl_.replication_)
                : nullptr;
  _impl_.created_by_ = (cached_has_bits & 0x00000400u)
                ? CreateMaybeMessage<::anduril::taskmanager::v1::Principal>(arena, *from._impl_.created_by_)
                : nullptr;
  _impl_.is_executed_elsewhere_ = from._impl_.is_executed_elsewhere_;

  // @@protoc_insertion_point(copy_constructor:anduril.taskmanager.v1.Task)
}
inline PROTOBUF_NDEBUG_INLINE Task::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        initial_entities_{visibility, arena},
        display_name_(arena),
        description_(arena) {}

inline void Task::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, version_),
           0,
           offsetof(Impl_, is_executed_elsewhere_) -
               offsetof(Impl_, version_) +
               sizeof(Impl_::is_executed_elsewhere_));
}
Task::~Task() {
  // @@protoc_insertion_point(destructor:anduril.taskmanager.v1.Task)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Task::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.display_name_.Destroy();
  _impl_.description_.Destroy();
  delete _impl_.version_;
  delete _impl_.specification_;
  delete _impl_.last_updated_by_;
  delete _impl_.status_;
  delete _impl_.scheduled_time_;
  delete _impl_.relations_;
  delete _impl_.last_update_time_;
  delete _impl_.owner_;
  delete _impl_.create_time_;
  delete _impl_.replication_;
  delete _impl_.created_by_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:anduril.taskmanager.v1.Task)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.initial_entities_.Clear();
  _impl_.display_name_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.version_ != nullptr);
      _impl_.version_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.specification_ != nullptr);
      _impl_.specification_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.last_updated_by_ != nullptr);
      _impl_.last_updated_by_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.status_ != nullptr);
      _impl_.status_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.scheduled_time_ != nullptr);
      _impl_.scheduled_time_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.relations_ != nullptr);
      _impl_.relations_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.last_update_time_ != nullptr);
      _impl_.last_update_time_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.owner_ != nullptr);
      _impl_.owner_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.create_time_ != nullptr);
      _impl_.create_time_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.replication_ != nullptr);
      _impl_.replication_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.created_by_ != nullptr);
      _impl_.created_by_->Clear();
    }
  }
  _impl_.is_executed_elsewhere_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Task::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 15, 12, 67, 2> Task::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Task, _impl_._has_bits_),
    0, // no _extensions_
    16, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294901824,  // skipmap
    offsetof(decltype(_table_), field_entries),
    15,  // num_field_entries
    12,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Task_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .anduril.taskmanager.v1.Principal created_by = 16 [json_name = "createdBy"];
    {::_pbi::TcParser::FastMtS2,
     {386, 10, 11, PROTOBUF_FIELD_OFFSET(Task, _impl_.created_by_)}},
    // .anduril.taskmanager.v1.TaskVersion version = 1 [json_name = "version"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Task, _impl_.version_)}},
    // string display_name = 2 [json_name = "displayName"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Task, _impl_.display_name_)}},
    // .google.protobuf.Any specification = 3 [json_name = "specification"];
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(Task, _impl_.specification_)}},
    // .anduril.taskmanager.v1.Principal last_updated_by = 4 [json_name = "lastUpdatedBy"];
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 2, PROTOBUF_FIELD_OFFSET(Task, _impl_.last_updated_by_)}},
    // .anduril.taskmanager.v1.TaskStatus status = 5 [json_name = "status"];
    {::_pbi::TcParser::FastMtS1,
     {42, 3, 3, PROTOBUF_FIELD_OFFSET(Task, _impl_.status_)}},
    // .google.protobuf.Timestamp scheduled_time = 6 [json_name = "scheduledTime"];
    {::_pbi::TcParser::FastMtS1,
     {50, 4, 4, PROTOBUF_FIELD_OFFSET(Task, _impl_.scheduled_time_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .anduril.taskmanager.v1.Relations relations = 8 [json_name = "relations"];
    {::_pbi::TcParser::FastMtS1,
     {66, 5, 5, PROTOBUF_FIELD_OFFSET(Task, _impl_.relations_)}},
    // .google.protobuf.Timestamp last_update_time = 9 [json_name = "lastUpdateTime"];
    {::_pbi::TcParser::FastMtS1,
     {74, 6, 6, PROTOBUF_FIELD_OFFSET(Task, _impl_.last_update_time_)}},
    // string description = 10 [json_name = "description"];
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(Task, _impl_.description_)}},
    // bool is_executed_elsewhere = 11 [json_name = "isExecutedElsewhere"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Task, _impl_.is_executed_elsewhere_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(Task, _impl_.is_executed_elsewhere_)}},
    // .anduril.taskmanager.v1.Owner owner = 12 [json_name = "owner"];
    {::_pbi::TcParser::FastMtS1,
     {98, 7, 7, PROTOBUF_FIELD_OFFSET(Task, _impl_.owner_)}},
    // .google.protobuf.Timestamp create_time = 13 [json_name = "createTime"];
    {::_pbi::TcParser::FastMtS1,
     {106, 8, 8, PROTOBUF_FIELD_OFFSET(Task, _impl_.create_time_)}},
    // .anduril.taskmanager.v1.Replication replication = 14 [json_name = "replication"];
    {::_pbi::TcParser::FastMtS1,
     {114, 9, 9, PROTOBUF_FIELD_OFFSET(Task, _impl_.replication_)}},
    // repeated .anduril.taskmanager.v1.TaskEntity initial_entities = 15 [json_name = "initialEntities"];
    {::_pbi::TcParser::FastMtR1,
     {122, 63, 10, PROTOBUF_FIELD_OFFSET(Task, _impl_.initial_entities_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .anduril.taskmanager.v1.TaskVersion version = 1 [json_name = "version"];
    {PROTOBUF_FIELD_OFFSET(Task, _impl_.version_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string display_name = 2 [json_name = "displayName"];
    {PROTOBUF_FIELD_OFFSET(Task, _impl_.display_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Any specification = 3 [json_name = "specification"];
    {PROTOBUF_FIELD_OFFSET(Task, _impl_.specification_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .anduril.taskmanager.v1.Principal last_updated_by = 4 [json_name = "lastUpdatedBy"];
    {PROTOBUF_FIELD_OFFSET(Task, _impl_.last_updated_by_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .anduril.taskmanager.v1.TaskStatus status = 5 [json_name = "status"];
    {PROTOBUF_FIELD_OFFSET(Task, _impl_.status_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp scheduled_time = 6 [json_name = "scheduledTime"];
    {PROTOBUF_FIELD_OFFSET(Task, _impl_.scheduled_time_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .anduril.taskmanager.v1.Relations relations = 8 [json_name = "relations"];
    {PROTOBUF_FIELD_OFFSET(Task, _impl_.relations_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp last_update_time = 9 [json_name = "lastUpdateTime"];
    {PROTOBUF_FIELD_OFFSET(Task, _impl_.last_update_time_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string description = 10 [json_name = "description"];
    {PROTOBUF_FIELD_OFFSET(Task, _impl_.description_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool is_executed_elsewhere = 11 [json_name = "isExecutedElsewhere"];
    {PROTOBUF_FIELD_OFFSET(Task, _impl_.is_executed_elsewhere_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .anduril.taskmanager.v1.Owner owner = 12 [json_name = "owner"];
    {PROTOBUF_FIELD_OFFSET(Task, _impl_.owner_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp create_time = 13 [json_name = "createTime"];
    {PROTOBUF_FIELD_OFFSET(Task, _impl_.create_time_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .anduril.taskmanager.v1.Replication replication = 14 [json_name = "replication"];
    {PROTOBUF_FIELD_OFFSET(Task, _impl_.replication_), _Internal::kHasBitsOffset + 9, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .anduril.taskmanager.v1.TaskEntity initial_entities = 15 [json_name = "initialEntities"];
    {PROTOBUF_FIELD_OFFSET(Task, _impl_.initial_entities_), -1, 10,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .anduril.taskmanager.v1.Principal created_by = 16 [json_name = "createdBy"];
    {PROTOBUF_FIELD_OFFSET(Task, _impl_.created_by_), _Internal::kHasBitsOffset + 10, 11,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::anduril::taskmanager::v1::TaskVersion>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
    {::_pbi::TcParser::GetTable<::anduril::taskmanager::v1::Principal>()},
    {::_pbi::TcParser::GetTable<::anduril::taskmanager::v1::TaskStatus>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::anduril::taskmanager::v1::Relations>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::anduril::taskmanager::v1::Owner>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::anduril::taskmanager::v1::Replication>()},
    {::_pbi::TcParser::GetTable<::anduril::taskmanager::v1::TaskEntity>()},
    {::_pbi::TcParser::GetTable<::anduril::taskmanager::v1::Principal>()},
  }}, {{
    "\33\0\14\0\0\0\0\0\0\13\0\0\0\0\0\0"
    "anduril.taskmanager.v1.Task"
    "display_name"
    "description"
  }},
};

::uint8_t* Task::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anduril.taskmanager.v1.Task)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .anduril.taskmanager.v1.TaskVersion version = 1 [json_name = "version"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::version(this),
        _Internal::version(this).GetCachedSize(), target, stream);
  }

  // string display_name = 2 [json_name = "displayName"];
  if (!this->_internal_display_name().empty()) {
    const std::string& _s = this->_internal_display_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "anduril.taskmanager.v1.Task.display_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .google.protobuf.Any specification = 3 [json_name = "specification"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::specification(this),
        _Internal::specification(this).GetCachedSize(), target, stream);
  }

  // .anduril.taskmanager.v1.Principal last_updated_by = 4 [json_name = "lastUpdatedBy"];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::last_updated_by(this),
        _Internal::last_updated_by(this).GetCachedSize(), target, stream);
  }

  // .anduril.taskmanager.v1.TaskStatus status = 5 [json_name = "status"];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp scheduled_time = 6 [json_name = "scheduledTime"];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::scheduled_time(this),
        _Internal::scheduled_time(this).GetCachedSize(), target, stream);
  }

  // .anduril.taskmanager.v1.Relations relations = 8 [json_name = "relations"];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::relations(this),
        _Internal::relations(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp last_update_time = 9 [json_name = "lastUpdateTime"];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, _Internal::last_update_time(this),
        _Internal::last_update_time(this).GetCachedSize(), target, stream);
  }

  // string description = 10 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "anduril.taskmanager.v1.Task.description");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // bool is_executed_elsewhere = 11 [json_name = "isExecutedElsewhere"];
  if (this->_internal_is_executed_elsewhere() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        11, this->_internal_is_executed_elsewhere(), target);
  }

  // .anduril.taskmanager.v1.Owner owner = 12 [json_name = "owner"];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        12, _Internal::owner(this),
        _Internal::owner(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp create_time = 13 [json_name = "createTime"];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        13, _Internal::create_time(this),
        _Internal::create_time(this).GetCachedSize(), target, stream);
  }

  // .anduril.taskmanager.v1.Replication replication = 14 [json_name = "replication"];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        14, _Internal::replication(this),
        _Internal::replication(this).GetCachedSize(), target, stream);
  }

  // repeated .anduril.taskmanager.v1.TaskEntity initial_entities = 15 [json_name = "initialEntities"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_initial_entities_size()); i < n; i++) {
    const auto& repfield = this->_internal_initial_entities().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .anduril.taskmanager.v1.Principal created_by = 16 [json_name = "createdBy"];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        16, _Internal::created_by(this),
        _Internal::created_by(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anduril.taskmanager.v1.Task)
  return target;
}

::size_t Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anduril.taskmanager.v1.Task)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .anduril.taskmanager.v1.TaskEntity initial_entities = 15 [json_name = "initialEntities"];
  total_size += 1UL * this->_internal_initial_entities_size();
  for (const auto& msg : this->_internal_initial_entities()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string display_name = 2 [json_name = "displayName"];
  if (!this->_internal_display_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_display_name());
  }

  // string description = 10 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // .anduril.taskmanager.v1.TaskVersion version = 1 [json_name = "version"];
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.version_);
    }

    // .google.protobuf.Any specification = 3 [json_name = "specification"];
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.specification_);
    }

    // .anduril.taskmanager.v1.Principal last_updated_by = 4 [json_name = "lastUpdatedBy"];
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.last_updated_by_);
    }

    // .anduril.taskmanager.v1.TaskStatus status = 5 [json_name = "status"];
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.status_);
    }

    // .google.protobuf.Timestamp scheduled_time = 6 [json_name = "scheduledTime"];
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.scheduled_time_);
    }

    // .anduril.taskmanager.v1.Relations relations = 8 [json_name = "relations"];
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.relations_);
    }

    // .google.protobuf.Timestamp last_update_time = 9 [json_name = "lastUpdateTime"];
    if (cached_has_bits & 0x00000040u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.last_update_time_);
    }

    // .anduril.taskmanager.v1.Owner owner = 12 [json_name = "owner"];
    if (cached_has_bits & 0x00000080u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.owner_);
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // .google.protobuf.Timestamp create_time = 13 [json_name = "createTime"];
    if (cached_has_bits & 0x00000100u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.create_time_);
    }

    // .anduril.taskmanager.v1.Replication replication = 14 [json_name = "replication"];
    if (cached_has_bits & 0x00000200u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.replication_);
    }

    // .anduril.taskmanager.v1.Principal created_by = 16 [json_name = "createdBy"];
    if (cached_has_bits & 0x00000400u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.created_by_);
    }

  }
  // bool is_executed_elsewhere = 11 [json_name = "isExecutedElsewhere"];
  if (this->_internal_is_executed_elsewhere() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Task::_class_data_ = {
    Task::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Task::GetClassData() const {
  return &_class_data_;
}

void Task::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Task*>(&to_msg);
  auto& from = static_cast<const Task&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anduril.taskmanager.v1.Task)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_initial_entities()->MergeFrom(
      from._internal_initial_entities());
  if (!from._internal_display_name().empty()) {
    _this->_internal_set_display_name(from._internal_display_name());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_version()->::anduril::taskmanager::v1::TaskVersion::MergeFrom(
          from._internal_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_specification()->::google::protobuf::Any::MergeFrom(
          from._internal_specification());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_last_updated_by()->::anduril::taskmanager::v1::Principal::MergeFrom(
          from._internal_last_updated_by());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_status()->::anduril::taskmanager::v1::TaskStatus::MergeFrom(
          from._internal_status());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_scheduled_time()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_scheduled_time());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_relations()->::anduril::taskmanager::v1::Relations::MergeFrom(
          from._internal_relations());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_last_update_time()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_last_update_time());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_owner()->::anduril::taskmanager::v1::Owner::MergeFrom(
          from._internal_owner());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_create_time());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_replication()->::anduril::taskmanager::v1::Replication::MergeFrom(
          from._internal_replication());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_created_by()->::anduril::taskmanager::v1::Principal::MergeFrom(
          from._internal_created_by());
    }
  }
  if (from._internal_is_executed_elsewhere() != 0) {
    _this->_internal_set_is_executed_elsewhere(from._internal_is_executed_elsewhere());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anduril.taskmanager.v1.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Task::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Task::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Task::InternalSwap(Task* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.initial_entities_.InternalSwap(&other->_impl_.initial_entities_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.display_name_, &other->_impl_.display_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, &other->_impl_.description_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Task, _impl_.is_executed_elsewhere_)
      + sizeof(Task::_impl_.is_executed_elsewhere_)
      - PROTOBUF_FIELD_OFFSET(Task, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::google::protobuf::Metadata Task::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_getter, &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_once,
      file_level_metadata_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto[0]);
}
// ===================================================================

class TaskStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<TaskStatus>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TaskStatus, _impl_._has_bits_);
  static const ::anduril::taskmanager::v1::TaskError& task_error(const TaskStatus* msg);
  static void set_has_task_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Any& progress(const TaskStatus* msg);
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::google::protobuf::Any& result(const TaskStatus* msg);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::google::protobuf::Timestamp& start_time(const TaskStatus* msg);
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::google::protobuf::Any& estimate(const TaskStatus* msg);
  static void set_has_estimate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::anduril::taskmanager::v1::Allocation& allocation(const TaskStatus* msg);
  static void set_has_allocation(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::anduril::taskmanager::v1::TaskError& TaskStatus::_Internal::task_error(const TaskStatus* msg) {
  return *msg->_impl_.task_error_;
}
const ::google::protobuf::Any& TaskStatus::_Internal::progress(const TaskStatus* msg) {
  return *msg->_impl_.progress_;
}
const ::google::protobuf::Any& TaskStatus::_Internal::result(const TaskStatus* msg) {
  return *msg->_impl_.result_;
}
const ::google::protobuf::Timestamp& TaskStatus::_Internal::start_time(const TaskStatus* msg) {
  return *msg->_impl_.start_time_;
}
const ::google::protobuf::Any& TaskStatus::_Internal::estimate(const TaskStatus* msg) {
  return *msg->_impl_.estimate_;
}
const ::anduril::taskmanager::v1::Allocation& TaskStatus::_Internal::allocation(const TaskStatus* msg) {
  return *msg->_impl_.allocation_;
}
void TaskStatus::clear_progress() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.progress_ != nullptr) _impl_.progress_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void TaskStatus::clear_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.result_ != nullptr) _impl_.result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void TaskStatus::clear_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.start_time_ != nullptr) _impl_.start_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void TaskStatus::clear_estimate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.estimate_ != nullptr) _impl_.estimate_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
TaskStatus::TaskStatus(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anduril.taskmanager.v1.TaskStatus)
}
inline PROTOBUF_NDEBUG_INLINE TaskStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TaskStatus::TaskStatus(
    ::google::protobuf::Arena* arena,
    const TaskStatus& from)
    : ::google::protobuf::Message(arena) {
  TaskStatus* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.task_error_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::anduril::taskmanager::v1::TaskError>(arena, *from._impl_.task_error_)
                : nullptr;
  _impl_.progress_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Any>(arena, *from._impl_.progress_)
                : nullptr;
  _impl_.result_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::google::protobuf::Any>(arena, *from._impl_.result_)
                : nullptr;
  _impl_.start_time_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.start_time_)
                : nullptr;
  _impl_.estimate_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::google::protobuf::Any>(arena, *from._impl_.estimate_)
                : nullptr;
  _impl_.allocation_ = (cached_has_bits & 0x00000020u)
                ? CreateMaybeMessage<::anduril::taskmanager::v1::Allocation>(arena, *from._impl_.allocation_)
                : nullptr;
  _impl_.status_ = from._impl_.status_;

  // @@protoc_insertion_point(copy_constructor:anduril.taskmanager.v1.TaskStatus)
}
inline PROTOBUF_NDEBUG_INLINE TaskStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TaskStatus::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, task_error_),
           0,
           offsetof(Impl_, status_) -
               offsetof(Impl_, task_error_) +
               sizeof(Impl_::status_));
}
TaskStatus::~TaskStatus() {
  // @@protoc_insertion_point(destructor:anduril.taskmanager.v1.TaskStatus)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TaskStatus::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.task_error_;
  delete _impl_.progress_;
  delete _impl_.result_;
  delete _impl_.start_time_;
  delete _impl_.estimate_;
  delete _impl_.allocation_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TaskStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:anduril.taskmanager.v1.TaskStatus)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.task_error_ != nullptr);
      _impl_.task_error_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.progress_ != nullptr);
      _impl_.progress_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.result_ != nullptr);
      _impl_.result_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.start_time_ != nullptr);
      _impl_.start_time_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.estimate_ != nullptr);
      _impl_.estimate_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.allocation_ != nullptr);
      _impl_.allocation_->Clear();
    }
  }
  _impl_.status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TaskStatus::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 6, 0, 2> TaskStatus::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TaskStatus, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967044,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TaskStatus_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .anduril.taskmanager.v1.Allocation allocation = 8 [json_name = "allocation"];
    {::_pbi::TcParser::FastMtS1,
     {66, 5, 5, PROTOBUF_FIELD_OFFSET(TaskStatus, _impl_.allocation_)}},
    // .anduril.taskmanager.v1.Status status = 1 [json_name = "status"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TaskStatus, _impl_.status_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TaskStatus, _impl_.status_)}},
    // .anduril.taskmanager.v1.TaskError task_error = 2 [json_name = "taskError"];
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(TaskStatus, _impl_.task_error_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Any progress = 4 [json_name = "progress"];
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(TaskStatus, _impl_.progress_)}},
    // .google.protobuf.Any result = 5 [json_name = "result"];
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 2, PROTOBUF_FIELD_OFFSET(TaskStatus, _impl_.result_)}},
    // .google.protobuf.Timestamp start_time = 6 [json_name = "startTime"];
    {::_pbi::TcParser::FastMtS1,
     {50, 3, 3, PROTOBUF_FIELD_OFFSET(TaskStatus, _impl_.start_time_)}},
    // .google.protobuf.Any estimate = 7 [json_name = "estimate"];
    {::_pbi::TcParser::FastMtS1,
     {58, 4, 4, PROTOBUF_FIELD_OFFSET(TaskStatus, _impl_.estimate_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .anduril.taskmanager.v1.Status status = 1 [json_name = "status"];
    {PROTOBUF_FIELD_OFFSET(TaskStatus, _impl_.status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .anduril.taskmanager.v1.TaskError task_error = 2 [json_name = "taskError"];
    {PROTOBUF_FIELD_OFFSET(TaskStatus, _impl_.task_error_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Any progress = 4 [json_name = "progress"];
    {PROTOBUF_FIELD_OFFSET(TaskStatus, _impl_.progress_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Any result = 5 [json_name = "result"];
    {PROTOBUF_FIELD_OFFSET(TaskStatus, _impl_.result_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp start_time = 6 [json_name = "startTime"];
    {PROTOBUF_FIELD_OFFSET(TaskStatus, _impl_.start_time_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Any estimate = 7 [json_name = "estimate"];
    {PROTOBUF_FIELD_OFFSET(TaskStatus, _impl_.estimate_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .anduril.taskmanager.v1.Allocation allocation = 8 [json_name = "allocation"];
    {PROTOBUF_FIELD_OFFSET(TaskStatus, _impl_.allocation_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::anduril::taskmanager::v1::TaskError>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
    {::_pbi::TcParser::GetTable<::anduril::taskmanager::v1::Allocation>()},
  }}, {{
  }},
};

::uint8_t* TaskStatus::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anduril.taskmanager.v1.TaskStatus)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .anduril.taskmanager.v1.Status status = 1 [json_name = "status"];
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_status(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .anduril.taskmanager.v1.TaskError task_error = 2 [json_name = "taskError"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::task_error(this),
        _Internal::task_error(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Any progress = 4 [json_name = "progress"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::progress(this),
        _Internal::progress(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Any result = 5 [json_name = "result"];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp start_time = 6 [json_name = "startTime"];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::start_time(this),
        _Internal::start_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Any estimate = 7 [json_name = "estimate"];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::estimate(this),
        _Internal::estimate(this).GetCachedSize(), target, stream);
  }

  // .anduril.taskmanager.v1.Allocation allocation = 8 [json_name = "allocation"];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::allocation(this),
        _Internal::allocation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anduril.taskmanager.v1.TaskStatus)
  return target;
}

::size_t TaskStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anduril.taskmanager.v1.TaskStatus)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // .anduril.taskmanager.v1.TaskError task_error = 2 [json_name = "taskError"];
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.task_error_);
    }

    // .google.protobuf.Any progress = 4 [json_name = "progress"];
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.progress_);
    }

    // .google.protobuf.Any result = 5 [json_name = "result"];
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.result_);
    }

    // .google.protobuf.Timestamp start_time = 6 [json_name = "startTime"];
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.start_time_);
    }

    // .google.protobuf.Any estimate = 7 [json_name = "estimate"];
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.estimate_);
    }

    // .anduril.taskmanager.v1.Allocation allocation = 8 [json_name = "allocation"];
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.allocation_);
    }

  }
  // .anduril.taskmanager.v1.Status status = 1 [json_name = "status"];
  if (this->_internal_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TaskStatus::_class_data_ = {
    TaskStatus::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TaskStatus::GetClassData() const {
  return &_class_data_;
}

void TaskStatus::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TaskStatus*>(&to_msg);
  auto& from = static_cast<const TaskStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anduril.taskmanager.v1.TaskStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_task_error()->::anduril::taskmanager::v1::TaskError::MergeFrom(
          from._internal_task_error());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_progress()->::google::protobuf::Any::MergeFrom(
          from._internal_progress());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_result()->::google::protobuf::Any::MergeFrom(
          from._internal_result());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_start_time()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_start_time());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_estimate()->::google::protobuf::Any::MergeFrom(
          from._internal_estimate());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_allocation()->::anduril::taskmanager::v1::Allocation::MergeFrom(
          from._internal_allocation());
    }
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TaskStatus::CopyFrom(const TaskStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anduril.taskmanager.v1.TaskStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TaskStatus::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TaskStatus::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TaskStatus::InternalSwap(TaskStatus* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskStatus, _impl_.status_)
      + sizeof(TaskStatus::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(TaskStatus, _impl_.task_error_)>(
          reinterpret_cast<char*>(&_impl_.task_error_),
          reinterpret_cast<char*>(&other->_impl_.task_error_));
}

::google::protobuf::Metadata TaskStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_getter, &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_once,
      file_level_metadata_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto[1]);
}
// ===================================================================

class TaskError::_Internal {
 public:
};

TaskError::TaskError(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anduril.taskmanager.v1.TaskError)
}
inline PROTOBUF_NDEBUG_INLINE TaskError::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : message_(arena, from.message_),
        _cached_size_{0} {}

TaskError::TaskError(
    ::google::protobuf::Arena* arena,
    const TaskError& from)
    : ::google::protobuf::Message(arena) {
  TaskError* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.code_ = from._impl_.code_;

  // @@protoc_insertion_point(copy_constructor:anduril.taskmanager.v1.TaskError)
}
inline PROTOBUF_NDEBUG_INLINE TaskError::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_(arena),
        _cached_size_{0} {}

inline void TaskError::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.code_ = {};
}
TaskError::~TaskError() {
  // @@protoc_insertion_point(destructor:anduril.taskmanager.v1.TaskError)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TaskError::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.message_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TaskError::Clear() {
// @@protoc_insertion_point(message_clear_start:anduril.taskmanager.v1.TaskError)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.code_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TaskError::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 48, 2> TaskError::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TaskError_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string message = 2 [json_name = "message"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TaskError, _impl_.message_)}},
    // .anduril.taskmanager.v1.ErrorCode code = 1 [json_name = "code"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TaskError, _impl_.code_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TaskError, _impl_.code_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .anduril.taskmanager.v1.ErrorCode code = 1 [json_name = "code"];
    {PROTOBUF_FIELD_OFFSET(TaskError, _impl_.code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string message = 2 [json_name = "message"];
    {PROTOBUF_FIELD_OFFSET(TaskError, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\40\0\7\0\0\0\0\0"
    "anduril.taskmanager.v1.TaskError"
    "message"
  }},
};

::uint8_t* TaskError::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anduril.taskmanager.v1.TaskError)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .anduril.taskmanager.v1.ErrorCode code = 1 [json_name = "code"];
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_code(), target);
  }

  // string message = 2 [json_name = "message"];
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "anduril.taskmanager.v1.TaskError.message");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anduril.taskmanager.v1.TaskError)
  return target;
}

::size_t TaskError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anduril.taskmanager.v1.TaskError)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2 [json_name = "message"];
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  // .anduril.taskmanager.v1.ErrorCode code = 1 [json_name = "code"];
  if (this->_internal_code() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TaskError::_class_data_ = {
    TaskError::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TaskError::GetClassData() const {
  return &_class_data_;
}

void TaskError::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TaskError*>(&to_msg);
  auto& from = static_cast<const TaskError&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anduril.taskmanager.v1.TaskError)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TaskError::CopyFrom(const TaskError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anduril.taskmanager.v1.TaskError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TaskError::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TaskError::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TaskError::InternalSwap(TaskError* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  swap(_impl_.code_, other->_impl_.code_);
}

::google::protobuf::Metadata TaskError::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_getter, &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_once,
      file_level_metadata_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto[2]);
}
// ===================================================================

class Principal::_Internal {
 public:
  using HasBits = decltype(std::declval<Principal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Principal, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::anduril::taskmanager::v1::Principal, _impl_._oneof_case_);
  static const ::anduril::taskmanager::v1::System& system(const Principal* msg);
  static const ::anduril::taskmanager::v1::User& user(const Principal* msg);
  static const ::anduril::taskmanager::v1::Team& team(const Principal* msg);
  static const ::anduril::taskmanager::v1::Principal& on_behalf_of(const Principal* msg);
  static void set_has_on_behalf_of(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::anduril::taskmanager::v1::System& Principal::_Internal::system(const Principal* msg) {
  return *msg->_impl_.agent_.system_;
}
const ::anduril::taskmanager::v1::User& Principal::_Internal::user(const Principal* msg) {
  return *msg->_impl_.agent_.user_;
}
const ::anduril::taskmanager::v1::Team& Principal::_Internal::team(const Principal* msg) {
  return *msg->_impl_.agent_.team_;
}
const ::anduril::taskmanager::v1::Principal& Principal::_Internal::on_behalf_of(const Principal* msg) {
  return *msg->_impl_.on_behalf_of_;
}
void Principal::set_allocated_system(::anduril::taskmanager::v1::System* system) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_agent();
  if (system) {
    ::google::protobuf::Arena* submessage_arena = system->GetArena();
    if (message_arena != submessage_arena) {
      system = ::google::protobuf::internal::GetOwnedMessage(message_arena, system, submessage_arena);
    }
    set_has_system();
    _impl_.agent_.system_ = system;
  }
  // @@protoc_insertion_point(field_set_allocated:anduril.taskmanager.v1.Principal.system)
}
void Principal::set_allocated_user(::anduril::taskmanager::v1::User* user) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_agent();
  if (user) {
    ::google::protobuf::Arena* submessage_arena = user->GetArena();
    if (message_arena != submessage_arena) {
      user = ::google::protobuf::internal::GetOwnedMessage(message_arena, user, submessage_arena);
    }
    set_has_user();
    _impl_.agent_.user_ = user;
  }
  // @@protoc_insertion_point(field_set_allocated:anduril.taskmanager.v1.Principal.user)
}
void Principal::set_allocated_team(::anduril::taskmanager::v1::Team* team) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_agent();
  if (team) {
    ::google::protobuf::Arena* submessage_arena = team->GetArena();
    if (message_arena != submessage_arena) {
      team = ::google::protobuf::internal::GetOwnedMessage(message_arena, team, submessage_arena);
    }
    set_has_team();
    _impl_.agent_.team_ = team;
  }
  // @@protoc_insertion_point(field_set_allocated:anduril.taskmanager.v1.Principal.team)
}
Principal::Principal(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anduril.taskmanager.v1.Principal)
}
inline PROTOBUF_NDEBUG_INLINE Principal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        agent_{},
        _oneof_case_{from._oneof_case_[0]} {}

Principal::Principal(
    ::google::protobuf::Arena* arena,
    const Principal& from)
    : ::google::protobuf::Message(arena) {
  Principal* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.on_behalf_of_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::anduril::taskmanager::v1::Principal>(arena, *from._impl_.on_behalf_of_)
                : nullptr;
  switch (agent_case()) {
    case AGENT_NOT_SET:
      break;
      case kSystem:
        _impl_.agent_.system_ = CreateMaybeMessage<::anduril::taskmanager::v1::System>(arena, *from._impl_.agent_.system_);
        break;
      case kUser:
        _impl_.agent_.user_ = CreateMaybeMessage<::anduril::taskmanager::v1::User>(arena, *from._impl_.agent_.user_);
        break;
      case kTeam:
        _impl_.agent_.team_ = CreateMaybeMessage<::anduril::taskmanager::v1::Team>(arena, *from._impl_.agent_.team_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:anduril.taskmanager.v1.Principal)
}
inline PROTOBUF_NDEBUG_INLINE Principal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        agent_{},
        _oneof_case_{} {}

inline void Principal::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.on_behalf_of_ = {};
}
Principal::~Principal() {
  // @@protoc_insertion_point(destructor:anduril.taskmanager.v1.Principal)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Principal::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.on_behalf_of_;
  if (has_agent()) {
    clear_agent();
  }
  _impl_.~Impl_();
}

void Principal::clear_agent() {
// @@protoc_insertion_point(one_of_clear_start:anduril.taskmanager.v1.Principal)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (agent_case()) {
    case kSystem: {
      if (GetArena() == nullptr) {
        delete _impl_.agent_.system_;
      }
      break;
    }
    case kUser: {
      if (GetArena() == nullptr) {
        delete _impl_.agent_.user_;
      }
      break;
    }
    case kTeam: {
      if (GetArena() == nullptr) {
        delete _impl_.agent_.team_;
      }
      break;
    }
    case AGENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = AGENT_NOT_SET;
}


PROTOBUF_NOINLINE void Principal::Clear() {
// @@protoc_insertion_point(message_clear_start:anduril.taskmanager.v1.Principal)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.on_behalf_of_ != nullptr);
    _impl_.on_behalf_of_->Clear();
  }
  clear_agent();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Principal::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 4, 4, 0, 2> Principal::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Principal, _impl_._has_bits_),
    0, // no _extensions_
    4, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Principal_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .anduril.taskmanager.v1.Principal on_behalf_of = 3 [json_name = "onBehalfOf"];
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 2, PROTOBUF_FIELD_OFFSET(Principal, _impl_.on_behalf_of_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .anduril.taskmanager.v1.System system = 1 [json_name = "system"];
    {PROTOBUF_FIELD_OFFSET(Principal, _impl_.agent_.system_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .anduril.taskmanager.v1.User user = 2 [json_name = "user"];
    {PROTOBUF_FIELD_OFFSET(Principal, _impl_.agent_.user_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .anduril.taskmanager.v1.Principal on_behalf_of = 3 [json_name = "onBehalfOf"];
    {PROTOBUF_FIELD_OFFSET(Principal, _impl_.on_behalf_of_), _Internal::kHasBitsOffset + 0, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .anduril.taskmanager.v1.Team team = 4 [json_name = "team"];
    {PROTOBUF_FIELD_OFFSET(Principal, _impl_.agent_.team_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::anduril::taskmanager::v1::System>()},
    {::_pbi::TcParser::GetTable<::anduril::taskmanager::v1::User>()},
    {::_pbi::TcParser::GetTable<::anduril::taskmanager::v1::Principal>()},
    {::_pbi::TcParser::GetTable<::anduril::taskmanager::v1::Team>()},
  }}, {{
  }},
};

::uint8_t* Principal::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anduril.taskmanager.v1.Principal)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (agent_case()) {
    case kSystem: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          1, _Internal::system(this),
          _Internal::system(this).GetCachedSize(), target, stream);
      break;
    }
    case kUser: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, _Internal::user(this),
          _Internal::user(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  cached_has_bits = _impl_._has_bits_[0];
  // .anduril.taskmanager.v1.Principal on_behalf_of = 3 [json_name = "onBehalfOf"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::on_behalf_of(this),
        _Internal::on_behalf_of(this).GetCachedSize(), target, stream);
  }

  // .anduril.taskmanager.v1.Team team = 4 [json_name = "team"];
  if (agent_case() == kTeam) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::team(this),
        _Internal::team(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anduril.taskmanager.v1.Principal)
  return target;
}

::size_t Principal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anduril.taskmanager.v1.Principal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .anduril.taskmanager.v1.Principal on_behalf_of = 3 [json_name = "onBehalfOf"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.on_behalf_of_);
  }

  switch (agent_case()) {
    // .anduril.taskmanager.v1.System system = 1 [json_name = "system"];
    case kSystem: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.agent_.system_);
      break;
    }
    // .anduril.taskmanager.v1.User user = 2 [json_name = "user"];
    case kUser: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.agent_.user_);
      break;
    }
    // .anduril.taskmanager.v1.Team team = 4 [json_name = "team"];
    case kTeam: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.agent_.team_);
      break;
    }
    case AGENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Principal::_class_data_ = {
    Principal::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Principal::GetClassData() const {
  return &_class_data_;
}

void Principal::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Principal*>(&to_msg);
  auto& from = static_cast<const Principal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anduril.taskmanager.v1.Principal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_on_behalf_of()->::anduril::taskmanager::v1::Principal::MergeFrom(
        from._internal_on_behalf_of());
  }
  switch (from.agent_case()) {
    case kSystem: {
      _this->_internal_mutable_system()->::anduril::taskmanager::v1::System::MergeFrom(
          from._internal_system());
      break;
    }
    case kUser: {
      _this->_internal_mutable_user()->::anduril::taskmanager::v1::User::MergeFrom(
          from._internal_user());
      break;
    }
    case kTeam: {
      _this->_internal_mutable_team()->::anduril::taskmanager::v1::Team::MergeFrom(
          from._internal_team());
      break;
    }
    case AGENT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Principal::CopyFrom(const Principal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anduril.taskmanager.v1.Principal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Principal::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Principal::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Principal::InternalSwap(Principal* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.on_behalf_of_, other->_impl_.on_behalf_of_);
  swap(_impl_.agent_, other->_impl_.agent_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Principal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_getter, &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_once,
      file_level_metadata_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto[3]);
}
// ===================================================================

class System::_Internal {
 public:
};

System::System(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anduril.taskmanager.v1.System)
}
inline PROTOBUF_NDEBUG_INLINE System::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : service_name_(arena, from.service_name_),
        entity_id_(arena, from.entity_id_),
        asset_id_(arena, from.asset_id_),
        _cached_size_{0} {}

System::System(
    ::google::protobuf::Arena* arena,
    const System& from)
    : ::google::protobuf::Message(arena) {
  System* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.manages_own_scheduling_ = from._impl_.manages_own_scheduling_;

  // @@protoc_insertion_point(copy_constructor:anduril.taskmanager.v1.System)
}
inline PROTOBUF_NDEBUG_INLINE System::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : service_name_(arena),
        entity_id_(arena),
        asset_id_(arena),
        _cached_size_{0} {}

inline void System::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.manages_own_scheduling_ = {};
}
System::~System() {
  // @@protoc_insertion_point(destructor:anduril.taskmanager.v1.System)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void System::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.service_name_.Destroy();
  _impl_.entity_id_.Destroy();
  _impl_.asset_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void System::Clear() {
// @@protoc_insertion_point(message_clear_start:anduril.taskmanager.v1.System)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.service_name_.ClearToEmpty();
  _impl_.entity_id_.ClearToEmpty();
  _impl_.asset_id_.ClearToEmpty();
  _impl_.manages_own_scheduling_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* System::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 67, 2> System::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_System_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool manages_own_scheduling = 4 [json_name = "managesOwnScheduling"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(System, _impl_.manages_own_scheduling_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(System, _impl_.manages_own_scheduling_)}},
    // string service_name = 1 [json_name = "serviceName"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(System, _impl_.service_name_)}},
    // string entity_id = 2 [json_name = "entityId"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(System, _impl_.entity_id_)}},
    // string asset_id = 3 [json_name = "assetId"];
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(System, _impl_.asset_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string service_name = 1 [json_name = "serviceName"];
    {PROTOBUF_FIELD_OFFSET(System, _impl_.service_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string entity_id = 2 [json_name = "entityId"];
    {PROTOBUF_FIELD_OFFSET(System, _impl_.entity_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string asset_id = 3 [json_name = "assetId"];
    {PROTOBUF_FIELD_OFFSET(System, _impl_.asset_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool manages_own_scheduling = 4 [json_name = "managesOwnScheduling"];
    {PROTOBUF_FIELD_OFFSET(System, _impl_.manages_own_scheduling_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\35\14\11\10\0\0\0\0"
    "anduril.taskmanager.v1.System"
    "service_name"
    "entity_id"
    "asset_id"
  }},
};

::uint8_t* System::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anduril.taskmanager.v1.System)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string service_name = 1 [json_name = "serviceName"];
  if (!this->_internal_service_name().empty()) {
    const std::string& _s = this->_internal_service_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "anduril.taskmanager.v1.System.service_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string entity_id = 2 [json_name = "entityId"];
  if (!this->_internal_entity_id().empty()) {
    const std::string& _s = this->_internal_entity_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "anduril.taskmanager.v1.System.entity_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string asset_id = 3 [json_name = "assetId"];
  if (!this->_internal_asset_id().empty()) {
    const std::string& _s = this->_internal_asset_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "anduril.taskmanager.v1.System.asset_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // bool manages_own_scheduling = 4 [json_name = "managesOwnScheduling"];
  if (this->_internal_manages_own_scheduling() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_manages_own_scheduling(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anduril.taskmanager.v1.System)
  return target;
}

::size_t System::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anduril.taskmanager.v1.System)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 1 [json_name = "serviceName"];
  if (!this->_internal_service_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_service_name());
  }

  // string entity_id = 2 [json_name = "entityId"];
  if (!this->_internal_entity_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_entity_id());
  }

  // string asset_id = 3 [json_name = "assetId"];
  if (!this->_internal_asset_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_asset_id());
  }

  // bool manages_own_scheduling = 4 [json_name = "managesOwnScheduling"];
  if (this->_internal_manages_own_scheduling() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData System::_class_data_ = {
    System::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* System::GetClassData() const {
  return &_class_data_;
}

void System::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<System*>(&to_msg);
  auto& from = static_cast<const System&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anduril.taskmanager.v1.System)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_service_name().empty()) {
    _this->_internal_set_service_name(from._internal_service_name());
  }
  if (!from._internal_entity_id().empty()) {
    _this->_internal_set_entity_id(from._internal_entity_id());
  }
  if (!from._internal_asset_id().empty()) {
    _this->_internal_set_asset_id(from._internal_asset_id());
  }
  if (from._internal_manages_own_scheduling() != 0) {
    _this->_internal_set_manages_own_scheduling(from._internal_manages_own_scheduling());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void System::CopyFrom(const System& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anduril.taskmanager.v1.System)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool System::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* System::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void System::InternalSwap(System* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.service_name_, &other->_impl_.service_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.entity_id_, &other->_impl_.entity_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.asset_id_, &other->_impl_.asset_id_, arena);
        swap(_impl_.manages_own_scheduling_, other->_impl_.manages_own_scheduling_);
}

::google::protobuf::Metadata System::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_getter, &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_once,
      file_level_metadata_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto[4]);
}
// ===================================================================

class User::_Internal {
 public:
};

User::User(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anduril.taskmanager.v1.User)
}
inline PROTOBUF_NDEBUG_INLINE User::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : user_id_(arena, from.user_id_),
        _cached_size_{0} {}

User::User(
    ::google::protobuf::Arena* arena,
    const User& from)
    : ::google::protobuf::Message(arena) {
  User* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:anduril.taskmanager.v1.User)
}
inline PROTOBUF_NDEBUG_INLINE User::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : user_id_(arena),
        _cached_size_{0} {}

inline void User::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
User::~User() {
  // @@protoc_insertion_point(destructor:anduril.taskmanager.v1.User)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void User::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.user_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void User::Clear() {
// @@protoc_insertion_point(message_clear_start:anduril.taskmanager.v1.User)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* User::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 43, 2> User::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_User_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string user_id = 1 [json_name = "userId"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(User, _impl_.user_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string user_id = 1 [json_name = "userId"];
    {PROTOBUF_FIELD_OFFSET(User, _impl_.user_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\33\7\0\0\0\0\0\0"
    "anduril.taskmanager.v1.User"
    "user_id"
  }},
};

::uint8_t* User::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anduril.taskmanager.v1.User)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string user_id = 1 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    const std::string& _s = this->_internal_user_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "anduril.taskmanager.v1.User.user_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anduril.taskmanager.v1.User)
  return target;
}

::size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anduril.taskmanager.v1.User)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData User::_class_data_ = {
    User::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* User::GetClassData() const {
  return &_class_data_;
}

void User::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<User*>(&to_msg);
  auto& from = static_cast<const User&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anduril.taskmanager.v1.User)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anduril.taskmanager.v1.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool User::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* User::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void User::InternalSwap(User* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_id_, &other->_impl_.user_id_, arena);
}

::google::protobuf::Metadata User::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_getter, &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_once,
      file_level_metadata_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto[5]);
}
// ===================================================================

class Relations::_Internal {
 public:
  using HasBits = decltype(std::declval<Relations>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Relations, _impl_._has_bits_);
  static const ::anduril::taskmanager::v1::Principal& assignee(const Relations* msg);
  static void set_has_assignee(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::anduril::taskmanager::v1::Principal& Relations::_Internal::assignee(const Relations* msg) {
  return *msg->_impl_.assignee_;
}
Relations::Relations(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anduril.taskmanager.v1.Relations)
}
inline PROTOBUF_NDEBUG_INLINE Relations::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        parent_task_id_(arena, from.parent_task_id_) {}

Relations::Relations(
    ::google::protobuf::Arena* arena,
    const Relations& from)
    : ::google::protobuf::Message(arena) {
  Relations* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.assignee_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::anduril::taskmanager::v1::Principal>(arena, *from._impl_.assignee_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:anduril.taskmanager.v1.Relations)
}
inline PROTOBUF_NDEBUG_INLINE Relations::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        parent_task_id_(arena) {}

inline void Relations::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.assignee_ = {};
}
Relations::~Relations() {
  // @@protoc_insertion_point(destructor:anduril.taskmanager.v1.Relations)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Relations::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.parent_task_id_.Destroy();
  delete _impl_.assignee_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Relations::Clear() {
// @@protoc_insertion_point(message_clear_start:anduril.taskmanager.v1.Relations)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.parent_task_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.assignee_ != nullptr);
    _impl_.assignee_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Relations::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 55, 2> Relations::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Relations, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Relations_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string parent_task_id = 2 [json_name = "parentTaskId"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Relations, _impl_.parent_task_id_)}},
    // .anduril.taskmanager.v1.Principal assignee = 1 [json_name = "assignee"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Relations, _impl_.assignee_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .anduril.taskmanager.v1.Principal assignee = 1 [json_name = "assignee"];
    {PROTOBUF_FIELD_OFFSET(Relations, _impl_.assignee_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string parent_task_id = 2 [json_name = "parentTaskId"];
    {PROTOBUF_FIELD_OFFSET(Relations, _impl_.parent_task_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::anduril::taskmanager::v1::Principal>()},
  }}, {{
    "\40\0\16\0\0\0\0\0"
    "anduril.taskmanager.v1.Relations"
    "parent_task_id"
  }},
};

::uint8_t* Relations::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anduril.taskmanager.v1.Relations)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .anduril.taskmanager.v1.Principal assignee = 1 [json_name = "assignee"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::assignee(this),
        _Internal::assignee(this).GetCachedSize(), target, stream);
  }

  // string parent_task_id = 2 [json_name = "parentTaskId"];
  if (!this->_internal_parent_task_id().empty()) {
    const std::string& _s = this->_internal_parent_task_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "anduril.taskmanager.v1.Relations.parent_task_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anduril.taskmanager.v1.Relations)
  return target;
}

::size_t Relations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anduril.taskmanager.v1.Relations)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent_task_id = 2 [json_name = "parentTaskId"];
  if (!this->_internal_parent_task_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_parent_task_id());
  }

  // .anduril.taskmanager.v1.Principal assignee = 1 [json_name = "assignee"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.assignee_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Relations::_class_data_ = {
    Relations::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Relations::GetClassData() const {
  return &_class_data_;
}

void Relations::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Relations*>(&to_msg);
  auto& from = static_cast<const Relations&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anduril.taskmanager.v1.Relations)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_parent_task_id().empty()) {
    _this->_internal_set_parent_task_id(from._internal_parent_task_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_assignee()->::anduril::taskmanager::v1::Principal::MergeFrom(
        from._internal_assignee());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Relations::CopyFrom(const Relations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anduril.taskmanager.v1.Relations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Relations::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Relations::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Relations::InternalSwap(Relations* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.parent_task_id_, &other->_impl_.parent_task_id_, arena);
  swap(_impl_.assignee_, other->_impl_.assignee_);
}

::google::protobuf::Metadata Relations::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_getter, &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_once,
      file_level_metadata_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto[6]);
}
// ===================================================================

class TaskEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TaskEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TaskEvent, _impl_._has_bits_);
  static const ::anduril::taskmanager::v1::Task& task(const TaskEvent* msg);
  static void set_has_task(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Timestamp& time(const TaskEvent* msg);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::anduril::taskmanager::v1::Task& TaskEvent::_Internal::task(const TaskEvent* msg) {
  return *msg->_impl_.task_;
}
const ::google::protobuf::Timestamp& TaskEvent::_Internal::time(const TaskEvent* msg) {
  return *msg->_impl_.time_;
}
void TaskEvent::clear_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TaskEvent::TaskEvent(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anduril.taskmanager.v1.TaskEvent)
}
inline PROTOBUF_NDEBUG_INLINE TaskEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TaskEvent::TaskEvent(
    ::google::protobuf::Arena* arena,
    const TaskEvent& from)
    : ::google::protobuf::Message(arena) {
  TaskEvent* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.task_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::anduril::taskmanager::v1::Task>(arena, *from._impl_.task_)
                : nullptr;
  _impl_.time_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.time_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, event_type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, event_type_),
           offsetof(Impl_, task_view_) -
               offsetof(Impl_, event_type_) +
               sizeof(Impl_::task_view_));

  // @@protoc_insertion_point(copy_constructor:anduril.taskmanager.v1.TaskEvent)
}
inline PROTOBUF_NDEBUG_INLINE TaskEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TaskEvent::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, task_),
           0,
           offsetof(Impl_, task_view_) -
               offsetof(Impl_, task_) +
               sizeof(Impl_::task_view_));
}
TaskEvent::~TaskEvent() {
  // @@protoc_insertion_point(destructor:anduril.taskmanager.v1.TaskEvent)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TaskEvent::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.task_;
  delete _impl_.time_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TaskEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:anduril.taskmanager.v1.TaskEvent)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.task_ != nullptr);
      _impl_.task_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.time_ != nullptr);
      _impl_.time_->Clear();
    }
  }
  ::memset(&_impl_.event_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.task_view_) -
      reinterpret_cast<char*>(&_impl_.event_type_)) + sizeof(_impl_.task_view_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TaskEvent::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 0, 2> TaskEvent::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TaskEvent, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TaskEvent_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .google.protobuf.Timestamp time = 4 [json_name = "time"];
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(TaskEvent, _impl_.time_)}},
    // .anduril.taskmanager.v1.EventType event_type = 1 [json_name = "eventType"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TaskEvent, _impl_.event_type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TaskEvent, _impl_.event_type_)}},
    // .anduril.taskmanager.v1.Task task = 2 [json_name = "task"];
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(TaskEvent, _impl_.task_)}},
    // .anduril.taskmanager.v1.TaskView task_view = 3 [json_name = "taskView"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TaskEvent, _impl_.task_view_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TaskEvent, _impl_.task_view_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .anduril.taskmanager.v1.EventType event_type = 1 [json_name = "eventType"];
    {PROTOBUF_FIELD_OFFSET(TaskEvent, _impl_.event_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .anduril.taskmanager.v1.Task task = 2 [json_name = "task"];
    {PROTOBUF_FIELD_OFFSET(TaskEvent, _impl_.task_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .anduril.taskmanager.v1.TaskView task_view = 3 [json_name = "taskView"];
    {PROTOBUF_FIELD_OFFSET(TaskEvent, _impl_.task_view_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .google.protobuf.Timestamp time = 4 [json_name = "time"];
    {PROTOBUF_FIELD_OFFSET(TaskEvent, _impl_.time_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::anduril::taskmanager::v1::Task>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
  }},
};

::uint8_t* TaskEvent::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anduril.taskmanager.v1.TaskEvent)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .anduril.taskmanager.v1.EventType event_type = 1 [json_name = "eventType"];
  if (this->_internal_event_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_event_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .anduril.taskmanager.v1.Task task = 2 [json_name = "task"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::task(this),
        _Internal::task(this).GetCachedSize(), target, stream);
  }

  // .anduril.taskmanager.v1.TaskView task_view = 3 [json_name = "taskView"];
  if (this->_internal_task_view() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_task_view(), target);
  }

  // .google.protobuf.Timestamp time = 4 [json_name = "time"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anduril.taskmanager.v1.TaskEvent)
  return target;
}

::size_t TaskEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anduril.taskmanager.v1.TaskEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .anduril.taskmanager.v1.Task task = 2 [json_name = "task"];
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.task_);
    }

    // .google.protobuf.Timestamp time = 4 [json_name = "time"];
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.time_);
    }

  }
  // .anduril.taskmanager.v1.EventType event_type = 1 [json_name = "eventType"];
  if (this->_internal_event_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_event_type());
  }

  // .anduril.taskmanager.v1.TaskView task_view = 3 [json_name = "taskView"];
  if (this->_internal_task_view() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_task_view());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TaskEvent::_class_data_ = {
    TaskEvent::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TaskEvent::GetClassData() const {
  return &_class_data_;
}

void TaskEvent::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TaskEvent*>(&to_msg);
  auto& from = static_cast<const TaskEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anduril.taskmanager.v1.TaskEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_task()->::anduril::taskmanager::v1::Task::MergeFrom(
          from._internal_task());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_time()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_time());
    }
  }
  if (from._internal_event_type() != 0) {
    _this->_internal_set_event_type(from._internal_event_type());
  }
  if (from._internal_task_view() != 0) {
    _this->_internal_set_task_view(from._internal_task_view());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TaskEvent::CopyFrom(const TaskEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anduril.taskmanager.v1.TaskEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TaskEvent::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TaskEvent::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TaskEvent::InternalSwap(TaskEvent* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskEvent, _impl_.task_view_)
      + sizeof(TaskEvent::_impl_.task_view_)
      - PROTOBUF_FIELD_OFFSET(TaskEvent, _impl_.task_)>(
          reinterpret_cast<char*>(&_impl_.task_),
          reinterpret_cast<char*>(&other->_impl_.task_));
}

::google::protobuf::Metadata TaskEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_getter, &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_once,
      file_level_metadata_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto[7]);
}
// ===================================================================

class TaskVersion::_Internal {
 public:
};

TaskVersion::TaskVersion(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anduril.taskmanager.v1.TaskVersion)
}
inline PROTOBUF_NDEBUG_INLINE TaskVersion::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : task_id_(arena, from.task_id_),
        _cached_size_{0} {}

TaskVersion::TaskVersion(
    ::google::protobuf::Arena* arena,
    const TaskVersion& from)
    : ::google::protobuf::Message(arena) {
  TaskVersion* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, definition_version_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, definition_version_),
           offsetof(Impl_, status_version_) -
               offsetof(Impl_, definition_version_) +
               sizeof(Impl_::status_version_));

  // @@protoc_insertion_point(copy_constructor:anduril.taskmanager.v1.TaskVersion)
}
inline PROTOBUF_NDEBUG_INLINE TaskVersion::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : task_id_(arena),
        _cached_size_{0} {}

inline void TaskVersion::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, definition_version_),
           0,
           offsetof(Impl_, status_version_) -
               offsetof(Impl_, definition_version_) +
               sizeof(Impl_::status_version_));
}
TaskVersion::~TaskVersion() {
  // @@protoc_insertion_point(destructor:anduril.taskmanager.v1.TaskVersion)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TaskVersion::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.task_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TaskVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:anduril.taskmanager.v1.TaskVersion)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.task_id_.ClearToEmpty();
  ::memset(&_impl_.definition_version_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.status_version_) -
      reinterpret_cast<char*>(&_impl_.definition_version_)) + sizeof(_impl_.status_version_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TaskVersion::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 50, 2> TaskVersion::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TaskVersion_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string task_id = 1 [json_name = "taskId"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TaskVersion, _impl_.task_id_)}},
    // uint32 definition_version = 2 [json_name = "definitionVersion"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TaskVersion, _impl_.definition_version_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TaskVersion, _impl_.definition_version_)}},
    // uint32 status_version = 3 [json_name = "statusVersion"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TaskVersion, _impl_.status_version_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TaskVersion, _impl_.status_version_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string task_id = 1 [json_name = "taskId"];
    {PROTOBUF_FIELD_OFFSET(TaskVersion, _impl_.task_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 definition_version = 2 [json_name = "definitionVersion"];
    {PROTOBUF_FIELD_OFFSET(TaskVersion, _impl_.definition_version_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 status_version = 3 [json_name = "statusVersion"];
    {PROTOBUF_FIELD_OFFSET(TaskVersion, _impl_.status_version_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
    "\42\7\0\0\0\0\0\0"
    "anduril.taskmanager.v1.TaskVersion"
    "task_id"
  }},
};

::uint8_t* TaskVersion::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anduril.taskmanager.v1.TaskVersion)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string task_id = 1 [json_name = "taskId"];
  if (!this->_internal_task_id().empty()) {
    const std::string& _s = this->_internal_task_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "anduril.taskmanager.v1.TaskVersion.task_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint32 definition_version = 2 [json_name = "definitionVersion"];
  if (this->_internal_definition_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_definition_version(), target);
  }

  // uint32 status_version = 3 [json_name = "statusVersion"];
  if (this->_internal_status_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_status_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anduril.taskmanager.v1.TaskVersion)
  return target;
}

::size_t TaskVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anduril.taskmanager.v1.TaskVersion)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string task_id = 1 [json_name = "taskId"];
  if (!this->_internal_task_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_task_id());
  }

  // uint32 definition_version = 2 [json_name = "definitionVersion"];
  if (this->_internal_definition_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_definition_version());
  }

  // uint32 status_version = 3 [json_name = "statusVersion"];
  if (this->_internal_status_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_status_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TaskVersion::_class_data_ = {
    TaskVersion::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TaskVersion::GetClassData() const {
  return &_class_data_;
}

void TaskVersion::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TaskVersion*>(&to_msg);
  auto& from = static_cast<const TaskVersion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anduril.taskmanager.v1.TaskVersion)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_task_id().empty()) {
    _this->_internal_set_task_id(from._internal_task_id());
  }
  if (from._internal_definition_version() != 0) {
    _this->_internal_set_definition_version(from._internal_definition_version());
  }
  if (from._internal_status_version() != 0) {
    _this->_internal_set_status_version(from._internal_status_version());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TaskVersion::CopyFrom(const TaskVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anduril.taskmanager.v1.TaskVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TaskVersion::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TaskVersion::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TaskVersion::InternalSwap(TaskVersion* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.task_id_, &other->_impl_.task_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskVersion, _impl_.status_version_)
      + sizeof(TaskVersion::_impl_.status_version_)
      - PROTOBUF_FIELD_OFFSET(TaskVersion, _impl_.definition_version_)>(
          reinterpret_cast<char*>(&_impl_.definition_version_),
          reinterpret_cast<char*>(&other->_impl_.definition_version_));
}

::google::protobuf::Metadata TaskVersion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_getter, &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_once,
      file_level_metadata_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto[8]);
}
// ===================================================================

class StatusUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<StatusUpdate>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StatusUpdate, _impl_._has_bits_);
  static const ::anduril::taskmanager::v1::TaskVersion& version(const StatusUpdate* msg);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::anduril::taskmanager::v1::TaskStatus& status(const StatusUpdate* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::anduril::taskmanager::v1::Principal& author(const StatusUpdate* msg);
  static void set_has_author(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::google::protobuf::Timestamp& scheduled_time(const StatusUpdate* msg);
  static void set_has_scheduled_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::anduril::taskmanager::v1::TaskVersion& StatusUpdate::_Internal::version(const StatusUpdate* msg) {
  return *msg->_impl_.version_;
}
const ::anduril::taskmanager::v1::TaskStatus& StatusUpdate::_Internal::status(const StatusUpdate* msg) {
  return *msg->_impl_.status_;
}
const ::anduril::taskmanager::v1::Principal& StatusUpdate::_Internal::author(const StatusUpdate* msg) {
  return *msg->_impl_.author_;
}
const ::google::protobuf::Timestamp& StatusUpdate::_Internal::scheduled_time(const StatusUpdate* msg) {
  return *msg->_impl_.scheduled_time_;
}
void StatusUpdate::clear_scheduled_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.scheduled_time_ != nullptr) _impl_.scheduled_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
StatusUpdate::StatusUpdate(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anduril.taskmanager.v1.StatusUpdate)
}
inline PROTOBUF_NDEBUG_INLINE StatusUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

StatusUpdate::StatusUpdate(
    ::google::protobuf::Arena* arena,
    const StatusUpdate& from)
    : ::google::protobuf::Message(arena) {
  StatusUpdate* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.version_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::anduril::taskmanager::v1::TaskVersion>(arena, *from._impl_.version_)
                : nullptr;
  _impl_.status_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::anduril::taskmanager::v1::TaskStatus>(arena, *from._impl_.status_)
                : nullptr;
  _impl_.author_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::anduril::taskmanager::v1::Principal>(arena, *from._impl_.author_)
                : nullptr;
  _impl_.scheduled_time_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.scheduled_time_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:anduril.taskmanager.v1.StatusUpdate)
}
inline PROTOBUF_NDEBUG_INLINE StatusUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void StatusUpdate::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, version_),
           0,
           offsetof(Impl_, scheduled_time_) -
               offsetof(Impl_, version_) +
               sizeof(Impl_::scheduled_time_));
}
StatusUpdate::~StatusUpdate() {
  // @@protoc_insertion_point(destructor:anduril.taskmanager.v1.StatusUpdate)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void StatusUpdate::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.version_;
  delete _impl_.status_;
  delete _impl_.author_;
  delete _impl_.scheduled_time_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void StatusUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:anduril.taskmanager.v1.StatusUpdate)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.version_ != nullptr);
      _impl_.version_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.status_ != nullptr);
      _impl_.status_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.author_ != nullptr);
      _impl_.author_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.scheduled_time_ != nullptr);
      _impl_.scheduled_time_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* StatusUpdate::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2> StatusUpdate::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StatusUpdate, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_StatusUpdate_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .google.protobuf.Timestamp scheduled_time = 4 [json_name = "scheduledTime"];
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(StatusUpdate, _impl_.scheduled_time_)}},
    // .anduril.taskmanager.v1.TaskVersion version = 1 [json_name = "version"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(StatusUpdate, _impl_.version_)}},
    // .anduril.taskmanager.v1.TaskStatus status = 2 [json_name = "status"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(StatusUpdate, _impl_.status_)}},
    // .anduril.taskmanager.v1.Principal author = 3 [json_name = "author"];
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(StatusUpdate, _impl_.author_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .anduril.taskmanager.v1.TaskVersion version = 1 [json_name = "version"];
    {PROTOBUF_FIELD_OFFSET(StatusUpdate, _impl_.version_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .anduril.taskmanager.v1.TaskStatus status = 2 [json_name = "status"];
    {PROTOBUF_FIELD_OFFSET(StatusUpdate, _impl_.status_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .anduril.taskmanager.v1.Principal author = 3 [json_name = "author"];
    {PROTOBUF_FIELD_OFFSET(StatusUpdate, _impl_.author_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp scheduled_time = 4 [json_name = "scheduledTime"];
    {PROTOBUF_FIELD_OFFSET(StatusUpdate, _impl_.scheduled_time_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::anduril::taskmanager::v1::TaskVersion>()},
    {::_pbi::TcParser::GetTable<::anduril::taskmanager::v1::TaskStatus>()},
    {::_pbi::TcParser::GetTable<::anduril::taskmanager::v1::Principal>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
  }},
};

::uint8_t* StatusUpdate::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anduril.taskmanager.v1.StatusUpdate)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .anduril.taskmanager.v1.TaskVersion version = 1 [json_name = "version"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::version(this),
        _Internal::version(this).GetCachedSize(), target, stream);
  }

  // .anduril.taskmanager.v1.TaskStatus status = 2 [json_name = "status"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .anduril.taskmanager.v1.Principal author = 3 [json_name = "author"];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::author(this),
        _Internal::author(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp scheduled_time = 4 [json_name = "scheduledTime"];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::scheduled_time(this),
        _Internal::scheduled_time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anduril.taskmanager.v1.StatusUpdate)
  return target;
}

::size_t StatusUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anduril.taskmanager.v1.StatusUpdate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .anduril.taskmanager.v1.TaskVersion version = 1 [json_name = "version"];
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.version_);
    }

    // .anduril.taskmanager.v1.TaskStatus status = 2 [json_name = "status"];
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.status_);
    }

    // .anduril.taskmanager.v1.Principal author = 3 [json_name = "author"];
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.author_);
    }

    // .google.protobuf.Timestamp scheduled_time = 4 [json_name = "scheduledTime"];
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.scheduled_time_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData StatusUpdate::_class_data_ = {
    StatusUpdate::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* StatusUpdate::GetClassData() const {
  return &_class_data_;
}

void StatusUpdate::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<StatusUpdate*>(&to_msg);
  auto& from = static_cast<const StatusUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anduril.taskmanager.v1.StatusUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_version()->::anduril::taskmanager::v1::TaskVersion::MergeFrom(
          from._internal_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_status()->::anduril::taskmanager::v1::TaskStatus::MergeFrom(
          from._internal_status());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_author()->::anduril::taskmanager::v1::Principal::MergeFrom(
          from._internal_author());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_scheduled_time()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_scheduled_time());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StatusUpdate::CopyFrom(const StatusUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anduril.taskmanager.v1.StatusUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool StatusUpdate::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* StatusUpdate::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void StatusUpdate::InternalSwap(StatusUpdate* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatusUpdate, _impl_.scheduled_time_)
      + sizeof(StatusUpdate::_impl_.scheduled_time_)
      - PROTOBUF_FIELD_OFFSET(StatusUpdate, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::google::protobuf::Metadata StatusUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_getter, &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_once,
      file_level_metadata_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto[9]);
}
// ===================================================================

class DefinitionUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<DefinitionUpdate>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DefinitionUpdate, _impl_._has_bits_);
  static const ::anduril::taskmanager::v1::Task& task(const DefinitionUpdate* msg);
  static void set_has_task(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::anduril::taskmanager::v1::Task& DefinitionUpdate::_Internal::task(const DefinitionUpdate* msg) {
  return *msg->_impl_.task_;
}
DefinitionUpdate::DefinitionUpdate(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anduril.taskmanager.v1.DefinitionUpdate)
}
inline PROTOBUF_NDEBUG_INLINE DefinitionUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

DefinitionUpdate::DefinitionUpdate(
    ::google::protobuf::Arena* arena,
    const DefinitionUpdate& from)
    : ::google::protobuf::Message(arena) {
  DefinitionUpdate* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.task_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::anduril::taskmanager::v1::Task>(arena, *from._impl_.task_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:anduril.taskmanager.v1.DefinitionUpdate)
}
inline PROTOBUF_NDEBUG_INLINE DefinitionUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void DefinitionUpdate::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.task_ = {};
}
DefinitionUpdate::~DefinitionUpdate() {
  // @@protoc_insertion_point(destructor:anduril.taskmanager.v1.DefinitionUpdate)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DefinitionUpdate::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.task_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void DefinitionUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:anduril.taskmanager.v1.DefinitionUpdate)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.task_ != nullptr);
    _impl_.task_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DefinitionUpdate::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> DefinitionUpdate::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DefinitionUpdate, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DefinitionUpdate_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .anduril.taskmanager.v1.Task task = 1 [json_name = "task"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(DefinitionUpdate, _impl_.task_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .anduril.taskmanager.v1.Task task = 1 [json_name = "task"];
    {PROTOBUF_FIELD_OFFSET(DefinitionUpdate, _impl_.task_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::anduril::taskmanager::v1::Task>()},
  }}, {{
  }},
};

::uint8_t* DefinitionUpdate::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anduril.taskmanager.v1.DefinitionUpdate)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .anduril.taskmanager.v1.Task task = 1 [json_name = "task"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::task(this),
        _Internal::task(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anduril.taskmanager.v1.DefinitionUpdate)
  return target;
}

::size_t DefinitionUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anduril.taskmanager.v1.DefinitionUpdate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .anduril.taskmanager.v1.Task task = 1 [json_name = "task"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.task_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData DefinitionUpdate::_class_data_ = {
    DefinitionUpdate::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* DefinitionUpdate::GetClassData() const {
  return &_class_data_;
}

void DefinitionUpdate::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<DefinitionUpdate*>(&to_msg);
  auto& from = static_cast<const DefinitionUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anduril.taskmanager.v1.DefinitionUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_task()->::anduril::taskmanager::v1::Task::MergeFrom(
        from._internal_task());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DefinitionUpdate::CopyFrom(const DefinitionUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anduril.taskmanager.v1.DefinitionUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DefinitionUpdate::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* DefinitionUpdate::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void DefinitionUpdate::InternalSwap(DefinitionUpdate* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.task_, other->_impl_.task_);
}

::google::protobuf::Metadata DefinitionUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_getter, &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_once,
      file_level_metadata_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto[10]);
}
// ===================================================================

class Owner::_Internal {
 public:
};

Owner::Owner(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anduril.taskmanager.v1.Owner)
}
inline PROTOBUF_NDEBUG_INLINE Owner::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : asset_id_(arena, from.asset_id_),
        entity_id_(arena, from.entity_id_),
        _cached_size_{0} {}

Owner::Owner(
    ::google::protobuf::Arena* arena,
    const Owner& from)
    : ::google::protobuf::Message(arena) {
  Owner* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:anduril.taskmanager.v1.Owner)
}
inline PROTOBUF_NDEBUG_INLINE Owner::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : asset_id_(arena),
        entity_id_(arena),
        _cached_size_{0} {}

inline void Owner::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Owner::~Owner() {
  // @@protoc_insertion_point(destructor:anduril.taskmanager.v1.Owner)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Owner::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.asset_id_.Destroy();
  _impl_.entity_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Owner::Clear() {
// @@protoc_insertion_point(message_clear_start:anduril.taskmanager.v1.Owner)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.asset_id_.ClearToEmpty();
  _impl_.entity_id_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Owner::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 54, 2> Owner::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Owner_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string entity_id = 2 [json_name = "entityId"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Owner, _impl_.entity_id_)}},
    // string asset_id = 1 [json_name = "assetId"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Owner, _impl_.asset_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string asset_id = 1 [json_name = "assetId"];
    {PROTOBUF_FIELD_OFFSET(Owner, _impl_.asset_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string entity_id = 2 [json_name = "entityId"];
    {PROTOBUF_FIELD_OFFSET(Owner, _impl_.entity_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\34\10\11\0\0\0\0\0"
    "anduril.taskmanager.v1.Owner"
    "asset_id"
    "entity_id"
  }},
};

::uint8_t* Owner::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anduril.taskmanager.v1.Owner)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string asset_id = 1 [json_name = "assetId"];
  if (!this->_internal_asset_id().empty()) {
    const std::string& _s = this->_internal_asset_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "anduril.taskmanager.v1.Owner.asset_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string entity_id = 2 [json_name = "entityId"];
  if (!this->_internal_entity_id().empty()) {
    const std::string& _s = this->_internal_entity_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "anduril.taskmanager.v1.Owner.entity_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anduril.taskmanager.v1.Owner)
  return target;
}

::size_t Owner::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anduril.taskmanager.v1.Owner)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string asset_id = 1 [json_name = "assetId"];
  if (!this->_internal_asset_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_asset_id());
  }

  // string entity_id = 2 [json_name = "entityId"];
  if (!this->_internal_entity_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_entity_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Owner::_class_data_ = {
    Owner::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Owner::GetClassData() const {
  return &_class_data_;
}

void Owner::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Owner*>(&to_msg);
  auto& from = static_cast<const Owner&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anduril.taskmanager.v1.Owner)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_asset_id().empty()) {
    _this->_internal_set_asset_id(from._internal_asset_id());
  }
  if (!from._internal_entity_id().empty()) {
    _this->_internal_set_entity_id(from._internal_entity_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Owner::CopyFrom(const Owner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anduril.taskmanager.v1.Owner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Owner::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Owner::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Owner::InternalSwap(Owner* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.asset_id_, &other->_impl_.asset_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.entity_id_, &other->_impl_.entity_id_, arena);
}

::google::protobuf::Metadata Owner::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_getter, &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_once,
      file_level_metadata_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto[11]);
}
// ===================================================================

class Replication::_Internal {
 public:
  using HasBits = decltype(std::declval<Replication>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Replication, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& stale_time(const Replication* msg);
  static void set_has_stale_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::google::protobuf::Timestamp& Replication::_Internal::stale_time(const Replication* msg) {
  return *msg->_impl_.stale_time_;
}
void Replication::clear_stale_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.stale_time_ != nullptr) _impl_.stale_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Replication::Replication(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anduril.taskmanager.v1.Replication)
}
inline PROTOBUF_NDEBUG_INLINE Replication::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Replication::Replication(
    ::google::protobuf::Arena* arena,
    const Replication& from)
    : ::google::protobuf::Message(arena) {
  Replication* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.stale_time_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.stale_time_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:anduril.taskmanager.v1.Replication)
}
inline PROTOBUF_NDEBUG_INLINE Replication::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Replication::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.stale_time_ = {};
}
Replication::~Replication() {
  // @@protoc_insertion_point(destructor:anduril.taskmanager.v1.Replication)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Replication::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.stale_time_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Replication::Clear() {
// @@protoc_insertion_point(message_clear_start:anduril.taskmanager.v1.Replication)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.stale_time_ != nullptr);
    _impl_.stale_time_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Replication::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> Replication::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Replication, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Replication_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .google.protobuf.Timestamp stale_time = 1 [json_name = "staleTime"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Replication, _impl_.stale_time_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Timestamp stale_time = 1 [json_name = "staleTime"];
    {PROTOBUF_FIELD_OFFSET(Replication, _impl_.stale_time_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
  }},
};

::uint8_t* Replication::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anduril.taskmanager.v1.Replication)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp stale_time = 1 [json_name = "staleTime"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::stale_time(this),
        _Internal::stale_time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anduril.taskmanager.v1.Replication)
  return target;
}

::size_t Replication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anduril.taskmanager.v1.Replication)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp stale_time = 1 [json_name = "staleTime"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.stale_time_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Replication::_class_data_ = {
    Replication::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Replication::GetClassData() const {
  return &_class_data_;
}

void Replication::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Replication*>(&to_msg);
  auto& from = static_cast<const Replication&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anduril.taskmanager.v1.Replication)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_stale_time()->::google::protobuf::Timestamp::MergeFrom(
        from._internal_stale_time());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Replication::CopyFrom(const Replication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anduril.taskmanager.v1.Replication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Replication::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Replication::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Replication::InternalSwap(Replication* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.stale_time_, other->_impl_.stale_time_);
}

::google::protobuf::Metadata Replication::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_getter, &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_once,
      file_level_metadata_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto[12]);
}
// ===================================================================

class Allocation::_Internal {
 public:
};

Allocation::Allocation(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anduril.taskmanager.v1.Allocation)
}
inline PROTOBUF_NDEBUG_INLINE Allocation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : active_agents_{visibility, arena, from.active_agents_},
        _cached_size_{0} {}

Allocation::Allocation(
    ::google::protobuf::Arena* arena,
    const Allocation& from)
    : ::google::protobuf::Message(arena) {
  Allocation* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:anduril.taskmanager.v1.Allocation)
}
inline PROTOBUF_NDEBUG_INLINE Allocation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : active_agents_{visibility, arena},
        _cached_size_{0} {}

inline void Allocation::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Allocation::~Allocation() {
  // @@protoc_insertion_point(destructor:anduril.taskmanager.v1.Allocation)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Allocation::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Allocation::Clear() {
// @@protoc_insertion_point(message_clear_start:anduril.taskmanager.v1.Allocation)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.active_agents_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Allocation::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> Allocation::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Allocation_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .anduril.taskmanager.v1.Agent active_agents = 1 [json_name = "activeAgents"];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Allocation, _impl_.active_agents_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .anduril.taskmanager.v1.Agent active_agents = 1 [json_name = "activeAgents"];
    {PROTOBUF_FIELD_OFFSET(Allocation, _impl_.active_agents_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::anduril::taskmanager::v1::Agent>()},
  }}, {{
  }},
};

::uint8_t* Allocation::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anduril.taskmanager.v1.Allocation)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .anduril.taskmanager.v1.Agent active_agents = 1 [json_name = "activeAgents"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_active_agents_size()); i < n; i++) {
    const auto& repfield = this->_internal_active_agents().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anduril.taskmanager.v1.Allocation)
  return target;
}

::size_t Allocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anduril.taskmanager.v1.Allocation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .anduril.taskmanager.v1.Agent active_agents = 1 [json_name = "activeAgents"];
  total_size += 1UL * this->_internal_active_agents_size();
  for (const auto& msg : this->_internal_active_agents()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Allocation::_class_data_ = {
    Allocation::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Allocation::GetClassData() const {
  return &_class_data_;
}

void Allocation::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Allocation*>(&to_msg);
  auto& from = static_cast<const Allocation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anduril.taskmanager.v1.Allocation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_active_agents()->MergeFrom(
      from._internal_active_agents());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Allocation::CopyFrom(const Allocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anduril.taskmanager.v1.Allocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Allocation::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Allocation::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Allocation::InternalSwap(Allocation* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.active_agents_.InternalSwap(&other->_impl_.active_agents_);
}

::google::protobuf::Metadata Allocation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_getter, &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_once,
      file_level_metadata_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto[13]);
}
// ===================================================================

class Team::_Internal {
 public:
};

Team::Team(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anduril.taskmanager.v1.Team)
}
inline PROTOBUF_NDEBUG_INLINE Team::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : members_{visibility, arena, from.members_},
        entity_id_(arena, from.entity_id_),
        _cached_size_{0} {}

Team::Team(
    ::google::protobuf::Arena* arena,
    const Team& from)
    : ::google::protobuf::Message(arena) {
  Team* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:anduril.taskmanager.v1.Team)
}
inline PROTOBUF_NDEBUG_INLINE Team::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : members_{visibility, arena},
        entity_id_(arena),
        _cached_size_{0} {}

inline void Team::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Team::~Team() {
  // @@protoc_insertion_point(destructor:anduril.taskmanager.v1.Team)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Team::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.entity_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Team::Clear() {
// @@protoc_insertion_point(message_clear_start:anduril.taskmanager.v1.Team)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.members_.Clear();
  _impl_.entity_id_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Team::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 45, 2> Team::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Team_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .anduril.taskmanager.v1.Agent members = 2 [json_name = "members"];
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Team, _impl_.members_)}},
    // string entity_id = 1 [json_name = "entityId"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Team, _impl_.entity_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string entity_id = 1 [json_name = "entityId"];
    {PROTOBUF_FIELD_OFFSET(Team, _impl_.entity_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .anduril.taskmanager.v1.Agent members = 2 [json_name = "members"];
    {PROTOBUF_FIELD_OFFSET(Team, _impl_.members_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::anduril::taskmanager::v1::Agent>()},
  }}, {{
    "\33\11\0\0\0\0\0\0"
    "anduril.taskmanager.v1.Team"
    "entity_id"
  }},
};

::uint8_t* Team::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anduril.taskmanager.v1.Team)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string entity_id = 1 [json_name = "entityId"];
  if (!this->_internal_entity_id().empty()) {
    const std::string& _s = this->_internal_entity_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "anduril.taskmanager.v1.Team.entity_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .anduril.taskmanager.v1.Agent members = 2 [json_name = "members"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_members().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anduril.taskmanager.v1.Team)
  return target;
}

::size_t Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anduril.taskmanager.v1.Team)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .anduril.taskmanager.v1.Agent members = 2 [json_name = "members"];
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->_internal_members()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string entity_id = 1 [json_name = "entityId"];
  if (!this->_internal_entity_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_entity_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Team::_class_data_ = {
    Team::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Team::GetClassData() const {
  return &_class_data_;
}

void Team::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Team*>(&to_msg);
  auto& from = static_cast<const Team&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anduril.taskmanager.v1.Team)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_members()->MergeFrom(
      from._internal_members());
  if (!from._internal_entity_id().empty()) {
    _this->_internal_set_entity_id(from._internal_entity_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Team::CopyFrom(const Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anduril.taskmanager.v1.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Team::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Team::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Team::InternalSwap(Team* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.members_.InternalSwap(&other->_impl_.members_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.entity_id_, &other->_impl_.entity_id_, arena);
}

::google::protobuf::Metadata Team::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_getter, &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_once,
      file_level_metadata_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto[14]);
}
// ===================================================================

class Agent::_Internal {
 public:
};

Agent::Agent(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anduril.taskmanager.v1.Agent)
}
inline PROTOBUF_NDEBUG_INLINE Agent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : asset_id_(arena, from.asset_id_),
        entity_id_(arena, from.entity_id_),
        _cached_size_{0} {}

Agent::Agent(
    ::google::protobuf::Arena* arena,
    const Agent& from)
    : ::google::protobuf::Message(arena) {
  Agent* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:anduril.taskmanager.v1.Agent)
}
inline PROTOBUF_NDEBUG_INLINE Agent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : asset_id_(arena),
        entity_id_(arena),
        _cached_size_{0} {}

inline void Agent::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Agent::~Agent() {
  // @@protoc_insertion_point(destructor:anduril.taskmanager.v1.Agent)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Agent::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.asset_id_.Destroy();
  _impl_.entity_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Agent::Clear() {
// @@protoc_insertion_point(message_clear_start:anduril.taskmanager.v1.Agent)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.asset_id_.ClearToEmpty();
  _impl_.entity_id_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Agent::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 54, 2> Agent::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Agent_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string entity_id = 2 [json_name = "entityId"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Agent, _impl_.entity_id_)}},
    // string asset_id = 1 [json_name = "assetId"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Agent, _impl_.asset_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string asset_id = 1 [json_name = "assetId"];
    {PROTOBUF_FIELD_OFFSET(Agent, _impl_.asset_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string entity_id = 2 [json_name = "entityId"];
    {PROTOBUF_FIELD_OFFSET(Agent, _impl_.entity_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\34\10\11\0\0\0\0\0"
    "anduril.taskmanager.v1.Agent"
    "asset_id"
    "entity_id"
  }},
};

::uint8_t* Agent::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anduril.taskmanager.v1.Agent)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string asset_id = 1 [json_name = "assetId"];
  if (!this->_internal_asset_id().empty()) {
    const std::string& _s = this->_internal_asset_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "anduril.taskmanager.v1.Agent.asset_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string entity_id = 2 [json_name = "entityId"];
  if (!this->_internal_entity_id().empty()) {
    const std::string& _s = this->_internal_entity_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "anduril.taskmanager.v1.Agent.entity_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anduril.taskmanager.v1.Agent)
  return target;
}

::size_t Agent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anduril.taskmanager.v1.Agent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string asset_id = 1 [json_name = "assetId"];
  if (!this->_internal_asset_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_asset_id());
  }

  // string entity_id = 2 [json_name = "entityId"];
  if (!this->_internal_entity_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_entity_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Agent::_class_data_ = {
    Agent::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Agent::GetClassData() const {
  return &_class_data_;
}

void Agent::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Agent*>(&to_msg);
  auto& from = static_cast<const Agent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anduril.taskmanager.v1.Agent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_asset_id().empty()) {
    _this->_internal_set_asset_id(from._internal_asset_id());
  }
  if (!from._internal_entity_id().empty()) {
    _this->_internal_set_entity_id(from._internal_entity_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Agent::CopyFrom(const Agent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anduril.taskmanager.v1.Agent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Agent::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Agent::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Agent::InternalSwap(Agent* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.asset_id_, &other->_impl_.asset_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.entity_id_, &other->_impl_.entity_id_, arena);
}

::google::protobuf::Metadata Agent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_getter, &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_once,
      file_level_metadata_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto[15]);
}
// ===================================================================

class TaskEntity::_Internal {
 public:
  using HasBits = decltype(std::declval<TaskEntity>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TaskEntity, _impl_._has_bits_);
  static const ::anduril::entitymanager::v1::Entity& entity(const TaskEntity* msg);
  static void set_has_entity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::anduril::entitymanager::v1::Entity& TaskEntity::_Internal::entity(const TaskEntity* msg) {
  return *msg->_impl_.entity_;
}
void TaskEntity::clear_entity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.entity_ != nullptr) _impl_.entity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TaskEntity::TaskEntity(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anduril.taskmanager.v1.TaskEntity)
}
inline PROTOBUF_NDEBUG_INLINE TaskEntity::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TaskEntity::TaskEntity(
    ::google::protobuf::Arena* arena,
    const TaskEntity& from)
    : ::google::protobuf::Message(arena) {
  TaskEntity* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.entity_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::anduril::entitymanager::v1::Entity>(arena, *from._impl_.entity_)
                : nullptr;
  _impl_.snapshot_ = from._impl_.snapshot_;

  // @@protoc_insertion_point(copy_constructor:anduril.taskmanager.v1.TaskEntity)
}
inline PROTOBUF_NDEBUG_INLINE TaskEntity::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TaskEntity::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, entity_),
           0,
           offsetof(Impl_, snapshot_) -
               offsetof(Impl_, entity_) +
               sizeof(Impl_::snapshot_));
}
TaskEntity::~TaskEntity() {
  // @@protoc_insertion_point(destructor:anduril.taskmanager.v1.TaskEntity)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TaskEntity::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.entity_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TaskEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:anduril.taskmanager.v1.TaskEntity)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.entity_ != nullptr);
    _impl_.entity_->Clear();
  }
  _impl_.snapshot_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TaskEntity::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> TaskEntity::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TaskEntity, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TaskEntity_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool snapshot = 2 [json_name = "snapshot"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TaskEntity, _impl_.snapshot_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TaskEntity, _impl_.snapshot_)}},
    // .anduril.entitymanager.v1.Entity entity = 1 [json_name = "entity"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TaskEntity, _impl_.entity_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .anduril.entitymanager.v1.Entity entity = 1 [json_name = "entity"];
    {PROTOBUF_FIELD_OFFSET(TaskEntity, _impl_.entity_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool snapshot = 2 [json_name = "snapshot"];
    {PROTOBUF_FIELD_OFFSET(TaskEntity, _impl_.snapshot_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::anduril::entitymanager::v1::Entity>()},
  }}, {{
  }},
};

::uint8_t* TaskEntity::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anduril.taskmanager.v1.TaskEntity)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .anduril.entitymanager.v1.Entity entity = 1 [json_name = "entity"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::entity(this),
        _Internal::entity(this).GetCachedSize(), target, stream);
  }

  // bool snapshot = 2 [json_name = "snapshot"];
  if (this->_internal_snapshot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_snapshot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anduril.taskmanager.v1.TaskEntity)
  return target;
}

::size_t TaskEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anduril.taskmanager.v1.TaskEntity)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .anduril.entitymanager.v1.Entity entity = 1 [json_name = "entity"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.entity_);
  }

  // bool snapshot = 2 [json_name = "snapshot"];
  if (this->_internal_snapshot() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TaskEntity::_class_data_ = {
    TaskEntity::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TaskEntity::GetClassData() const {
  return &_class_data_;
}

void TaskEntity::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TaskEntity*>(&to_msg);
  auto& from = static_cast<const TaskEntity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anduril.taskmanager.v1.TaskEntity)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_entity()->::anduril::entitymanager::v1::Entity::MergeFrom(
        from._internal_entity());
  }
  if (from._internal_snapshot() != 0) {
    _this->_internal_set_snapshot(from._internal_snapshot());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TaskEntity::CopyFrom(const TaskEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anduril.taskmanager.v1.TaskEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TaskEntity::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TaskEntity::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TaskEntity::InternalSwap(TaskEntity* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskEntity, _impl_.snapshot_)
      + sizeof(TaskEntity::_impl_.snapshot_)
      - PROTOBUF_FIELD_OFFSET(TaskEntity, _impl_.entity_)>(
          reinterpret_cast<char*>(&_impl_.entity_),
          reinterpret_cast<char*>(&other->_impl_.entity_));
}

::google::protobuf::Metadata TaskEntity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_getter, &descriptor_table_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto_once,
      file_level_metadata_anduril_2ftaskmanager_2fv1_2ftask_2epub_2eproto[16]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace taskmanager
}  // namespace anduril
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
