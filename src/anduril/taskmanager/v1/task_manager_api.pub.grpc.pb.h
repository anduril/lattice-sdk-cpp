// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: anduril/taskmanager/v1/task_manager_api.pub.proto
#ifndef GRPC_anduril_2ftaskmanager_2fv1_2ftask_5fmanager_5fapi_2epub_2eproto__INCLUDED
#define GRPC_anduril_2ftaskmanager_2fv1_2ftask_5fmanager_5fapi_2epub_2eproto__INCLUDED

#include "anduril/taskmanager/v1/task_manager_api.pub.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace anduril {
namespace taskmanager {
namespace v1 {

// Task Manager is a service that performs state management associated with Tasks, and also the execution of Tasks
//  on their designated agents.
class TaskManagerAPI final {
 public:
  static constexpr char const* service_full_name() {
    return "anduril.taskmanager.v1.TaskManagerAPI";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Create a new Task.
    virtual ::grpc::Status CreateTask(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::CreateTaskRequest& request, ::anduril::taskmanager::v1::CreateTaskResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::taskmanager::v1::CreateTaskResponse>> AsyncCreateTask(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::taskmanager::v1::CreateTaskResponse>>(AsyncCreateTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::taskmanager::v1::CreateTaskResponse>> PrepareAsyncCreateTask(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::taskmanager::v1::CreateTaskResponse>>(PrepareAsyncCreateTaskRaw(context, request, cq));
    }
    // Get an existing Task.
    virtual ::grpc::Status GetTask(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::GetTaskRequest& request, ::anduril::taskmanager::v1::GetTaskResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::taskmanager::v1::GetTaskResponse>> AsyncGetTask(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::taskmanager::v1::GetTaskResponse>>(AsyncGetTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::taskmanager::v1::GetTaskResponse>> PrepareAsyncGetTask(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::taskmanager::v1::GetTaskResponse>>(PrepareAsyncGetTaskRaw(context, request, cq));
    }
    // Update definition of a Task, only works on Tasks that are not DONE or CANCEL_REQUESTED. Notes:
    //  * send the current task_version in Task, API will increment definition_version, and reset status_version to 1.
    //  * previous definition_version will have status set to REPLACED.
    //  * depending on assignee, replacing the definition will either update if capable on backend,
    //     or cancel previous and issue new.
    virtual ::grpc::Status UpdateTask(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::UpdateTaskRequest& request, ::anduril::taskmanager::v1::UpdateTaskResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::taskmanager::v1::UpdateTaskResponse>> AsyncUpdateTask(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::taskmanager::v1::UpdateTaskResponse>>(AsyncUpdateTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::taskmanager::v1::UpdateTaskResponse>> PrepareAsyncUpdateTask(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::taskmanager::v1::UpdateTaskResponse>>(PrepareAsyncUpdateTaskRaw(context, request, cq));
    }
    // Update the status of a Task.
    virtual ::grpc::Status UpdateStatus(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::UpdateStatusRequest& request, ::anduril::taskmanager::v1::UpdateStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::taskmanager::v1::UpdateStatusResponse>> AsyncUpdateStatus(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::UpdateStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::taskmanager::v1::UpdateStatusResponse>>(AsyncUpdateStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::taskmanager::v1::UpdateStatusResponse>> PrepareAsyncUpdateStatus(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::UpdateStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::taskmanager::v1::UpdateStatusResponse>>(PrepareAsyncUpdateStatusRaw(context, request, cq));
    }
    // Stream all existing live (not yet done) Tasks and any new updates.
    // Intended for clients to gain visibility into real time updates for live Tasks.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::anduril::taskmanager::v1::StreamTasksResponse>> StreamTasks(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::StreamTasksRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::anduril::taskmanager::v1::StreamTasksResponse>>(StreamTasksRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::anduril::taskmanager::v1::StreamTasksResponse>> AsyncStreamTasks(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::StreamTasksRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::anduril::taskmanager::v1::StreamTasksResponse>>(AsyncStreamTasksRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::anduril::taskmanager::v1::StreamTasksResponse>> PrepareAsyncStreamTasks(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::StreamTasksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::anduril::taskmanager::v1::StreamTasksResponse>>(PrepareAsyncStreamTasksRaw(context, request, cq));
    }
    // Stream Tasks ready for RPC Agent execution that match agent selector (ex: entity_ids).
    // Intended for use by Taskable Agents that need to receive Tasks ready for execution by RPC (no Flux access)
    std::unique_ptr< ::grpc::ClientReaderInterface< ::anduril::taskmanager::v1::ListenAsAgentResponse>> ListenAsAgent(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::ListenAsAgentRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::anduril::taskmanager::v1::ListenAsAgentResponse>>(ListenAsAgentRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::anduril::taskmanager::v1::ListenAsAgentResponse>> AsyncListenAsAgent(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::ListenAsAgentRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::anduril::taskmanager::v1::ListenAsAgentResponse>>(AsyncListenAsAgentRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::anduril::taskmanager::v1::ListenAsAgentResponse>> PrepareAsyncListenAsAgent(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::ListenAsAgentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::anduril::taskmanager::v1::ListenAsAgentResponse>>(PrepareAsyncListenAsAgentRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Create a new Task.
      virtual void CreateTask(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::CreateTaskRequest* request, ::anduril::taskmanager::v1::CreateTaskResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateTask(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::CreateTaskRequest* request, ::anduril::taskmanager::v1::CreateTaskResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get an existing Task.
      virtual void GetTask(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::GetTaskRequest* request, ::anduril::taskmanager::v1::GetTaskResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTask(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::GetTaskRequest* request, ::anduril::taskmanager::v1::GetTaskResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Update definition of a Task, only works on Tasks that are not DONE or CANCEL_REQUESTED. Notes:
      //  * send the current task_version in Task, API will increment definition_version, and reset status_version to 1.
      //  * previous definition_version will have status set to REPLACED.
      //  * depending on assignee, replacing the definition will either update if capable on backend,
      //     or cancel previous and issue new.
      virtual void UpdateTask(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::UpdateTaskRequest* request, ::anduril::taskmanager::v1::UpdateTaskResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateTask(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::UpdateTaskRequest* request, ::anduril::taskmanager::v1::UpdateTaskResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Update the status of a Task.
      virtual void UpdateStatus(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::UpdateStatusRequest* request, ::anduril::taskmanager::v1::UpdateStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateStatus(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::UpdateStatusRequest* request, ::anduril::taskmanager::v1::UpdateStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Stream all existing live (not yet done) Tasks and any new updates.
      // Intended for clients to gain visibility into real time updates for live Tasks.
      virtual void StreamTasks(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::StreamTasksRequest* request, ::grpc::ClientReadReactor< ::anduril::taskmanager::v1::StreamTasksResponse>* reactor) = 0;
      // Stream Tasks ready for RPC Agent execution that match agent selector (ex: entity_ids).
      // Intended for use by Taskable Agents that need to receive Tasks ready for execution by RPC (no Flux access)
      virtual void ListenAsAgent(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::ListenAsAgentRequest* request, ::grpc::ClientReadReactor< ::anduril::taskmanager::v1::ListenAsAgentResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::anduril::taskmanager::v1::CreateTaskResponse>* AsyncCreateTaskRaw(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::anduril::taskmanager::v1::CreateTaskResponse>* PrepareAsyncCreateTaskRaw(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::anduril::taskmanager::v1::GetTaskResponse>* AsyncGetTaskRaw(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::GetTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::anduril::taskmanager::v1::GetTaskResponse>* PrepareAsyncGetTaskRaw(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::GetTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::anduril::taskmanager::v1::UpdateTaskResponse>* AsyncUpdateTaskRaw(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::anduril::taskmanager::v1::UpdateTaskResponse>* PrepareAsyncUpdateTaskRaw(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::anduril::taskmanager::v1::UpdateStatusResponse>* AsyncUpdateStatusRaw(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::UpdateStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::anduril::taskmanager::v1::UpdateStatusResponse>* PrepareAsyncUpdateStatusRaw(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::UpdateStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::anduril::taskmanager::v1::StreamTasksResponse>* StreamTasksRaw(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::StreamTasksRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::anduril::taskmanager::v1::StreamTasksResponse>* AsyncStreamTasksRaw(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::StreamTasksRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::anduril::taskmanager::v1::StreamTasksResponse>* PrepareAsyncStreamTasksRaw(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::StreamTasksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::anduril::taskmanager::v1::ListenAsAgentResponse>* ListenAsAgentRaw(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::ListenAsAgentRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::anduril::taskmanager::v1::ListenAsAgentResponse>* AsyncListenAsAgentRaw(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::ListenAsAgentRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::anduril::taskmanager::v1::ListenAsAgentResponse>* PrepareAsyncListenAsAgentRaw(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::ListenAsAgentRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateTask(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::CreateTaskRequest& request, ::anduril::taskmanager::v1::CreateTaskResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::taskmanager::v1::CreateTaskResponse>> AsyncCreateTask(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::taskmanager::v1::CreateTaskResponse>>(AsyncCreateTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::taskmanager::v1::CreateTaskResponse>> PrepareAsyncCreateTask(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::taskmanager::v1::CreateTaskResponse>>(PrepareAsyncCreateTaskRaw(context, request, cq));
    }
    ::grpc::Status GetTask(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::GetTaskRequest& request, ::anduril::taskmanager::v1::GetTaskResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::taskmanager::v1::GetTaskResponse>> AsyncGetTask(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::taskmanager::v1::GetTaskResponse>>(AsyncGetTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::taskmanager::v1::GetTaskResponse>> PrepareAsyncGetTask(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::GetTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::taskmanager::v1::GetTaskResponse>>(PrepareAsyncGetTaskRaw(context, request, cq));
    }
    ::grpc::Status UpdateTask(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::UpdateTaskRequest& request, ::anduril::taskmanager::v1::UpdateTaskResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::taskmanager::v1::UpdateTaskResponse>> AsyncUpdateTask(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::taskmanager::v1::UpdateTaskResponse>>(AsyncUpdateTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::taskmanager::v1::UpdateTaskResponse>> PrepareAsyncUpdateTask(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::taskmanager::v1::UpdateTaskResponse>>(PrepareAsyncUpdateTaskRaw(context, request, cq));
    }
    ::grpc::Status UpdateStatus(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::UpdateStatusRequest& request, ::anduril::taskmanager::v1::UpdateStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::taskmanager::v1::UpdateStatusResponse>> AsyncUpdateStatus(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::UpdateStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::taskmanager::v1::UpdateStatusResponse>>(AsyncUpdateStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::taskmanager::v1::UpdateStatusResponse>> PrepareAsyncUpdateStatus(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::UpdateStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::taskmanager::v1::UpdateStatusResponse>>(PrepareAsyncUpdateStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::anduril::taskmanager::v1::StreamTasksResponse>> StreamTasks(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::StreamTasksRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::anduril::taskmanager::v1::StreamTasksResponse>>(StreamTasksRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::anduril::taskmanager::v1::StreamTasksResponse>> AsyncStreamTasks(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::StreamTasksRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::anduril::taskmanager::v1::StreamTasksResponse>>(AsyncStreamTasksRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::anduril::taskmanager::v1::StreamTasksResponse>> PrepareAsyncStreamTasks(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::StreamTasksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::anduril::taskmanager::v1::StreamTasksResponse>>(PrepareAsyncStreamTasksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::anduril::taskmanager::v1::ListenAsAgentResponse>> ListenAsAgent(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::ListenAsAgentRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::anduril::taskmanager::v1::ListenAsAgentResponse>>(ListenAsAgentRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::anduril::taskmanager::v1::ListenAsAgentResponse>> AsyncListenAsAgent(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::ListenAsAgentRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::anduril::taskmanager::v1::ListenAsAgentResponse>>(AsyncListenAsAgentRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::anduril::taskmanager::v1::ListenAsAgentResponse>> PrepareAsyncListenAsAgent(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::ListenAsAgentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::anduril::taskmanager::v1::ListenAsAgentResponse>>(PrepareAsyncListenAsAgentRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateTask(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::CreateTaskRequest* request, ::anduril::taskmanager::v1::CreateTaskResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateTask(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::CreateTaskRequest* request, ::anduril::taskmanager::v1::CreateTaskResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTask(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::GetTaskRequest* request, ::anduril::taskmanager::v1::GetTaskResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTask(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::GetTaskRequest* request, ::anduril::taskmanager::v1::GetTaskResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateTask(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::UpdateTaskRequest* request, ::anduril::taskmanager::v1::UpdateTaskResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateTask(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::UpdateTaskRequest* request, ::anduril::taskmanager::v1::UpdateTaskResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateStatus(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::UpdateStatusRequest* request, ::anduril::taskmanager::v1::UpdateStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateStatus(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::UpdateStatusRequest* request, ::anduril::taskmanager::v1::UpdateStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamTasks(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::StreamTasksRequest* request, ::grpc::ClientReadReactor< ::anduril::taskmanager::v1::StreamTasksResponse>* reactor) override;
      void ListenAsAgent(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::ListenAsAgentRequest* request, ::grpc::ClientReadReactor< ::anduril::taskmanager::v1::ListenAsAgentResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::anduril::taskmanager::v1::CreateTaskResponse>* AsyncCreateTaskRaw(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::anduril::taskmanager::v1::CreateTaskResponse>* PrepareAsyncCreateTaskRaw(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::CreateTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::anduril::taskmanager::v1::GetTaskResponse>* AsyncGetTaskRaw(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::GetTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::anduril::taskmanager::v1::GetTaskResponse>* PrepareAsyncGetTaskRaw(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::GetTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::anduril::taskmanager::v1::UpdateTaskResponse>* AsyncUpdateTaskRaw(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::anduril::taskmanager::v1::UpdateTaskResponse>* PrepareAsyncUpdateTaskRaw(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::UpdateTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::anduril::taskmanager::v1::UpdateStatusResponse>* AsyncUpdateStatusRaw(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::UpdateStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::anduril::taskmanager::v1::UpdateStatusResponse>* PrepareAsyncUpdateStatusRaw(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::UpdateStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::anduril::taskmanager::v1::StreamTasksResponse>* StreamTasksRaw(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::StreamTasksRequest& request) override;
    ::grpc::ClientAsyncReader< ::anduril::taskmanager::v1::StreamTasksResponse>* AsyncStreamTasksRaw(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::StreamTasksRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::anduril::taskmanager::v1::StreamTasksResponse>* PrepareAsyncStreamTasksRaw(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::StreamTasksRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::anduril::taskmanager::v1::ListenAsAgentResponse>* ListenAsAgentRaw(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::ListenAsAgentRequest& request) override;
    ::grpc::ClientAsyncReader< ::anduril::taskmanager::v1::ListenAsAgentResponse>* AsyncListenAsAgentRaw(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::ListenAsAgentRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::anduril::taskmanager::v1::ListenAsAgentResponse>* PrepareAsyncListenAsAgentRaw(::grpc::ClientContext* context, const ::anduril::taskmanager::v1::ListenAsAgentRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateTask_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTask_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateTask_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamTasks_;
    const ::grpc::internal::RpcMethod rpcmethod_ListenAsAgent_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Create a new Task.
    virtual ::grpc::Status CreateTask(::grpc::ServerContext* context, const ::anduril::taskmanager::v1::CreateTaskRequest* request, ::anduril::taskmanager::v1::CreateTaskResponse* response);
    // Get an existing Task.
    virtual ::grpc::Status GetTask(::grpc::ServerContext* context, const ::anduril::taskmanager::v1::GetTaskRequest* request, ::anduril::taskmanager::v1::GetTaskResponse* response);
    // Update definition of a Task, only works on Tasks that are not DONE or CANCEL_REQUESTED. Notes:
    //  * send the current task_version in Task, API will increment definition_version, and reset status_version to 1.
    //  * previous definition_version will have status set to REPLACED.
    //  * depending on assignee, replacing the definition will either update if capable on backend,
    //     or cancel previous and issue new.
    virtual ::grpc::Status UpdateTask(::grpc::ServerContext* context, const ::anduril::taskmanager::v1::UpdateTaskRequest* request, ::anduril::taskmanager::v1::UpdateTaskResponse* response);
    // Update the status of a Task.
    virtual ::grpc::Status UpdateStatus(::grpc::ServerContext* context, const ::anduril::taskmanager::v1::UpdateStatusRequest* request, ::anduril::taskmanager::v1::UpdateStatusResponse* response);
    // Stream all existing live (not yet done) Tasks and any new updates.
    // Intended for clients to gain visibility into real time updates for live Tasks.
    virtual ::grpc::Status StreamTasks(::grpc::ServerContext* context, const ::anduril::taskmanager::v1::StreamTasksRequest* request, ::grpc::ServerWriter< ::anduril::taskmanager::v1::StreamTasksResponse>* writer);
    // Stream Tasks ready for RPC Agent execution that match agent selector (ex: entity_ids).
    // Intended for use by Taskable Agents that need to receive Tasks ready for execution by RPC (no Flux access)
    virtual ::grpc::Status ListenAsAgent(::grpc::ServerContext* context, const ::anduril::taskmanager::v1::ListenAsAgentRequest* request, ::grpc::ServerWriter< ::anduril::taskmanager::v1::ListenAsAgentResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateTask() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTask(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::CreateTaskRequest* /*request*/, ::anduril::taskmanager::v1::CreateTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTask(::grpc::ServerContext* context, ::anduril::taskmanager::v1::CreateTaskRequest* request, ::grpc::ServerAsyncResponseWriter< ::anduril::taskmanager::v1::CreateTaskResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTask() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTask(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::GetTaskRequest* /*request*/, ::anduril::taskmanager::v1::GetTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTask(::grpc::ServerContext* context, ::anduril::taskmanager::v1::GetTaskRequest* request, ::grpc::ServerAsyncResponseWriter< ::anduril::taskmanager::v1::GetTaskResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateTask() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTask(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::UpdateTaskRequest* /*request*/, ::anduril::taskmanager::v1::UpdateTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateTask(::grpc::ServerContext* context, ::anduril::taskmanager::v1::UpdateTaskRequest* request, ::grpc::ServerAsyncResponseWriter< ::anduril::taskmanager::v1::UpdateTaskResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateStatus() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateStatus(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::UpdateStatusRequest* /*request*/, ::anduril::taskmanager::v1::UpdateStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateStatus(::grpc::ServerContext* context, ::anduril::taskmanager::v1::UpdateStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::anduril::taskmanager::v1::UpdateStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamTasks() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_StreamTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamTasks(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::StreamTasksRequest* /*request*/, ::grpc::ServerWriter< ::anduril::taskmanager::v1::StreamTasksResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamTasks(::grpc::ServerContext* context, ::anduril::taskmanager::v1::StreamTasksRequest* request, ::grpc::ServerAsyncWriter< ::anduril::taskmanager::v1::StreamTasksResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListenAsAgent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListenAsAgent() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ListenAsAgent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListenAsAgent(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::ListenAsAgentRequest* /*request*/, ::grpc::ServerWriter< ::anduril::taskmanager::v1::ListenAsAgentResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListenAsAgent(::grpc::ServerContext* context, ::anduril::taskmanager::v1::ListenAsAgentRequest* request, ::grpc::ServerAsyncWriter< ::anduril::taskmanager::v1::ListenAsAgentResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateTask<WithAsyncMethod_GetTask<WithAsyncMethod_UpdateTask<WithAsyncMethod_UpdateStatus<WithAsyncMethod_StreamTasks<WithAsyncMethod_ListenAsAgent<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateTask() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::anduril::taskmanager::v1::CreateTaskRequest, ::anduril::taskmanager::v1::CreateTaskResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::anduril::taskmanager::v1::CreateTaskRequest* request, ::anduril::taskmanager::v1::CreateTaskResponse* response) { return this->CreateTask(context, request, response); }));}
    void SetMessageAllocatorFor_CreateTask(
        ::grpc::MessageAllocator< ::anduril::taskmanager::v1::CreateTaskRequest, ::anduril::taskmanager::v1::CreateTaskResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::anduril::taskmanager::v1::CreateTaskRequest, ::anduril::taskmanager::v1::CreateTaskResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTask(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::CreateTaskRequest* /*request*/, ::anduril::taskmanager::v1::CreateTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateTask(
      ::grpc::CallbackServerContext* /*context*/, const ::anduril::taskmanager::v1::CreateTaskRequest* /*request*/, ::anduril::taskmanager::v1::CreateTaskResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTask() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::anduril::taskmanager::v1::GetTaskRequest, ::anduril::taskmanager::v1::GetTaskResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::anduril::taskmanager::v1::GetTaskRequest* request, ::anduril::taskmanager::v1::GetTaskResponse* response) { return this->GetTask(context, request, response); }));}
    void SetMessageAllocatorFor_GetTask(
        ::grpc::MessageAllocator< ::anduril::taskmanager::v1::GetTaskRequest, ::anduril::taskmanager::v1::GetTaskResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::anduril::taskmanager::v1::GetTaskRequest, ::anduril::taskmanager::v1::GetTaskResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTask(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::GetTaskRequest* /*request*/, ::anduril::taskmanager::v1::GetTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTask(
      ::grpc::CallbackServerContext* /*context*/, const ::anduril::taskmanager::v1::GetTaskRequest* /*request*/, ::anduril::taskmanager::v1::GetTaskResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateTask() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::anduril::taskmanager::v1::UpdateTaskRequest, ::anduril::taskmanager::v1::UpdateTaskResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::anduril::taskmanager::v1::UpdateTaskRequest* request, ::anduril::taskmanager::v1::UpdateTaskResponse* response) { return this->UpdateTask(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateTask(
        ::grpc::MessageAllocator< ::anduril::taskmanager::v1::UpdateTaskRequest, ::anduril::taskmanager::v1::UpdateTaskResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::anduril::taskmanager::v1::UpdateTaskRequest, ::anduril::taskmanager::v1::UpdateTaskResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTask(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::UpdateTaskRequest* /*request*/, ::anduril::taskmanager::v1::UpdateTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateTask(
      ::grpc::CallbackServerContext* /*context*/, const ::anduril::taskmanager::v1::UpdateTaskRequest* /*request*/, ::anduril::taskmanager::v1::UpdateTaskResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateStatus() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::anduril::taskmanager::v1::UpdateStatusRequest, ::anduril::taskmanager::v1::UpdateStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::anduril::taskmanager::v1::UpdateStatusRequest* request, ::anduril::taskmanager::v1::UpdateStatusResponse* response) { return this->UpdateStatus(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateStatus(
        ::grpc::MessageAllocator< ::anduril::taskmanager::v1::UpdateStatusRequest, ::anduril::taskmanager::v1::UpdateStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::anduril::taskmanager::v1::UpdateStatusRequest, ::anduril::taskmanager::v1::UpdateStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateStatus(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::UpdateStatusRequest* /*request*/, ::anduril::taskmanager::v1::UpdateStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::anduril::taskmanager::v1::UpdateStatusRequest* /*request*/, ::anduril::taskmanager::v1::UpdateStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamTasks() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::anduril::taskmanager::v1::StreamTasksRequest, ::anduril::taskmanager::v1::StreamTasksResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::anduril::taskmanager::v1::StreamTasksRequest* request) { return this->StreamTasks(context, request); }));
    }
    ~WithCallbackMethod_StreamTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamTasks(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::StreamTasksRequest* /*request*/, ::grpc::ServerWriter< ::anduril::taskmanager::v1::StreamTasksResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::anduril::taskmanager::v1::StreamTasksResponse>* StreamTasks(
      ::grpc::CallbackServerContext* /*context*/, const ::anduril::taskmanager::v1::StreamTasksRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListenAsAgent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListenAsAgent() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::anduril::taskmanager::v1::ListenAsAgentRequest, ::anduril::taskmanager::v1::ListenAsAgentResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::anduril::taskmanager::v1::ListenAsAgentRequest* request) { return this->ListenAsAgent(context, request); }));
    }
    ~WithCallbackMethod_ListenAsAgent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListenAsAgent(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::ListenAsAgentRequest* /*request*/, ::grpc::ServerWriter< ::anduril::taskmanager::v1::ListenAsAgentResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::anduril::taskmanager::v1::ListenAsAgentResponse>* ListenAsAgent(
      ::grpc::CallbackServerContext* /*context*/, const ::anduril::taskmanager::v1::ListenAsAgentRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateTask<WithCallbackMethod_GetTask<WithCallbackMethod_UpdateTask<WithCallbackMethod_UpdateStatus<WithCallbackMethod_StreamTasks<WithCallbackMethod_ListenAsAgent<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateTask() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTask(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::CreateTaskRequest* /*request*/, ::anduril::taskmanager::v1::CreateTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTask() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTask(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::GetTaskRequest* /*request*/, ::anduril::taskmanager::v1::GetTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateTask() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTask(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::UpdateTaskRequest* /*request*/, ::anduril::taskmanager::v1::UpdateTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateStatus() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateStatus(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::UpdateStatusRequest* /*request*/, ::anduril::taskmanager::v1::UpdateStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamTasks() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_StreamTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamTasks(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::StreamTasksRequest* /*request*/, ::grpc::ServerWriter< ::anduril::taskmanager::v1::StreamTasksResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListenAsAgent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListenAsAgent() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ListenAsAgent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListenAsAgent(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::ListenAsAgentRequest* /*request*/, ::grpc::ServerWriter< ::anduril::taskmanager::v1::ListenAsAgentResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateTask() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTask(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::CreateTaskRequest* /*request*/, ::anduril::taskmanager::v1::CreateTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTask() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTask(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::GetTaskRequest* /*request*/, ::anduril::taskmanager::v1::GetTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateTask() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTask(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::UpdateTaskRequest* /*request*/, ::anduril::taskmanager::v1::UpdateTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateStatus() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateStatus(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::UpdateStatusRequest* /*request*/, ::anduril::taskmanager::v1::UpdateStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamTasks() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_StreamTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamTasks(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::StreamTasksRequest* /*request*/, ::grpc::ServerWriter< ::anduril::taskmanager::v1::StreamTasksResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamTasks(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListenAsAgent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListenAsAgent() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ListenAsAgent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListenAsAgent(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::ListenAsAgentRequest* /*request*/, ::grpc::ServerWriter< ::anduril::taskmanager::v1::ListenAsAgentResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListenAsAgent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateTask() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateTask(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTask(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::CreateTaskRequest* /*request*/, ::anduril::taskmanager::v1::CreateTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateTask(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTask() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTask(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTask(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::GetTaskRequest* /*request*/, ::anduril::taskmanager::v1::GetTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTask(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateTask() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateTask(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTask(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::UpdateTaskRequest* /*request*/, ::anduril::taskmanager::v1::UpdateTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateTask(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateStatus() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateStatus(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::UpdateStatusRequest* /*request*/, ::anduril::taskmanager::v1::UpdateStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamTasks() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamTasks(context, request); }));
    }
    ~WithRawCallbackMethod_StreamTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamTasks(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::StreamTasksRequest* /*request*/, ::grpc::ServerWriter< ::anduril::taskmanager::v1::StreamTasksResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamTasks(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListenAsAgent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListenAsAgent() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->ListenAsAgent(context, request); }));
    }
    ~WithRawCallbackMethod_ListenAsAgent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListenAsAgent(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::ListenAsAgentRequest* /*request*/, ::grpc::ServerWriter< ::anduril::taskmanager::v1::ListenAsAgentResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ListenAsAgent(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateTask() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::anduril::taskmanager::v1::CreateTaskRequest, ::anduril::taskmanager::v1::CreateTaskResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::anduril::taskmanager::v1::CreateTaskRequest, ::anduril::taskmanager::v1::CreateTaskResponse>* streamer) {
                       return this->StreamedCreateTask(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateTask(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::CreateTaskRequest* /*request*/, ::anduril::taskmanager::v1::CreateTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::anduril::taskmanager::v1::CreateTaskRequest,::anduril::taskmanager::v1::CreateTaskResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTask() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::anduril::taskmanager::v1::GetTaskRequest, ::anduril::taskmanager::v1::GetTaskResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::anduril::taskmanager::v1::GetTaskRequest, ::anduril::taskmanager::v1::GetTaskResponse>* streamer) {
                       return this->StreamedGetTask(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTask(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::GetTaskRequest* /*request*/, ::anduril::taskmanager::v1::GetTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::anduril::taskmanager::v1::GetTaskRequest,::anduril::taskmanager::v1::GetTaskResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateTask() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::anduril::taskmanager::v1::UpdateTaskRequest, ::anduril::taskmanager::v1::UpdateTaskResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::anduril::taskmanager::v1::UpdateTaskRequest, ::anduril::taskmanager::v1::UpdateTaskResponse>* streamer) {
                       return this->StreamedUpdateTask(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateTask(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::UpdateTaskRequest* /*request*/, ::anduril::taskmanager::v1::UpdateTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::anduril::taskmanager::v1::UpdateTaskRequest,::anduril::taskmanager::v1::UpdateTaskResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateStatus() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::anduril::taskmanager::v1::UpdateStatusRequest, ::anduril::taskmanager::v1::UpdateStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::anduril::taskmanager::v1::UpdateStatusRequest, ::anduril::taskmanager::v1::UpdateStatusResponse>* streamer) {
                       return this->StreamedUpdateStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateStatus(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::UpdateStatusRequest* /*request*/, ::anduril::taskmanager::v1::UpdateStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::anduril::taskmanager::v1::UpdateStatusRequest,::anduril::taskmanager::v1::UpdateStatusResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateTask<WithStreamedUnaryMethod_GetTask<WithStreamedUnaryMethod_UpdateTask<WithStreamedUnaryMethod_UpdateStatus<Service > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamTasks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamTasks() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::anduril::taskmanager::v1::StreamTasksRequest, ::anduril::taskmanager::v1::StreamTasksResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::anduril::taskmanager::v1::StreamTasksRequest, ::anduril::taskmanager::v1::StreamTasksResponse>* streamer) {
                       return this->StreamedStreamTasks(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamTasks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamTasks(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::StreamTasksRequest* /*request*/, ::grpc::ServerWriter< ::anduril::taskmanager::v1::StreamTasksResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamTasks(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::anduril::taskmanager::v1::StreamTasksRequest,::anduril::taskmanager::v1::StreamTasksResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_ListenAsAgent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ListenAsAgent() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::anduril::taskmanager::v1::ListenAsAgentRequest, ::anduril::taskmanager::v1::ListenAsAgentResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::anduril::taskmanager::v1::ListenAsAgentRequest, ::anduril::taskmanager::v1::ListenAsAgentResponse>* streamer) {
                       return this->StreamedListenAsAgent(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ListenAsAgent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListenAsAgent(::grpc::ServerContext* /*context*/, const ::anduril::taskmanager::v1::ListenAsAgentRequest* /*request*/, ::grpc::ServerWriter< ::anduril::taskmanager::v1::ListenAsAgentResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedListenAsAgent(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::anduril::taskmanager::v1::ListenAsAgentRequest,::anduril::taskmanager::v1::ListenAsAgentResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StreamTasks<WithSplitStreamingMethod_ListenAsAgent<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateTask<WithStreamedUnaryMethod_GetTask<WithStreamedUnaryMethod_UpdateTask<WithStreamedUnaryMethod_UpdateStatus<WithSplitStreamingMethod_StreamTasks<WithSplitStreamingMethod_ListenAsAgent<Service > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace taskmanager
}  // namespace anduril


#endif  // GRPC_anduril_2ftaskmanager_2fv1_2ftask_5fmanager_5fapi_2epub_2eproto__INCLUDED
