// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: anduril/blobs/v1/filter.pub.proto
// Protobuf C++ Version: 5.28.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_anduril_2fblobs_2fv1_2ffilter_2epub_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_anduril_2fblobs_2fv1_2ffilter_2epub_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_anduril_2fblobs_2fv1_2ffilter_2epub_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_anduril_2fblobs_2fv1_2ffilter_2epub_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_anduril_2fblobs_2fv1_2ffilter_2epub_2eproto;
namespace anduril {
namespace blobs {
namespace v1 {
class FieldMatcher;
struct FieldMatcherDefaultTypeInternal;
extern FieldMatcherDefaultTypeInternal _FieldMatcher_default_instance_;
class Statement;
struct StatementDefaultTypeInternal;
extern StatementDefaultTypeInternal _Statement_default_instance_;
}  // namespace v1
}  // namespace blobs
}  // namespace anduril
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace anduril {
namespace blobs {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class FieldMatcher final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.blobs.v1.FieldMatcher) */ {
 public:
  inline FieldMatcher() : FieldMatcher(nullptr) {}
  ~FieldMatcher() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FieldMatcher(
      ::google::protobuf::internal::ConstantInitialized);

  inline FieldMatcher(const FieldMatcher& from) : FieldMatcher(nullptr, from) {}
  inline FieldMatcher(FieldMatcher&& from) noexcept
      : FieldMatcher(nullptr, std::move(from)) {}
  inline FieldMatcher& operator=(const FieldMatcher& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldMatcher& operator=(FieldMatcher&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldMatcher& default_instance() {
    return *internal_default_instance();
  }
  static inline const FieldMatcher* internal_default_instance() {
    return reinterpret_cast<const FieldMatcher*>(
        &_FieldMatcher_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(FieldMatcher& a, FieldMatcher& b) { a.Swap(&b); }
  inline void Swap(FieldMatcher* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldMatcher* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FieldMatcher* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<FieldMatcher>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FieldMatcher& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FieldMatcher& from) { FieldMatcher::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FieldMatcher* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "anduril.blobs.v1.FieldMatcher"; }

 protected:
  explicit FieldMatcher(::google::protobuf::Arena* arena);
  FieldMatcher(::google::protobuf::Arena* arena, const FieldMatcher& from);
  FieldMatcher(::google::protobuf::Arena* arena, FieldMatcher&& from) noexcept
      : FieldMatcher(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIntegrationNameFieldNumber = 1,
    kMimeTypeFieldNumber = 2,
    kDataTypeFieldNumber = 3,
  };
  // string integration_name = 1 [json_name = "integrationName"];
  void clear_integration_name() ;
  const std::string& integration_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_integration_name(Arg_&& arg, Args_... args);
  std::string* mutable_integration_name();
  PROTOBUF_NODISCARD std::string* release_integration_name();
  void set_allocated_integration_name(std::string* value);

  private:
  const std::string& _internal_integration_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_integration_name(
      const std::string& value);
  std::string* _internal_mutable_integration_name();

  public:
  // string mime_type = 2 [json_name = "mimeType"];
  void clear_mime_type() ;
  const std::string& mime_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mime_type(Arg_&& arg, Args_... args);
  std::string* mutable_mime_type();
  PROTOBUF_NODISCARD std::string* release_mime_type();
  void set_allocated_mime_type(std::string* value);

  private:
  const std::string& _internal_mime_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mime_type(
      const std::string& value);
  std::string* _internal_mutable_mime_type();

  public:
  // string data_type = 3 [json_name = "dataType"];
  void clear_data_type() ;
  const std::string& data_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data_type(Arg_&& arg, Args_... args);
  std::string* mutable_data_type();
  PROTOBUF_NODISCARD std::string* release_data_type();
  void set_allocated_data_type(std::string* value);

  private:
  const std::string& _internal_data_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_type(
      const std::string& value);
  std::string* _internal_mutable_data_type();

  public:
  // @@protoc_insertion_point(class_scope:anduril.blobs.v1.FieldMatcher)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      72, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_FieldMatcher_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FieldMatcher& from_msg);
    ::google::protobuf::internal::ArenaStringPtr integration_name_;
    ::google::protobuf::internal::ArenaStringPtr mime_type_;
    ::google::protobuf::internal::ArenaStringPtr data_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fblobs_2fv1_2ffilter_2epub_2eproto;
};
// -------------------------------------------------------------------

class Statement final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.blobs.v1.Statement) */ {
 public:
  inline Statement() : Statement(nullptr) {}
  ~Statement() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Statement(
      ::google::protobuf::internal::ConstantInitialized);

  inline Statement(const Statement& from) : Statement(nullptr, from) {}
  inline Statement(Statement&& from) noexcept
      : Statement(nullptr, std::move(from)) {}
  inline Statement& operator=(const Statement& from) {
    CopyFrom(from);
    return *this;
  }
  inline Statement& operator=(Statement&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Statement& default_instance() {
    return *internal_default_instance();
  }
  static inline const Statement* internal_default_instance() {
    return reinterpret_cast<const Statement*>(
        &_Statement_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Statement& a, Statement& b) { a.Swap(&b); }
  inline void Swap(Statement* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Statement* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Statement* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<Statement>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Statement& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Statement& from) { Statement::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Statement* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "anduril.blobs.v1.Statement"; }

 protected:
  explicit Statement(::google::protobuf::Arena* arena);
  Statement(::google::protobuf::Arena* arena, const Statement& from);
  Statement(::google::protobuf::Arena* arena, Statement&& from) noexcept
      : Statement(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNotMatchFieldNumber = 2,
    kMatchFieldNumber = 1,
  };
  // repeated .anduril.blobs.v1.FieldMatcher not_match = 2 [json_name = "notMatch"];
  int not_match_size() const;
  private:
  int _internal_not_match_size() const;

  public:
  void clear_not_match() ;
  ::anduril::blobs::v1::FieldMatcher* mutable_not_match(int index);
  ::google::protobuf::RepeatedPtrField<::anduril::blobs::v1::FieldMatcher>* mutable_not_match();

  private:
  const ::google::protobuf::RepeatedPtrField<::anduril::blobs::v1::FieldMatcher>& _internal_not_match() const;
  ::google::protobuf::RepeatedPtrField<::anduril::blobs::v1::FieldMatcher>* _internal_mutable_not_match();
  public:
  const ::anduril::blobs::v1::FieldMatcher& not_match(int index) const;
  ::anduril::blobs::v1::FieldMatcher* add_not_match();
  const ::google::protobuf::RepeatedPtrField<::anduril::blobs::v1::FieldMatcher>& not_match() const;
  // .anduril.blobs.v1.FieldMatcher match = 1 [json_name = "match"];
  bool has_match() const;
  void clear_match() ;
  const ::anduril::blobs::v1::FieldMatcher& match() const;
  PROTOBUF_NODISCARD ::anduril::blobs::v1::FieldMatcher* release_match();
  ::anduril::blobs::v1::FieldMatcher* mutable_match();
  void set_allocated_match(::anduril::blobs::v1::FieldMatcher* value);
  void unsafe_arena_set_allocated_match(::anduril::blobs::v1::FieldMatcher* value);
  ::anduril::blobs::v1::FieldMatcher* unsafe_arena_release_match();

  private:
  const ::anduril::blobs::v1::FieldMatcher& _internal_match() const;
  ::anduril::blobs::v1::FieldMatcher* _internal_mutable_match();

  public:
  // @@protoc_insertion_point(class_scope:anduril.blobs.v1.Statement)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Statement_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Statement& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::anduril::blobs::v1::FieldMatcher > not_match_;
    ::anduril::blobs::v1::FieldMatcher* match_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2fblobs_2fv1_2ffilter_2epub_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Statement

// .anduril.blobs.v1.FieldMatcher match = 1 [json_name = "match"];
inline bool Statement::has_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.match_ != nullptr);
  return value;
}
inline void Statement::clear_match() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.match_ != nullptr) _impl_.match_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::anduril::blobs::v1::FieldMatcher& Statement::_internal_match() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::anduril::blobs::v1::FieldMatcher* p = _impl_.match_;
  return p != nullptr ? *p : reinterpret_cast<const ::anduril::blobs::v1::FieldMatcher&>(::anduril::blobs::v1::_FieldMatcher_default_instance_);
}
inline const ::anduril::blobs::v1::FieldMatcher& Statement::match() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.blobs.v1.Statement.match)
  return _internal_match();
}
inline void Statement::unsafe_arena_set_allocated_match(::anduril::blobs::v1::FieldMatcher* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.match_);
  }
  _impl_.match_ = reinterpret_cast<::anduril::blobs::v1::FieldMatcher*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.blobs.v1.Statement.match)
}
inline ::anduril::blobs::v1::FieldMatcher* Statement::release_match() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::blobs::v1::FieldMatcher* released = _impl_.match_;
  _impl_.match_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::anduril::blobs::v1::FieldMatcher* Statement::unsafe_arena_release_match() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.blobs.v1.Statement.match)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::blobs::v1::FieldMatcher* temp = _impl_.match_;
  _impl_.match_ = nullptr;
  return temp;
}
inline ::anduril::blobs::v1::FieldMatcher* Statement::_internal_mutable_match() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.match_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::anduril::blobs::v1::FieldMatcher>(GetArena());
    _impl_.match_ = reinterpret_cast<::anduril::blobs::v1::FieldMatcher*>(p);
  }
  return _impl_.match_;
}
inline ::anduril::blobs::v1::FieldMatcher* Statement::mutable_match() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::anduril::blobs::v1::FieldMatcher* _msg = _internal_mutable_match();
  // @@protoc_insertion_point(field_mutable:anduril.blobs.v1.Statement.match)
  return _msg;
}
inline void Statement::set_allocated_match(::anduril::blobs::v1::FieldMatcher* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.match_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.match_ = reinterpret_cast<::anduril::blobs::v1::FieldMatcher*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.blobs.v1.Statement.match)
}

// repeated .anduril.blobs.v1.FieldMatcher not_match = 2 [json_name = "notMatch"];
inline int Statement::_internal_not_match_size() const {
  return _internal_not_match().size();
}
inline int Statement::not_match_size() const {
  return _internal_not_match_size();
}
inline void Statement::clear_not_match() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.not_match_.Clear();
}
inline ::anduril::blobs::v1::FieldMatcher* Statement::mutable_not_match(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:anduril.blobs.v1.Statement.not_match)
  return _internal_mutable_not_match()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::anduril::blobs::v1::FieldMatcher>* Statement::mutable_not_match()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:anduril.blobs.v1.Statement.not_match)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_not_match();
}
inline const ::anduril::blobs::v1::FieldMatcher& Statement::not_match(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.blobs.v1.Statement.not_match)
  return _internal_not_match().Get(index);
}
inline ::anduril::blobs::v1::FieldMatcher* Statement::add_not_match() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::anduril::blobs::v1::FieldMatcher* _add = _internal_mutable_not_match()->Add();
  // @@protoc_insertion_point(field_add:anduril.blobs.v1.Statement.not_match)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::anduril::blobs::v1::FieldMatcher>& Statement::not_match() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:anduril.blobs.v1.Statement.not_match)
  return _internal_not_match();
}
inline const ::google::protobuf::RepeatedPtrField<::anduril::blobs::v1::FieldMatcher>&
Statement::_internal_not_match() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.not_match_;
}
inline ::google::protobuf::RepeatedPtrField<::anduril::blobs::v1::FieldMatcher>*
Statement::_internal_mutable_not_match() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.not_match_;
}

// -------------------------------------------------------------------

// FieldMatcher

// string integration_name = 1 [json_name = "integrationName"];
inline void FieldMatcher::clear_integration_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.integration_name_.ClearToEmpty();
}
inline const std::string& FieldMatcher::integration_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.blobs.v1.FieldMatcher.integration_name)
  return _internal_integration_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FieldMatcher::set_integration_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.integration_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:anduril.blobs.v1.FieldMatcher.integration_name)
}
inline std::string* FieldMatcher::mutable_integration_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_integration_name();
  // @@protoc_insertion_point(field_mutable:anduril.blobs.v1.FieldMatcher.integration_name)
  return _s;
}
inline const std::string& FieldMatcher::_internal_integration_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.integration_name_.Get();
}
inline void FieldMatcher::_internal_set_integration_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.integration_name_.Set(value, GetArena());
}
inline std::string* FieldMatcher::_internal_mutable_integration_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.integration_name_.Mutable( GetArena());
}
inline std::string* FieldMatcher::release_integration_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.blobs.v1.FieldMatcher.integration_name)
  return _impl_.integration_name_.Release();
}
inline void FieldMatcher::set_allocated_integration_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.integration_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.integration_name_.IsDefault()) {
          _impl_.integration_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:anduril.blobs.v1.FieldMatcher.integration_name)
}

// string mime_type = 2 [json_name = "mimeType"];
inline void FieldMatcher::clear_mime_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mime_type_.ClearToEmpty();
}
inline const std::string& FieldMatcher::mime_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.blobs.v1.FieldMatcher.mime_type)
  return _internal_mime_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FieldMatcher::set_mime_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mime_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:anduril.blobs.v1.FieldMatcher.mime_type)
}
inline std::string* FieldMatcher::mutable_mime_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_mime_type();
  // @@protoc_insertion_point(field_mutable:anduril.blobs.v1.FieldMatcher.mime_type)
  return _s;
}
inline const std::string& FieldMatcher::_internal_mime_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mime_type_.Get();
}
inline void FieldMatcher::_internal_set_mime_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mime_type_.Set(value, GetArena());
}
inline std::string* FieldMatcher::_internal_mutable_mime_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.mime_type_.Mutable( GetArena());
}
inline std::string* FieldMatcher::release_mime_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.blobs.v1.FieldMatcher.mime_type)
  return _impl_.mime_type_.Release();
}
inline void FieldMatcher::set_allocated_mime_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mime_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.mime_type_.IsDefault()) {
          _impl_.mime_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:anduril.blobs.v1.FieldMatcher.mime_type)
}

// string data_type = 3 [json_name = "dataType"];
inline void FieldMatcher::clear_data_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_type_.ClearToEmpty();
}
inline const std::string& FieldMatcher::data_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.blobs.v1.FieldMatcher.data_type)
  return _internal_data_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FieldMatcher::set_data_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:anduril.blobs.v1.FieldMatcher.data_type)
}
inline std::string* FieldMatcher::mutable_data_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data_type();
  // @@protoc_insertion_point(field_mutable:anduril.blobs.v1.FieldMatcher.data_type)
  return _s;
}
inline const std::string& FieldMatcher::_internal_data_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_type_.Get();
}
inline void FieldMatcher::_internal_set_data_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_type_.Set(value, GetArena());
}
inline std::string* FieldMatcher::_internal_mutable_data_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_type_.Mutable( GetArena());
}
inline std::string* FieldMatcher::release_data_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.blobs.v1.FieldMatcher.data_type)
  return _impl_.data_type_.Release();
}
inline void FieldMatcher::set_allocated_data_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_type_.IsDefault()) {
          _impl_.data_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:anduril.blobs.v1.FieldMatcher.data_type)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace blobs
}  // namespace anduril


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_anduril_2fblobs_2fv1_2ffilter_2epub_2eproto_2epb_2eh
