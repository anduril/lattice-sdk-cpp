// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: anduril/blobs/v1/blobs_api.pub.proto

#include "anduril/blobs/v1/blobs_api.pub.pb.h"
#include "anduril/blobs/v1/blobs_api.pub.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace anduril {
namespace blobs {
namespace v1 {

static const char* BlobsAPI_method_names[] = {
  "/anduril.blobs.v1.BlobsAPI/CreateBlob",
  "/anduril.blobs.v1.BlobsAPI/CreateBlobChunked",
  "/anduril.blobs.v1.BlobsAPI/GetBlob",
  "/anduril.blobs.v1.BlobsAPI/HeadBlob",
  "/anduril.blobs.v1.BlobsAPI/StreamBlobMetadata",
};

std::unique_ptr< BlobsAPI::Stub> BlobsAPI::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BlobsAPI::Stub> stub(new BlobsAPI::Stub(channel, options));
  return stub;
}

BlobsAPI::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateBlob_(BlobsAPI_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateBlobChunked_(BlobsAPI_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_GetBlob_(BlobsAPI_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_HeadBlob_(BlobsAPI_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamBlobMetadata_(BlobsAPI_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status BlobsAPI::Stub::CreateBlob(::grpc::ClientContext* context, const ::anduril::blobs::v1::CreateBlobRequest& request, ::anduril::blobs::v1::CreateBlobResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::anduril::blobs::v1::CreateBlobRequest, ::anduril::blobs::v1::CreateBlobResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateBlob_, context, request, response);
}

void BlobsAPI::Stub::async::CreateBlob(::grpc::ClientContext* context, const ::anduril::blobs::v1::CreateBlobRequest* request, ::anduril::blobs::v1::CreateBlobResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::anduril::blobs::v1::CreateBlobRequest, ::anduril::blobs::v1::CreateBlobResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateBlob_, context, request, response, std::move(f));
}

void BlobsAPI::Stub::async::CreateBlob(::grpc::ClientContext* context, const ::anduril::blobs::v1::CreateBlobRequest* request, ::anduril::blobs::v1::CreateBlobResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateBlob_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::anduril::blobs::v1::CreateBlobResponse>* BlobsAPI::Stub::PrepareAsyncCreateBlobRaw(::grpc::ClientContext* context, const ::anduril::blobs::v1::CreateBlobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::anduril::blobs::v1::CreateBlobResponse, ::anduril::blobs::v1::CreateBlobRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateBlob_, context, request);
}

::grpc::ClientAsyncResponseReader< ::anduril::blobs::v1::CreateBlobResponse>* BlobsAPI::Stub::AsyncCreateBlobRaw(::grpc::ClientContext* context, const ::anduril::blobs::v1::CreateBlobRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateBlobRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::anduril::blobs::v1::CreateBlobChunkedRequest>* BlobsAPI::Stub::CreateBlobChunkedRaw(::grpc::ClientContext* context, ::anduril::blobs::v1::CreateBlobChunkedResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::anduril::blobs::v1::CreateBlobChunkedRequest>::Create(channel_.get(), rpcmethod_CreateBlobChunked_, context, response);
}

void BlobsAPI::Stub::async::CreateBlobChunked(::grpc::ClientContext* context, ::anduril::blobs::v1::CreateBlobChunkedResponse* response, ::grpc::ClientWriteReactor< ::anduril::blobs::v1::CreateBlobChunkedRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::anduril::blobs::v1::CreateBlobChunkedRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_CreateBlobChunked_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::anduril::blobs::v1::CreateBlobChunkedRequest>* BlobsAPI::Stub::AsyncCreateBlobChunkedRaw(::grpc::ClientContext* context, ::anduril::blobs::v1::CreateBlobChunkedResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::anduril::blobs::v1::CreateBlobChunkedRequest>::Create(channel_.get(), cq, rpcmethod_CreateBlobChunked_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::anduril::blobs::v1::CreateBlobChunkedRequest>* BlobsAPI::Stub::PrepareAsyncCreateBlobChunkedRaw(::grpc::ClientContext* context, ::anduril::blobs::v1::CreateBlobChunkedResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::anduril::blobs::v1::CreateBlobChunkedRequest>::Create(channel_.get(), cq, rpcmethod_CreateBlobChunked_, context, response, false, nullptr);
}

::grpc::ClientReader< ::anduril::blobs::v1::GetBlobResponse>* BlobsAPI::Stub::GetBlobRaw(::grpc::ClientContext* context, const ::anduril::blobs::v1::GetBlobRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::anduril::blobs::v1::GetBlobResponse>::Create(channel_.get(), rpcmethod_GetBlob_, context, request);
}

void BlobsAPI::Stub::async::GetBlob(::grpc::ClientContext* context, const ::anduril::blobs::v1::GetBlobRequest* request, ::grpc::ClientReadReactor< ::anduril::blobs::v1::GetBlobResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::anduril::blobs::v1::GetBlobResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetBlob_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::anduril::blobs::v1::GetBlobResponse>* BlobsAPI::Stub::AsyncGetBlobRaw(::grpc::ClientContext* context, const ::anduril::blobs::v1::GetBlobRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::anduril::blobs::v1::GetBlobResponse>::Create(channel_.get(), cq, rpcmethod_GetBlob_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::anduril::blobs::v1::GetBlobResponse>* BlobsAPI::Stub::PrepareAsyncGetBlobRaw(::grpc::ClientContext* context, const ::anduril::blobs::v1::GetBlobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::anduril::blobs::v1::GetBlobResponse>::Create(channel_.get(), cq, rpcmethod_GetBlob_, context, request, false, nullptr);
}

::grpc::Status BlobsAPI::Stub::HeadBlob(::grpc::ClientContext* context, const ::anduril::blobs::v1::HeadBlobRequest& request, ::anduril::blobs::v1::HeadBlobResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::anduril::blobs::v1::HeadBlobRequest, ::anduril::blobs::v1::HeadBlobResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HeadBlob_, context, request, response);
}

void BlobsAPI::Stub::async::HeadBlob(::grpc::ClientContext* context, const ::anduril::blobs::v1::HeadBlobRequest* request, ::anduril::blobs::v1::HeadBlobResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::anduril::blobs::v1::HeadBlobRequest, ::anduril::blobs::v1::HeadBlobResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HeadBlob_, context, request, response, std::move(f));
}

void BlobsAPI::Stub::async::HeadBlob(::grpc::ClientContext* context, const ::anduril::blobs::v1::HeadBlobRequest* request, ::anduril::blobs::v1::HeadBlobResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HeadBlob_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::anduril::blobs::v1::HeadBlobResponse>* BlobsAPI::Stub::PrepareAsyncHeadBlobRaw(::grpc::ClientContext* context, const ::anduril::blobs::v1::HeadBlobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::anduril::blobs::v1::HeadBlobResponse, ::anduril::blobs::v1::HeadBlobRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HeadBlob_, context, request);
}

::grpc::ClientAsyncResponseReader< ::anduril::blobs::v1::HeadBlobResponse>* BlobsAPI::Stub::AsyncHeadBlobRaw(::grpc::ClientContext* context, const ::anduril::blobs::v1::HeadBlobRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHeadBlobRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::anduril::blobs::v1::StreamBlobMetadataResponse>* BlobsAPI::Stub::StreamBlobMetadataRaw(::grpc::ClientContext* context, const ::anduril::blobs::v1::StreamBlobMetadataRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::anduril::blobs::v1::StreamBlobMetadataResponse>::Create(channel_.get(), rpcmethod_StreamBlobMetadata_, context, request);
}

void BlobsAPI::Stub::async::StreamBlobMetadata(::grpc::ClientContext* context, const ::anduril::blobs::v1::StreamBlobMetadataRequest* request, ::grpc::ClientReadReactor< ::anduril::blobs::v1::StreamBlobMetadataResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::anduril::blobs::v1::StreamBlobMetadataResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamBlobMetadata_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::anduril::blobs::v1::StreamBlobMetadataResponse>* BlobsAPI::Stub::AsyncStreamBlobMetadataRaw(::grpc::ClientContext* context, const ::anduril::blobs::v1::StreamBlobMetadataRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::anduril::blobs::v1::StreamBlobMetadataResponse>::Create(channel_.get(), cq, rpcmethod_StreamBlobMetadata_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::anduril::blobs::v1::StreamBlobMetadataResponse>* BlobsAPI::Stub::PrepareAsyncStreamBlobMetadataRaw(::grpc::ClientContext* context, const ::anduril::blobs::v1::StreamBlobMetadataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::anduril::blobs::v1::StreamBlobMetadataResponse>::Create(channel_.get(), cq, rpcmethod_StreamBlobMetadata_, context, request, false, nullptr);
}

BlobsAPI::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BlobsAPI_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BlobsAPI::Service, ::anduril::blobs::v1::CreateBlobRequest, ::anduril::blobs::v1::CreateBlobResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BlobsAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::anduril::blobs::v1::CreateBlobRequest* req,
             ::anduril::blobs::v1::CreateBlobResponse* resp) {
               return service->CreateBlob(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BlobsAPI_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< BlobsAPI::Service, ::anduril::blobs::v1::CreateBlobChunkedRequest, ::anduril::blobs::v1::CreateBlobChunkedResponse>(
          [](BlobsAPI::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::anduril::blobs::v1::CreateBlobChunkedRequest>* reader,
             ::anduril::blobs::v1::CreateBlobChunkedResponse* resp) {
               return service->CreateBlobChunked(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BlobsAPI_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< BlobsAPI::Service, ::anduril::blobs::v1::GetBlobRequest, ::anduril::blobs::v1::GetBlobResponse>(
          [](BlobsAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::anduril::blobs::v1::GetBlobRequest* req,
             ::grpc::ServerWriter<::anduril::blobs::v1::GetBlobResponse>* writer) {
               return service->GetBlob(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BlobsAPI_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BlobsAPI::Service, ::anduril::blobs::v1::HeadBlobRequest, ::anduril::blobs::v1::HeadBlobResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BlobsAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::anduril::blobs::v1::HeadBlobRequest* req,
             ::anduril::blobs::v1::HeadBlobResponse* resp) {
               return service->HeadBlob(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BlobsAPI_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< BlobsAPI::Service, ::anduril::blobs::v1::StreamBlobMetadataRequest, ::anduril::blobs::v1::StreamBlobMetadataResponse>(
          [](BlobsAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::anduril::blobs::v1::StreamBlobMetadataRequest* req,
             ::grpc::ServerWriter<::anduril::blobs::v1::StreamBlobMetadataResponse>* writer) {
               return service->StreamBlobMetadata(ctx, req, writer);
             }, this)));
}

BlobsAPI::Service::~Service() {
}

::grpc::Status BlobsAPI::Service::CreateBlob(::grpc::ServerContext* context, const ::anduril::blobs::v1::CreateBlobRequest* request, ::anduril::blobs::v1::CreateBlobResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BlobsAPI::Service::CreateBlobChunked(::grpc::ServerContext* context, ::grpc::ServerReader< ::anduril::blobs::v1::CreateBlobChunkedRequest>* reader, ::anduril::blobs::v1::CreateBlobChunkedResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BlobsAPI::Service::GetBlob(::grpc::ServerContext* context, const ::anduril::blobs::v1::GetBlobRequest* request, ::grpc::ServerWriter< ::anduril::blobs::v1::GetBlobResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BlobsAPI::Service::HeadBlob(::grpc::ServerContext* context, const ::anduril::blobs::v1::HeadBlobRequest* request, ::anduril::blobs::v1::HeadBlobResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BlobsAPI::Service::StreamBlobMetadata(::grpc::ServerContext* context, const ::anduril::blobs::v1::StreamBlobMetadataRequest* request, ::grpc::ServerWriter< ::anduril::blobs::v1::StreamBlobMetadataResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace anduril
}  // namespace blobs
}  // namespace v1

