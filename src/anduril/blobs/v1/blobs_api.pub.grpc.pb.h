// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: anduril/blobs/v1/blobs_api.pub.proto
#ifndef GRPC_anduril_2fblobs_2fv1_2fblobs_5fapi_2epub_2eproto__INCLUDED
#define GRPC_anduril_2fblobs_2fv1_2fblobs_5fapi_2epub_2eproto__INCLUDED

#include "anduril/blobs/v1/blobs_api.pub.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace anduril {
namespace blobs {
namespace v1 {

// A general purpose blob storage service.
class BlobsAPI final {
 public:
  static constexpr char const* service_full_name() {
    return "anduril.blobs.v1.BlobsAPI";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Creates a new blob. This is a simple form for small (<=2MB) blobs with unary atomic API.
    virtual ::grpc::Status CreateBlob(::grpc::ClientContext* context, const ::anduril::blobs::v1::CreateBlobRequest& request, ::anduril::blobs::v1::CreateBlobResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::blobs::v1::CreateBlobResponse>> AsyncCreateBlob(::grpc::ClientContext* context, const ::anduril::blobs::v1::CreateBlobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::blobs::v1::CreateBlobResponse>>(AsyncCreateBlobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::blobs::v1::CreateBlobResponse>> PrepareAsyncCreateBlob(::grpc::ClientContext* context, const ::anduril::blobs::v1::CreateBlobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::blobs::v1::CreateBlobResponse>>(PrepareAsyncCreateBlobRaw(context, request, cq));
    }
    // Creates a new blob. This is for creating any sized blob using a client streaming API.
    std::unique_ptr< ::grpc::ClientWriterInterface< ::anduril::blobs::v1::CreateBlobChunkedRequest>> CreateBlobChunked(::grpc::ClientContext* context, ::anduril::blobs::v1::CreateBlobChunkedResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::anduril::blobs::v1::CreateBlobChunkedRequest>>(CreateBlobChunkedRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::anduril::blobs::v1::CreateBlobChunkedRequest>> AsyncCreateBlobChunked(::grpc::ClientContext* context, ::anduril::blobs::v1::CreateBlobChunkedResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::anduril::blobs::v1::CreateBlobChunkedRequest>>(AsyncCreateBlobChunkedRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::anduril::blobs::v1::CreateBlobChunkedRequest>> PrepareAsyncCreateBlobChunked(::grpc::ClientContext* context, ::anduril::blobs::v1::CreateBlobChunkedResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::anduril::blobs::v1::CreateBlobChunkedRequest>>(PrepareAsyncCreateBlobChunkedRaw(context, response, cq));
    }
    // Gets a blob (streams blob contents).
    std::unique_ptr< ::grpc::ClientReaderInterface< ::anduril::blobs::v1::GetBlobResponse>> GetBlob(::grpc::ClientContext* context, const ::anduril::blobs::v1::GetBlobRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::anduril::blobs::v1::GetBlobResponse>>(GetBlobRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::anduril::blobs::v1::GetBlobResponse>> AsyncGetBlob(::grpc::ClientContext* context, const ::anduril::blobs::v1::GetBlobRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::anduril::blobs::v1::GetBlobResponse>>(AsyncGetBlobRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::anduril::blobs::v1::GetBlobResponse>> PrepareAsyncGetBlob(::grpc::ClientContext* context, const ::anduril::blobs::v1::GetBlobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::anduril::blobs::v1::GetBlobResponse>>(PrepareAsyncGetBlobRaw(context, request, cq));
    }
    // Gets the metadata for a blob, but not the contents.
    virtual ::grpc::Status HeadBlob(::grpc::ClientContext* context, const ::anduril::blobs::v1::HeadBlobRequest& request, ::anduril::blobs::v1::HeadBlobResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::blobs::v1::HeadBlobResponse>> AsyncHeadBlob(::grpc::ClientContext* context, const ::anduril::blobs::v1::HeadBlobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::blobs::v1::HeadBlobResponse>>(AsyncHeadBlobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::blobs::v1::HeadBlobResponse>> PrepareAsyncHeadBlob(::grpc::ClientContext* context, const ::anduril::blobs::v1::HeadBlobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::anduril::blobs::v1::HeadBlobResponse>>(PrepareAsyncHeadBlobRaw(context, request, cq));
    }
    // Stream blob metadata announcements for the provided clientID.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::anduril::blobs::v1::StreamBlobMetadataResponse>> StreamBlobMetadata(::grpc::ClientContext* context, const ::anduril::blobs::v1::StreamBlobMetadataRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::anduril::blobs::v1::StreamBlobMetadataResponse>>(StreamBlobMetadataRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::anduril::blobs::v1::StreamBlobMetadataResponse>> AsyncStreamBlobMetadata(::grpc::ClientContext* context, const ::anduril::blobs::v1::StreamBlobMetadataRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::anduril::blobs::v1::StreamBlobMetadataResponse>>(AsyncStreamBlobMetadataRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::anduril::blobs::v1::StreamBlobMetadataResponse>> PrepareAsyncStreamBlobMetadata(::grpc::ClientContext* context, const ::anduril::blobs::v1::StreamBlobMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::anduril::blobs::v1::StreamBlobMetadataResponse>>(PrepareAsyncStreamBlobMetadataRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Creates a new blob. This is a simple form for small (<=2MB) blobs with unary atomic API.
      virtual void CreateBlob(::grpc::ClientContext* context, const ::anduril::blobs::v1::CreateBlobRequest* request, ::anduril::blobs::v1::CreateBlobResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateBlob(::grpc::ClientContext* context, const ::anduril::blobs::v1::CreateBlobRequest* request, ::anduril::blobs::v1::CreateBlobResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Creates a new blob. This is for creating any sized blob using a client streaming API.
      virtual void CreateBlobChunked(::grpc::ClientContext* context, ::anduril::blobs::v1::CreateBlobChunkedResponse* response, ::grpc::ClientWriteReactor< ::anduril::blobs::v1::CreateBlobChunkedRequest>* reactor) = 0;
      // Gets a blob (streams blob contents).
      virtual void GetBlob(::grpc::ClientContext* context, const ::anduril::blobs::v1::GetBlobRequest* request, ::grpc::ClientReadReactor< ::anduril::blobs::v1::GetBlobResponse>* reactor) = 0;
      // Gets the metadata for a blob, but not the contents.
      virtual void HeadBlob(::grpc::ClientContext* context, const ::anduril::blobs::v1::HeadBlobRequest* request, ::anduril::blobs::v1::HeadBlobResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HeadBlob(::grpc::ClientContext* context, const ::anduril::blobs::v1::HeadBlobRequest* request, ::anduril::blobs::v1::HeadBlobResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Stream blob metadata announcements for the provided clientID.
      virtual void StreamBlobMetadata(::grpc::ClientContext* context, const ::anduril::blobs::v1::StreamBlobMetadataRequest* request, ::grpc::ClientReadReactor< ::anduril::blobs::v1::StreamBlobMetadataResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::anduril::blobs::v1::CreateBlobResponse>* AsyncCreateBlobRaw(::grpc::ClientContext* context, const ::anduril::blobs::v1::CreateBlobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::anduril::blobs::v1::CreateBlobResponse>* PrepareAsyncCreateBlobRaw(::grpc::ClientContext* context, const ::anduril::blobs::v1::CreateBlobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::anduril::blobs::v1::CreateBlobChunkedRequest>* CreateBlobChunkedRaw(::grpc::ClientContext* context, ::anduril::blobs::v1::CreateBlobChunkedResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::anduril::blobs::v1::CreateBlobChunkedRequest>* AsyncCreateBlobChunkedRaw(::grpc::ClientContext* context, ::anduril::blobs::v1::CreateBlobChunkedResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::anduril::blobs::v1::CreateBlobChunkedRequest>* PrepareAsyncCreateBlobChunkedRaw(::grpc::ClientContext* context, ::anduril::blobs::v1::CreateBlobChunkedResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::anduril::blobs::v1::GetBlobResponse>* GetBlobRaw(::grpc::ClientContext* context, const ::anduril::blobs::v1::GetBlobRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::anduril::blobs::v1::GetBlobResponse>* AsyncGetBlobRaw(::grpc::ClientContext* context, const ::anduril::blobs::v1::GetBlobRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::anduril::blobs::v1::GetBlobResponse>* PrepareAsyncGetBlobRaw(::grpc::ClientContext* context, const ::anduril::blobs::v1::GetBlobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::anduril::blobs::v1::HeadBlobResponse>* AsyncHeadBlobRaw(::grpc::ClientContext* context, const ::anduril::blobs::v1::HeadBlobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::anduril::blobs::v1::HeadBlobResponse>* PrepareAsyncHeadBlobRaw(::grpc::ClientContext* context, const ::anduril::blobs::v1::HeadBlobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::anduril::blobs::v1::StreamBlobMetadataResponse>* StreamBlobMetadataRaw(::grpc::ClientContext* context, const ::anduril::blobs::v1::StreamBlobMetadataRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::anduril::blobs::v1::StreamBlobMetadataResponse>* AsyncStreamBlobMetadataRaw(::grpc::ClientContext* context, const ::anduril::blobs::v1::StreamBlobMetadataRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::anduril::blobs::v1::StreamBlobMetadataResponse>* PrepareAsyncStreamBlobMetadataRaw(::grpc::ClientContext* context, const ::anduril::blobs::v1::StreamBlobMetadataRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateBlob(::grpc::ClientContext* context, const ::anduril::blobs::v1::CreateBlobRequest& request, ::anduril::blobs::v1::CreateBlobResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::blobs::v1::CreateBlobResponse>> AsyncCreateBlob(::grpc::ClientContext* context, const ::anduril::blobs::v1::CreateBlobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::blobs::v1::CreateBlobResponse>>(AsyncCreateBlobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::blobs::v1::CreateBlobResponse>> PrepareAsyncCreateBlob(::grpc::ClientContext* context, const ::anduril::blobs::v1::CreateBlobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::blobs::v1::CreateBlobResponse>>(PrepareAsyncCreateBlobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::anduril::blobs::v1::CreateBlobChunkedRequest>> CreateBlobChunked(::grpc::ClientContext* context, ::anduril::blobs::v1::CreateBlobChunkedResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::anduril::blobs::v1::CreateBlobChunkedRequest>>(CreateBlobChunkedRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::anduril::blobs::v1::CreateBlobChunkedRequest>> AsyncCreateBlobChunked(::grpc::ClientContext* context, ::anduril::blobs::v1::CreateBlobChunkedResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::anduril::blobs::v1::CreateBlobChunkedRequest>>(AsyncCreateBlobChunkedRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::anduril::blobs::v1::CreateBlobChunkedRequest>> PrepareAsyncCreateBlobChunked(::grpc::ClientContext* context, ::anduril::blobs::v1::CreateBlobChunkedResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::anduril::blobs::v1::CreateBlobChunkedRequest>>(PrepareAsyncCreateBlobChunkedRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::anduril::blobs::v1::GetBlobResponse>> GetBlob(::grpc::ClientContext* context, const ::anduril::blobs::v1::GetBlobRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::anduril::blobs::v1::GetBlobResponse>>(GetBlobRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::anduril::blobs::v1::GetBlobResponse>> AsyncGetBlob(::grpc::ClientContext* context, const ::anduril::blobs::v1::GetBlobRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::anduril::blobs::v1::GetBlobResponse>>(AsyncGetBlobRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::anduril::blobs::v1::GetBlobResponse>> PrepareAsyncGetBlob(::grpc::ClientContext* context, const ::anduril::blobs::v1::GetBlobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::anduril::blobs::v1::GetBlobResponse>>(PrepareAsyncGetBlobRaw(context, request, cq));
    }
    ::grpc::Status HeadBlob(::grpc::ClientContext* context, const ::anduril::blobs::v1::HeadBlobRequest& request, ::anduril::blobs::v1::HeadBlobResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::blobs::v1::HeadBlobResponse>> AsyncHeadBlob(::grpc::ClientContext* context, const ::anduril::blobs::v1::HeadBlobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::blobs::v1::HeadBlobResponse>>(AsyncHeadBlobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::blobs::v1::HeadBlobResponse>> PrepareAsyncHeadBlob(::grpc::ClientContext* context, const ::anduril::blobs::v1::HeadBlobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::anduril::blobs::v1::HeadBlobResponse>>(PrepareAsyncHeadBlobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::anduril::blobs::v1::StreamBlobMetadataResponse>> StreamBlobMetadata(::grpc::ClientContext* context, const ::anduril::blobs::v1::StreamBlobMetadataRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::anduril::blobs::v1::StreamBlobMetadataResponse>>(StreamBlobMetadataRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::anduril::blobs::v1::StreamBlobMetadataResponse>> AsyncStreamBlobMetadata(::grpc::ClientContext* context, const ::anduril::blobs::v1::StreamBlobMetadataRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::anduril::blobs::v1::StreamBlobMetadataResponse>>(AsyncStreamBlobMetadataRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::anduril::blobs::v1::StreamBlobMetadataResponse>> PrepareAsyncStreamBlobMetadata(::grpc::ClientContext* context, const ::anduril::blobs::v1::StreamBlobMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::anduril::blobs::v1::StreamBlobMetadataResponse>>(PrepareAsyncStreamBlobMetadataRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateBlob(::grpc::ClientContext* context, const ::anduril::blobs::v1::CreateBlobRequest* request, ::anduril::blobs::v1::CreateBlobResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateBlob(::grpc::ClientContext* context, const ::anduril::blobs::v1::CreateBlobRequest* request, ::anduril::blobs::v1::CreateBlobResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateBlobChunked(::grpc::ClientContext* context, ::anduril::blobs::v1::CreateBlobChunkedResponse* response, ::grpc::ClientWriteReactor< ::anduril::blobs::v1::CreateBlobChunkedRequest>* reactor) override;
      void GetBlob(::grpc::ClientContext* context, const ::anduril::blobs::v1::GetBlobRequest* request, ::grpc::ClientReadReactor< ::anduril::blobs::v1::GetBlobResponse>* reactor) override;
      void HeadBlob(::grpc::ClientContext* context, const ::anduril::blobs::v1::HeadBlobRequest* request, ::anduril::blobs::v1::HeadBlobResponse* response, std::function<void(::grpc::Status)>) override;
      void HeadBlob(::grpc::ClientContext* context, const ::anduril::blobs::v1::HeadBlobRequest* request, ::anduril::blobs::v1::HeadBlobResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamBlobMetadata(::grpc::ClientContext* context, const ::anduril::blobs::v1::StreamBlobMetadataRequest* request, ::grpc::ClientReadReactor< ::anduril::blobs::v1::StreamBlobMetadataResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::anduril::blobs::v1::CreateBlobResponse>* AsyncCreateBlobRaw(::grpc::ClientContext* context, const ::anduril::blobs::v1::CreateBlobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::anduril::blobs::v1::CreateBlobResponse>* PrepareAsyncCreateBlobRaw(::grpc::ClientContext* context, const ::anduril::blobs::v1::CreateBlobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::anduril::blobs::v1::CreateBlobChunkedRequest>* CreateBlobChunkedRaw(::grpc::ClientContext* context, ::anduril::blobs::v1::CreateBlobChunkedResponse* response) override;
    ::grpc::ClientAsyncWriter< ::anduril::blobs::v1::CreateBlobChunkedRequest>* AsyncCreateBlobChunkedRaw(::grpc::ClientContext* context, ::anduril::blobs::v1::CreateBlobChunkedResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::anduril::blobs::v1::CreateBlobChunkedRequest>* PrepareAsyncCreateBlobChunkedRaw(::grpc::ClientContext* context, ::anduril::blobs::v1::CreateBlobChunkedResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::anduril::blobs::v1::GetBlobResponse>* GetBlobRaw(::grpc::ClientContext* context, const ::anduril::blobs::v1::GetBlobRequest& request) override;
    ::grpc::ClientAsyncReader< ::anduril::blobs::v1::GetBlobResponse>* AsyncGetBlobRaw(::grpc::ClientContext* context, const ::anduril::blobs::v1::GetBlobRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::anduril::blobs::v1::GetBlobResponse>* PrepareAsyncGetBlobRaw(::grpc::ClientContext* context, const ::anduril::blobs::v1::GetBlobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::anduril::blobs::v1::HeadBlobResponse>* AsyncHeadBlobRaw(::grpc::ClientContext* context, const ::anduril::blobs::v1::HeadBlobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::anduril::blobs::v1::HeadBlobResponse>* PrepareAsyncHeadBlobRaw(::grpc::ClientContext* context, const ::anduril::blobs::v1::HeadBlobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::anduril::blobs::v1::StreamBlobMetadataResponse>* StreamBlobMetadataRaw(::grpc::ClientContext* context, const ::anduril::blobs::v1::StreamBlobMetadataRequest& request) override;
    ::grpc::ClientAsyncReader< ::anduril::blobs::v1::StreamBlobMetadataResponse>* AsyncStreamBlobMetadataRaw(::grpc::ClientContext* context, const ::anduril::blobs::v1::StreamBlobMetadataRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::anduril::blobs::v1::StreamBlobMetadataResponse>* PrepareAsyncStreamBlobMetadataRaw(::grpc::ClientContext* context, const ::anduril::blobs::v1::StreamBlobMetadataRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateBlob_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateBlobChunked_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBlob_;
    const ::grpc::internal::RpcMethod rpcmethod_HeadBlob_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamBlobMetadata_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Creates a new blob. This is a simple form for small (<=2MB) blobs with unary atomic API.
    virtual ::grpc::Status CreateBlob(::grpc::ServerContext* context, const ::anduril::blobs::v1::CreateBlobRequest* request, ::anduril::blobs::v1::CreateBlobResponse* response);
    // Creates a new blob. This is for creating any sized blob using a client streaming API.
    virtual ::grpc::Status CreateBlobChunked(::grpc::ServerContext* context, ::grpc::ServerReader< ::anduril::blobs::v1::CreateBlobChunkedRequest>* reader, ::anduril::blobs::v1::CreateBlobChunkedResponse* response);
    // Gets a blob (streams blob contents).
    virtual ::grpc::Status GetBlob(::grpc::ServerContext* context, const ::anduril::blobs::v1::GetBlobRequest* request, ::grpc::ServerWriter< ::anduril::blobs::v1::GetBlobResponse>* writer);
    // Gets the metadata for a blob, but not the contents.
    virtual ::grpc::Status HeadBlob(::grpc::ServerContext* context, const ::anduril::blobs::v1::HeadBlobRequest* request, ::anduril::blobs::v1::HeadBlobResponse* response);
    // Stream blob metadata announcements for the provided clientID.
    virtual ::grpc::Status StreamBlobMetadata(::grpc::ServerContext* context, const ::anduril::blobs::v1::StreamBlobMetadataRequest* request, ::grpc::ServerWriter< ::anduril::blobs::v1::StreamBlobMetadataResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateBlob() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateBlob(::grpc::ServerContext* /*context*/, const ::anduril::blobs::v1::CreateBlobRequest* /*request*/, ::anduril::blobs::v1::CreateBlobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateBlob(::grpc::ServerContext* context, ::anduril::blobs::v1::CreateBlobRequest* request, ::grpc::ServerAsyncResponseWriter< ::anduril::blobs::v1::CreateBlobResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateBlobChunked : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateBlobChunked() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreateBlobChunked() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateBlobChunked(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::anduril::blobs::v1::CreateBlobChunkedRequest>* /*reader*/, ::anduril::blobs::v1::CreateBlobChunkedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateBlobChunked(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::anduril::blobs::v1::CreateBlobChunkedResponse, ::anduril::blobs::v1::CreateBlobChunkedRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBlob() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlob(::grpc::ServerContext* /*context*/, const ::anduril::blobs::v1::GetBlobRequest* /*request*/, ::grpc::ServerWriter< ::anduril::blobs::v1::GetBlobResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlob(::grpc::ServerContext* context, ::anduril::blobs::v1::GetBlobRequest* request, ::grpc::ServerAsyncWriter< ::anduril::blobs::v1::GetBlobResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HeadBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HeadBlob() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_HeadBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HeadBlob(::grpc::ServerContext* /*context*/, const ::anduril::blobs::v1::HeadBlobRequest* /*request*/, ::anduril::blobs::v1::HeadBlobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHeadBlob(::grpc::ServerContext* context, ::anduril::blobs::v1::HeadBlobRequest* request, ::grpc::ServerAsyncResponseWriter< ::anduril::blobs::v1::HeadBlobResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamBlobMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamBlobMetadata() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_StreamBlobMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamBlobMetadata(::grpc::ServerContext* /*context*/, const ::anduril::blobs::v1::StreamBlobMetadataRequest* /*request*/, ::grpc::ServerWriter< ::anduril::blobs::v1::StreamBlobMetadataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamBlobMetadata(::grpc::ServerContext* context, ::anduril::blobs::v1::StreamBlobMetadataRequest* request, ::grpc::ServerAsyncWriter< ::anduril::blobs::v1::StreamBlobMetadataResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateBlob<WithAsyncMethod_CreateBlobChunked<WithAsyncMethod_GetBlob<WithAsyncMethod_HeadBlob<WithAsyncMethod_StreamBlobMetadata<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateBlob() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::anduril::blobs::v1::CreateBlobRequest, ::anduril::blobs::v1::CreateBlobResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::anduril::blobs::v1::CreateBlobRequest* request, ::anduril::blobs::v1::CreateBlobResponse* response) { return this->CreateBlob(context, request, response); }));}
    void SetMessageAllocatorFor_CreateBlob(
        ::grpc::MessageAllocator< ::anduril::blobs::v1::CreateBlobRequest, ::anduril::blobs::v1::CreateBlobResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::anduril::blobs::v1::CreateBlobRequest, ::anduril::blobs::v1::CreateBlobResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateBlob(::grpc::ServerContext* /*context*/, const ::anduril::blobs::v1::CreateBlobRequest* /*request*/, ::anduril::blobs::v1::CreateBlobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateBlob(
      ::grpc::CallbackServerContext* /*context*/, const ::anduril::blobs::v1::CreateBlobRequest* /*request*/, ::anduril::blobs::v1::CreateBlobResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateBlobChunked : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateBlobChunked() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::anduril::blobs::v1::CreateBlobChunkedRequest, ::anduril::blobs::v1::CreateBlobChunkedResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, ::anduril::blobs::v1::CreateBlobChunkedResponse* response) { return this->CreateBlobChunked(context, response); }));
    }
    ~WithCallbackMethod_CreateBlobChunked() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateBlobChunked(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::anduril::blobs::v1::CreateBlobChunkedRequest>* /*reader*/, ::anduril::blobs::v1::CreateBlobChunkedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::anduril::blobs::v1::CreateBlobChunkedRequest>* CreateBlobChunked(
      ::grpc::CallbackServerContext* /*context*/, ::anduril::blobs::v1::CreateBlobChunkedResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBlob() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::anduril::blobs::v1::GetBlobRequest, ::anduril::blobs::v1::GetBlobResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::anduril::blobs::v1::GetBlobRequest* request) { return this->GetBlob(context, request); }));
    }
    ~WithCallbackMethod_GetBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlob(::grpc::ServerContext* /*context*/, const ::anduril::blobs::v1::GetBlobRequest* /*request*/, ::grpc::ServerWriter< ::anduril::blobs::v1::GetBlobResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::anduril::blobs::v1::GetBlobResponse>* GetBlob(
      ::grpc::CallbackServerContext* /*context*/, const ::anduril::blobs::v1::GetBlobRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HeadBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HeadBlob() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::anduril::blobs::v1::HeadBlobRequest, ::anduril::blobs::v1::HeadBlobResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::anduril::blobs::v1::HeadBlobRequest* request, ::anduril::blobs::v1::HeadBlobResponse* response) { return this->HeadBlob(context, request, response); }));}
    void SetMessageAllocatorFor_HeadBlob(
        ::grpc::MessageAllocator< ::anduril::blobs::v1::HeadBlobRequest, ::anduril::blobs::v1::HeadBlobResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::anduril::blobs::v1::HeadBlobRequest, ::anduril::blobs::v1::HeadBlobResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HeadBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HeadBlob(::grpc::ServerContext* /*context*/, const ::anduril::blobs::v1::HeadBlobRequest* /*request*/, ::anduril::blobs::v1::HeadBlobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HeadBlob(
      ::grpc::CallbackServerContext* /*context*/, const ::anduril::blobs::v1::HeadBlobRequest* /*request*/, ::anduril::blobs::v1::HeadBlobResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamBlobMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamBlobMetadata() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::anduril::blobs::v1::StreamBlobMetadataRequest, ::anduril::blobs::v1::StreamBlobMetadataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::anduril::blobs::v1::StreamBlobMetadataRequest* request) { return this->StreamBlobMetadata(context, request); }));
    }
    ~WithCallbackMethod_StreamBlobMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamBlobMetadata(::grpc::ServerContext* /*context*/, const ::anduril::blobs::v1::StreamBlobMetadataRequest* /*request*/, ::grpc::ServerWriter< ::anduril::blobs::v1::StreamBlobMetadataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::anduril::blobs::v1::StreamBlobMetadataResponse>* StreamBlobMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::anduril::blobs::v1::StreamBlobMetadataRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateBlob<WithCallbackMethod_CreateBlobChunked<WithCallbackMethod_GetBlob<WithCallbackMethod_HeadBlob<WithCallbackMethod_StreamBlobMetadata<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateBlob() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateBlob(::grpc::ServerContext* /*context*/, const ::anduril::blobs::v1::CreateBlobRequest* /*request*/, ::anduril::blobs::v1::CreateBlobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateBlobChunked : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateBlobChunked() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreateBlobChunked() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateBlobChunked(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::anduril::blobs::v1::CreateBlobChunkedRequest>* /*reader*/, ::anduril::blobs::v1::CreateBlobChunkedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBlob() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlob(::grpc::ServerContext* /*context*/, const ::anduril::blobs::v1::GetBlobRequest* /*request*/, ::grpc::ServerWriter< ::anduril::blobs::v1::GetBlobResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HeadBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HeadBlob() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_HeadBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HeadBlob(::grpc::ServerContext* /*context*/, const ::anduril::blobs::v1::HeadBlobRequest* /*request*/, ::anduril::blobs::v1::HeadBlobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamBlobMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamBlobMetadata() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_StreamBlobMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamBlobMetadata(::grpc::ServerContext* /*context*/, const ::anduril::blobs::v1::StreamBlobMetadataRequest* /*request*/, ::grpc::ServerWriter< ::anduril::blobs::v1::StreamBlobMetadataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateBlob() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateBlob(::grpc::ServerContext* /*context*/, const ::anduril::blobs::v1::CreateBlobRequest* /*request*/, ::anduril::blobs::v1::CreateBlobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateBlob(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateBlobChunked : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateBlobChunked() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CreateBlobChunked() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateBlobChunked(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::anduril::blobs::v1::CreateBlobChunkedRequest>* /*reader*/, ::anduril::blobs::v1::CreateBlobChunkedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateBlobChunked(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBlob() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlob(::grpc::ServerContext* /*context*/, const ::anduril::blobs::v1::GetBlobRequest* /*request*/, ::grpc::ServerWriter< ::anduril::blobs::v1::GetBlobResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlob(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HeadBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HeadBlob() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_HeadBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HeadBlob(::grpc::ServerContext* /*context*/, const ::anduril::blobs::v1::HeadBlobRequest* /*request*/, ::anduril::blobs::v1::HeadBlobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHeadBlob(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamBlobMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamBlobMetadata() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_StreamBlobMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamBlobMetadata(::grpc::ServerContext* /*context*/, const ::anduril::blobs::v1::StreamBlobMetadataRequest* /*request*/, ::grpc::ServerWriter< ::anduril::blobs::v1::StreamBlobMetadataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamBlobMetadata(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateBlob() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateBlob(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateBlob(::grpc::ServerContext* /*context*/, const ::anduril::blobs::v1::CreateBlobRequest* /*request*/, ::anduril::blobs::v1::CreateBlobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateBlob(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateBlobChunked : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateBlobChunked() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->CreateBlobChunked(context, response); }));
    }
    ~WithRawCallbackMethod_CreateBlobChunked() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateBlobChunked(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::anduril::blobs::v1::CreateBlobChunkedRequest>* /*reader*/, ::anduril::blobs::v1::CreateBlobChunkedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* CreateBlobChunked(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBlob() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetBlob(context, request); }));
    }
    ~WithRawCallbackMethod_GetBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlob(::grpc::ServerContext* /*context*/, const ::anduril::blobs::v1::GetBlobRequest* /*request*/, ::grpc::ServerWriter< ::anduril::blobs::v1::GetBlobResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetBlob(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HeadBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HeadBlob() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HeadBlob(context, request, response); }));
    }
    ~WithRawCallbackMethod_HeadBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HeadBlob(::grpc::ServerContext* /*context*/, const ::anduril::blobs::v1::HeadBlobRequest* /*request*/, ::anduril::blobs::v1::HeadBlobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HeadBlob(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamBlobMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamBlobMetadata() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamBlobMetadata(context, request); }));
    }
    ~WithRawCallbackMethod_StreamBlobMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamBlobMetadata(::grpc::ServerContext* /*context*/, const ::anduril::blobs::v1::StreamBlobMetadataRequest* /*request*/, ::grpc::ServerWriter< ::anduril::blobs::v1::StreamBlobMetadataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamBlobMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateBlob() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::anduril::blobs::v1::CreateBlobRequest, ::anduril::blobs::v1::CreateBlobResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::anduril::blobs::v1::CreateBlobRequest, ::anduril::blobs::v1::CreateBlobResponse>* streamer) {
                       return this->StreamedCreateBlob(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateBlob(::grpc::ServerContext* /*context*/, const ::anduril::blobs::v1::CreateBlobRequest* /*request*/, ::anduril::blobs::v1::CreateBlobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateBlob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::anduril::blobs::v1::CreateBlobRequest,::anduril::blobs::v1::CreateBlobResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HeadBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HeadBlob() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::anduril::blobs::v1::HeadBlobRequest, ::anduril::blobs::v1::HeadBlobResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::anduril::blobs::v1::HeadBlobRequest, ::anduril::blobs::v1::HeadBlobResponse>* streamer) {
                       return this->StreamedHeadBlob(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HeadBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HeadBlob(::grpc::ServerContext* /*context*/, const ::anduril::blobs::v1::HeadBlobRequest* /*request*/, ::anduril::blobs::v1::HeadBlobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHeadBlob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::anduril::blobs::v1::HeadBlobRequest,::anduril::blobs::v1::HeadBlobResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateBlob<WithStreamedUnaryMethod_HeadBlob<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetBlob() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::anduril::blobs::v1::GetBlobRequest, ::anduril::blobs::v1::GetBlobResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::anduril::blobs::v1::GetBlobRequest, ::anduril::blobs::v1::GetBlobResponse>* streamer) {
                       return this->StreamedGetBlob(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBlob(::grpc::ServerContext* /*context*/, const ::anduril::blobs::v1::GetBlobRequest* /*request*/, ::grpc::ServerWriter< ::anduril::blobs::v1::GetBlobResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetBlob(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::anduril::blobs::v1::GetBlobRequest,::anduril::blobs::v1::GetBlobResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamBlobMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamBlobMetadata() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::anduril::blobs::v1::StreamBlobMetadataRequest, ::anduril::blobs::v1::StreamBlobMetadataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::anduril::blobs::v1::StreamBlobMetadataRequest, ::anduril::blobs::v1::StreamBlobMetadataResponse>* streamer) {
                       return this->StreamedStreamBlobMetadata(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamBlobMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamBlobMetadata(::grpc::ServerContext* /*context*/, const ::anduril::blobs::v1::StreamBlobMetadataRequest* /*request*/, ::grpc::ServerWriter< ::anduril::blobs::v1::StreamBlobMetadataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamBlobMetadata(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::anduril::blobs::v1::StreamBlobMetadataRequest,::anduril::blobs::v1::StreamBlobMetadataResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetBlob<WithSplitStreamingMethod_StreamBlobMetadata<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateBlob<WithSplitStreamingMethod_GetBlob<WithStreamedUnaryMethod_HeadBlob<WithSplitStreamingMethod_StreamBlobMetadata<Service > > > > StreamedService;
};

}  // namespace v1
}  // namespace blobs
}  // namespace anduril


#endif  // GRPC_anduril_2fblobs_2fv1_2fblobs_5fapi_2epub_2eproto__INCLUDED
