// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: anduril/tasks/v2/shared/maneuver.pub.proto
// Protobuf C++ Version: 5.29.0

#ifndef anduril_2ftasks_2fv2_2fshared_2fmaneuver_2epub_2eproto_2epb_2eh
#define anduril_2ftasks_2fv2_2fshared_2fmaneuver_2epub_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "anduril/tasks/v2/objective.pub.pb.h"
#include "anduril/tasks/v2/shared/isr.pub.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_anduril_2ftasks_2fv2_2fshared_2fmaneuver_2epub_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_anduril_2ftasks_2fv2_2fshared_2fmaneuver_2epub_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_anduril_2ftasks_2fv2_2fshared_2fmaneuver_2epub_2eproto;
namespace anduril {
namespace tasks {
namespace v2 {
class Marshal;
struct MarshalDefaultTypeInternal;
extern MarshalDefaultTypeInternal _Marshal_default_instance_;
class PathSegment;
struct PathSegmentDefaultTypeInternal;
extern PathSegmentDefaultTypeInternal _PathSegment_default_instance_;
class Route;
struct RouteDefaultTypeInternal;
extern RouteDefaultTypeInternal _Route_default_instance_;
class RoutePlan;
struct RoutePlanDefaultTypeInternal;
extern RoutePlanDefaultTypeInternal _RoutePlan_default_instance_;
class SetLaunchRoute;
struct SetLaunchRouteDefaultTypeInternal;
extern SetLaunchRouteDefaultTypeInternal _SetLaunchRoute_default_instance_;
class Transit;
struct TransitDefaultTypeInternal;
extern TransitDefaultTypeInternal _Transit_default_instance_;
class Waypoint;
struct WaypointDefaultTypeInternal;
extern WaypointDefaultTypeInternal _Waypoint_default_instance_;
}  // namespace v2
}  // namespace tasks
}  // namespace anduril
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace anduril {
namespace tasks {
namespace v2 {
enum LaunchTrackingMode : int {
  LAUNCH_TRACKING_MODE_INVALID = 0,
  LAUNCH_TRACKING_MODE_GO_TO_WAYPOINT = 1,
  LAUNCH_TRACKING_MODE_TRACK_TO_WAYPOINT = 2,
  LaunchTrackingMode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  LaunchTrackingMode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool LaunchTrackingMode_IsValid(int value);
extern const uint32_t LaunchTrackingMode_internal_data_[];
constexpr LaunchTrackingMode LaunchTrackingMode_MIN = static_cast<LaunchTrackingMode>(0);
constexpr LaunchTrackingMode LaunchTrackingMode_MAX = static_cast<LaunchTrackingMode>(2);
constexpr int LaunchTrackingMode_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
LaunchTrackingMode_descriptor();
template <typename T>
const std::string& LaunchTrackingMode_Name(T value) {
  static_assert(std::is_same<T, LaunchTrackingMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to LaunchTrackingMode_Name().");
  return LaunchTrackingMode_Name(static_cast<LaunchTrackingMode>(value));
}
template <>
inline const std::string& LaunchTrackingMode_Name(LaunchTrackingMode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<LaunchTrackingMode_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool LaunchTrackingMode_Parse(absl::string_view name, LaunchTrackingMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LaunchTrackingMode>(
      LaunchTrackingMode_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Waypoint final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.tasks.v2.Waypoint) */ {
 public:
  inline Waypoint() : Waypoint(nullptr) {}
  ~Waypoint() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Waypoint* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Waypoint));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Waypoint(
      ::google::protobuf::internal::ConstantInitialized);

  inline Waypoint(const Waypoint& from) : Waypoint(nullptr, from) {}
  inline Waypoint(Waypoint&& from) noexcept
      : Waypoint(nullptr, std::move(from)) {}
  inline Waypoint& operator=(const Waypoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline Waypoint& operator=(Waypoint&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Waypoint& default_instance() {
    return *internal_default_instance();
  }
  enum PointCase {
    kLlaPoint = 1,
    POINT_NOT_SET = 0,
  };
  static inline const Waypoint* internal_default_instance() {
    return reinterpret_cast<const Waypoint*>(
        &_Waypoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(Waypoint& a, Waypoint& b) { a.Swap(&b); }
  inline void Swap(Waypoint* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Waypoint* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Waypoint* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Waypoint>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Waypoint& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Waypoint& from) { Waypoint::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Waypoint* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "anduril.tasks.v2.Waypoint"; }

 protected:
  explicit Waypoint(::google::protobuf::Arena* arena);
  Waypoint(::google::protobuf::Arena* arena, const Waypoint& from);
  Waypoint(::google::protobuf::Arena* arena, Waypoint&& from) noexcept
      : Waypoint(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLlaPointFieldNumber = 1,
  };
  // .anduril.tasks.v2.Point lla_point = 1 [json_name = "llaPoint"];
  bool has_lla_point() const;
  private:
  bool _internal_has_lla_point() const;

  public:
  void clear_lla_point() ;
  const ::anduril::tasks::v2::Point& lla_point() const;
  PROTOBUF_NODISCARD ::anduril::tasks::v2::Point* release_lla_point();
  ::anduril::tasks::v2::Point* mutable_lla_point();
  void set_allocated_lla_point(::anduril::tasks::v2::Point* value);
  void unsafe_arena_set_allocated_lla_point(::anduril::tasks::v2::Point* value);
  ::anduril::tasks::v2::Point* unsafe_arena_release_lla_point();

  private:
  const ::anduril::tasks::v2::Point& _internal_lla_point() const;
  ::anduril::tasks::v2::Point* _internal_mutable_lla_point();

  public:
  void clear_point();
  PointCase point_case() const;
  // @@protoc_insertion_point(class_scope:anduril.tasks.v2.Waypoint)
 private:
  class _Internal;
  void set_has_lla_point();
  inline bool has_point() const;
  inline void clear_has_point();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Waypoint& from_msg);
    union PointUnion {
      constexpr PointUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::anduril::tasks::v2::Point* lla_point_;
    } point_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2ftasks_2fv2_2fshared_2fmaneuver_2epub_2eproto;
};
// -------------------------------------------------------------------

class Marshal final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.tasks.v2.Marshal) */ {
 public:
  inline Marshal() : Marshal(nullptr) {}
  ~Marshal() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Marshal* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Marshal));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Marshal(
      ::google::protobuf::internal::ConstantInitialized);

  inline Marshal(const Marshal& from) : Marshal(nullptr, from) {}
  inline Marshal(Marshal&& from) noexcept
      : Marshal(nullptr, std::move(from)) {}
  inline Marshal& operator=(const Marshal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Marshal& operator=(Marshal&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Marshal& default_instance() {
    return *internal_default_instance();
  }
  static inline const Marshal* internal_default_instance() {
    return reinterpret_cast<const Marshal*>(
        &_Marshal_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Marshal& a, Marshal& b) { a.Swap(&b); }
  inline void Swap(Marshal* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Marshal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Marshal* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Marshal>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Marshal& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Marshal& from) { Marshal::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Marshal* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "anduril.tasks.v2.Marshal"; }

 protected:
  explicit Marshal(::google::protobuf::Arena* arena);
  Marshal(::google::protobuf::Arena* arena, const Marshal& from);
  Marshal(::google::protobuf::Arena* arena, Marshal&& from) noexcept
      : Marshal(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kObjectiveFieldNumber = 1,
  };
  // .anduril.tasks.v2.Objective objective = 1 [json_name = "objective"];
  bool has_objective() const;
  void clear_objective() ;
  const ::anduril::tasks::v2::Objective& objective() const;
  PROTOBUF_NODISCARD ::anduril::tasks::v2::Objective* release_objective();
  ::anduril::tasks::v2::Objective* mutable_objective();
  void set_allocated_objective(::anduril::tasks::v2::Objective* value);
  void unsafe_arena_set_allocated_objective(::anduril::tasks::v2::Objective* value);
  ::anduril::tasks::v2::Objective* unsafe_arena_release_objective();

  private:
  const ::anduril::tasks::v2::Objective& _internal_objective() const;
  ::anduril::tasks::v2::Objective* _internal_mutable_objective();

  public:
  // @@protoc_insertion_point(class_scope:anduril.tasks.v2.Marshal)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Marshal& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::anduril::tasks::v2::Objective* objective_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2ftasks_2fv2_2fshared_2fmaneuver_2epub_2eproto;
};
// -------------------------------------------------------------------

class PathSegment final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.tasks.v2.PathSegment) */ {
 public:
  inline PathSegment() : PathSegment(nullptr) {}
  ~PathSegment() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PathSegment* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PathSegment));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PathSegment(
      ::google::protobuf::internal::ConstantInitialized);

  inline PathSegment(const PathSegment& from) : PathSegment(nullptr, from) {}
  inline PathSegment(PathSegment&& from) noexcept
      : PathSegment(nullptr, std::move(from)) {}
  inline PathSegment& operator=(const PathSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathSegment& operator=(PathSegment&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PathSegment& default_instance() {
    return *internal_default_instance();
  }
  enum EndPointCase {
    kWaypoint = 1,
    kLoiter = 2,
    END_POINT_NOT_SET = 0,
  };
  static inline const PathSegment* internal_default_instance() {
    return reinterpret_cast<const PathSegment*>(
        &_PathSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(PathSegment& a, PathSegment& b) { a.Swap(&b); }
  inline void Swap(PathSegment* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PathSegment* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PathSegment* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PathSegment>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PathSegment& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PathSegment& from) { PathSegment::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PathSegment* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "anduril.tasks.v2.PathSegment"; }

 protected:
  explicit PathSegment(::google::protobuf::Arena* arena);
  PathSegment(::google::protobuf::Arena* arena, const PathSegment& from);
  PathSegment(::google::protobuf::Arena* arena, PathSegment&& from) noexcept
      : PathSegment(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWaypointFieldNumber = 1,
    kLoiterFieldNumber = 2,
  };
  // .anduril.tasks.v2.Waypoint waypoint = 1 [json_name = "waypoint"];
  bool has_waypoint() const;
  private:
  bool _internal_has_waypoint() const;

  public:
  void clear_waypoint() ;
  const ::anduril::tasks::v2::Waypoint& waypoint() const;
  PROTOBUF_NODISCARD ::anduril::tasks::v2::Waypoint* release_waypoint();
  ::anduril::tasks::v2::Waypoint* mutable_waypoint();
  void set_allocated_waypoint(::anduril::tasks::v2::Waypoint* value);
  void unsafe_arena_set_allocated_waypoint(::anduril::tasks::v2::Waypoint* value);
  ::anduril::tasks::v2::Waypoint* unsafe_arena_release_waypoint();

  private:
  const ::anduril::tasks::v2::Waypoint& _internal_waypoint() const;
  ::anduril::tasks::v2::Waypoint* _internal_mutable_waypoint();

  public:
  // .anduril.tasks.v2.Loiter loiter = 2 [json_name = "loiter"];
  bool has_loiter() const;
  private:
  bool _internal_has_loiter() const;

  public:
  void clear_loiter() ;
  const ::anduril::tasks::v2::Loiter& loiter() const;
  PROTOBUF_NODISCARD ::anduril::tasks::v2::Loiter* release_loiter();
  ::anduril::tasks::v2::Loiter* mutable_loiter();
  void set_allocated_loiter(::anduril::tasks::v2::Loiter* value);
  void unsafe_arena_set_allocated_loiter(::anduril::tasks::v2::Loiter* value);
  ::anduril::tasks::v2::Loiter* unsafe_arena_release_loiter();

  private:
  const ::anduril::tasks::v2::Loiter& _internal_loiter() const;
  ::anduril::tasks::v2::Loiter* _internal_mutable_loiter();

  public:
  void clear_end_point();
  EndPointCase end_point_case() const;
  // @@protoc_insertion_point(class_scope:anduril.tasks.v2.PathSegment)
 private:
  class _Internal;
  void set_has_waypoint();
  void set_has_loiter();
  inline bool has_end_point() const;
  inline void clear_has_end_point();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PathSegment& from_msg);
    union EndPointUnion {
      constexpr EndPointUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::anduril::tasks::v2::Waypoint* waypoint_;
      ::anduril::tasks::v2::Loiter* loiter_;
    } end_point_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2ftasks_2fv2_2fshared_2fmaneuver_2epub_2eproto;
};
// -------------------------------------------------------------------

class Route final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.tasks.v2.Route) */ {
 public:
  inline Route() : Route(nullptr) {}
  ~Route() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Route* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Route));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Route(
      ::google::protobuf::internal::ConstantInitialized);

  inline Route(const Route& from) : Route(nullptr, from) {}
  inline Route(Route&& from) noexcept
      : Route(nullptr, std::move(from)) {}
  inline Route& operator=(const Route& from) {
    CopyFrom(from);
    return *this;
  }
  inline Route& operator=(Route&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Route& default_instance() {
    return *internal_default_instance();
  }
  static inline const Route* internal_default_instance() {
    return reinterpret_cast<const Route*>(
        &_Route_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Route& a, Route& b) { a.Swap(&b); }
  inline void Swap(Route* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Route* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Route* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Route>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Route& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Route& from) { Route::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Route* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "anduril.tasks.v2.Route"; }

 protected:
  explicit Route(::google::protobuf::Arena* arena);
  Route(::google::protobuf::Arena* arena, const Route& from);
  Route(::google::protobuf::Arena* arena, Route&& from) noexcept
      : Route(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPathFieldNumber = 1,
  };
  // repeated .anduril.tasks.v2.PathSegment path = 1 [json_name = "path"];
  int path_size() const;
  private:
  int _internal_path_size() const;

  public:
  void clear_path() ;
  ::anduril::tasks::v2::PathSegment* mutable_path(int index);
  ::google::protobuf::RepeatedPtrField<::anduril::tasks::v2::PathSegment>* mutable_path();

  private:
  const ::google::protobuf::RepeatedPtrField<::anduril::tasks::v2::PathSegment>& _internal_path() const;
  ::google::protobuf::RepeatedPtrField<::anduril::tasks::v2::PathSegment>* _internal_mutable_path();
  public:
  const ::anduril::tasks::v2::PathSegment& path(int index) const;
  ::anduril::tasks::v2::PathSegment* add_path();
  const ::google::protobuf::RepeatedPtrField<::anduril::tasks::v2::PathSegment>& path() const;
  // @@protoc_insertion_point(class_scope:anduril.tasks.v2.Route)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Route& from_msg);
    ::google::protobuf::RepeatedPtrField< ::anduril::tasks::v2::PathSegment > path_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2ftasks_2fv2_2fshared_2fmaneuver_2epub_2eproto;
};
// -------------------------------------------------------------------

class RoutePlan final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.tasks.v2.RoutePlan) */ {
 public:
  inline RoutePlan() : RoutePlan(nullptr) {}
  ~RoutePlan() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RoutePlan* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RoutePlan));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RoutePlan(
      ::google::protobuf::internal::ConstantInitialized);

  inline RoutePlan(const RoutePlan& from) : RoutePlan(nullptr, from) {}
  inline RoutePlan(RoutePlan&& from) noexcept
      : RoutePlan(nullptr, std::move(from)) {}
  inline RoutePlan& operator=(const RoutePlan& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutePlan& operator=(RoutePlan&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoutePlan& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoutePlan* internal_default_instance() {
    return reinterpret_cast<const RoutePlan*>(
        &_RoutePlan_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(RoutePlan& a, RoutePlan& b) { a.Swap(&b); }
  inline void Swap(RoutePlan* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutePlan* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoutePlan* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RoutePlan>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RoutePlan& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RoutePlan& from) { RoutePlan::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RoutePlan* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "anduril.tasks.v2.RoutePlan"; }

 protected:
  explicit RoutePlan(::google::protobuf::Arena* arena);
  RoutePlan(::google::protobuf::Arena* arena, const RoutePlan& from);
  RoutePlan(::google::protobuf::Arena* arena, RoutePlan&& from) noexcept
      : RoutePlan(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRouteFieldNumber = 1,
  };
  // .anduril.tasks.v2.Route route = 1 [json_name = "route"];
  bool has_route() const;
  void clear_route() ;
  const ::anduril::tasks::v2::Route& route() const;
  PROTOBUF_NODISCARD ::anduril::tasks::v2::Route* release_route();
  ::anduril::tasks::v2::Route* mutable_route();
  void set_allocated_route(::anduril::tasks::v2::Route* value);
  void unsafe_arena_set_allocated_route(::anduril::tasks::v2::Route* value);
  ::anduril::tasks::v2::Route* unsafe_arena_release_route();

  private:
  const ::anduril::tasks::v2::Route& _internal_route() const;
  ::anduril::tasks::v2::Route* _internal_mutable_route();

  public:
  // @@protoc_insertion_point(class_scope:anduril.tasks.v2.RoutePlan)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RoutePlan& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::anduril::tasks::v2::Route* route_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2ftasks_2fv2_2fshared_2fmaneuver_2epub_2eproto;
};
// -------------------------------------------------------------------

class Transit final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.tasks.v2.Transit) */ {
 public:
  inline Transit() : Transit(nullptr) {}
  ~Transit() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Transit* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Transit));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Transit(
      ::google::protobuf::internal::ConstantInitialized);

  inline Transit(const Transit& from) : Transit(nullptr, from) {}
  inline Transit(Transit&& from) noexcept
      : Transit(nullptr, std::move(from)) {}
  inline Transit& operator=(const Transit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transit& operator=(Transit&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transit& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transit* internal_default_instance() {
    return reinterpret_cast<const Transit*>(
        &_Transit_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Transit& a, Transit& b) { a.Swap(&b); }
  inline void Swap(Transit* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transit* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transit* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Transit>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Transit& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Transit& from) { Transit::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Transit* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "anduril.tasks.v2.Transit"; }

 protected:
  explicit Transit(::google::protobuf::Arena* arena);
  Transit(::google::protobuf::Arena* arena, const Transit& from);
  Transit(::google::protobuf::Arena* arena, Transit&& from) noexcept
      : Transit(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPlanFieldNumber = 1,
  };
  // .anduril.tasks.v2.RoutePlan plan = 1 [json_name = "plan"];
  bool has_plan() const;
  void clear_plan() ;
  const ::anduril::tasks::v2::RoutePlan& plan() const;
  PROTOBUF_NODISCARD ::anduril::tasks::v2::RoutePlan* release_plan();
  ::anduril::tasks::v2::RoutePlan* mutable_plan();
  void set_allocated_plan(::anduril::tasks::v2::RoutePlan* value);
  void unsafe_arena_set_allocated_plan(::anduril::tasks::v2::RoutePlan* value);
  ::anduril::tasks::v2::RoutePlan* unsafe_arena_release_plan();

  private:
  const ::anduril::tasks::v2::RoutePlan& _internal_plan() const;
  ::anduril::tasks::v2::RoutePlan* _internal_mutable_plan();

  public:
  // @@protoc_insertion_point(class_scope:anduril.tasks.v2.Transit)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Transit& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::anduril::tasks::v2::RoutePlan* plan_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2ftasks_2fv2_2fshared_2fmaneuver_2epub_2eproto;
};
// -------------------------------------------------------------------

class SetLaunchRoute final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:anduril.tasks.v2.SetLaunchRoute) */ {
 public:
  inline SetLaunchRoute() : SetLaunchRoute(nullptr) {}
  ~SetLaunchRoute() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetLaunchRoute* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetLaunchRoute));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetLaunchRoute(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetLaunchRoute(const SetLaunchRoute& from) : SetLaunchRoute(nullptr, from) {}
  inline SetLaunchRoute(SetLaunchRoute&& from) noexcept
      : SetLaunchRoute(nullptr, std::move(from)) {}
  inline SetLaunchRoute& operator=(const SetLaunchRoute& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetLaunchRoute& operator=(SetLaunchRoute&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetLaunchRoute& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetLaunchRoute* internal_default_instance() {
    return reinterpret_cast<const SetLaunchRoute*>(
        &_SetLaunchRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(SetLaunchRoute& a, SetLaunchRoute& b) { a.Swap(&b); }
  inline void Swap(SetLaunchRoute* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetLaunchRoute* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetLaunchRoute* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SetLaunchRoute>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetLaunchRoute& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetLaunchRoute& from) { SetLaunchRoute::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SetLaunchRoute* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "anduril.tasks.v2.SetLaunchRoute"; }

 protected:
  explicit SetLaunchRoute(::google::protobuf::Arena* arena);
  SetLaunchRoute(::google::protobuf::Arena* arena, const SetLaunchRoute& from);
  SetLaunchRoute(::google::protobuf::Arena* arena, SetLaunchRoute&& from) noexcept
      : SetLaunchRoute(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPlanFieldNumber = 1,
    kTrackingModeFieldNumber = 2,
  };
  // .anduril.tasks.v2.RoutePlan plan = 1 [json_name = "plan"];
  bool has_plan() const;
  void clear_plan() ;
  const ::anduril::tasks::v2::RoutePlan& plan() const;
  PROTOBUF_NODISCARD ::anduril::tasks::v2::RoutePlan* release_plan();
  ::anduril::tasks::v2::RoutePlan* mutable_plan();
  void set_allocated_plan(::anduril::tasks::v2::RoutePlan* value);
  void unsafe_arena_set_allocated_plan(::anduril::tasks::v2::RoutePlan* value);
  ::anduril::tasks::v2::RoutePlan* unsafe_arena_release_plan();

  private:
  const ::anduril::tasks::v2::RoutePlan& _internal_plan() const;
  ::anduril::tasks::v2::RoutePlan* _internal_mutable_plan();

  public:
  // .anduril.tasks.v2.LaunchTrackingMode tracking_mode = 2 [json_name = "trackingMode"];
  void clear_tracking_mode() ;
  ::anduril::tasks::v2::LaunchTrackingMode tracking_mode() const;
  void set_tracking_mode(::anduril::tasks::v2::LaunchTrackingMode value);

  private:
  ::anduril::tasks::v2::LaunchTrackingMode _internal_tracking_mode() const;
  void _internal_set_tracking_mode(::anduril::tasks::v2::LaunchTrackingMode value);

  public:
  // @@protoc_insertion_point(class_scope:anduril.tasks.v2.SetLaunchRoute)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SetLaunchRoute& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::anduril::tasks::v2::RoutePlan* plan_;
    int tracking_mode_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_anduril_2ftasks_2fv2_2fshared_2fmaneuver_2epub_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Marshal

// .anduril.tasks.v2.Objective objective = 1 [json_name = "objective"];
inline bool Marshal::has_objective() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.objective_ != nullptr);
  return value;
}
inline const ::anduril::tasks::v2::Objective& Marshal::_internal_objective() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::anduril::tasks::v2::Objective* p = _impl_.objective_;
  return p != nullptr ? *p : reinterpret_cast<const ::anduril::tasks::v2::Objective&>(::anduril::tasks::v2::_Objective_default_instance_);
}
inline const ::anduril::tasks::v2::Objective& Marshal::objective() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.tasks.v2.Marshal.objective)
  return _internal_objective();
}
inline void Marshal::unsafe_arena_set_allocated_objective(::anduril::tasks::v2::Objective* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.objective_);
  }
  _impl_.objective_ = reinterpret_cast<::anduril::tasks::v2::Objective*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.tasks.v2.Marshal.objective)
}
inline ::anduril::tasks::v2::Objective* Marshal::release_objective() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::tasks::v2::Objective* released = _impl_.objective_;
  _impl_.objective_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::anduril::tasks::v2::Objective* Marshal::unsafe_arena_release_objective() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.tasks.v2.Marshal.objective)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::tasks::v2::Objective* temp = _impl_.objective_;
  _impl_.objective_ = nullptr;
  return temp;
}
inline ::anduril::tasks::v2::Objective* Marshal::_internal_mutable_objective() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.objective_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::anduril::tasks::v2::Objective>(GetArena());
    _impl_.objective_ = reinterpret_cast<::anduril::tasks::v2::Objective*>(p);
  }
  return _impl_.objective_;
}
inline ::anduril::tasks::v2::Objective* Marshal::mutable_objective() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::anduril::tasks::v2::Objective* _msg = _internal_mutable_objective();
  // @@protoc_insertion_point(field_mutable:anduril.tasks.v2.Marshal.objective)
  return _msg;
}
inline void Marshal::set_allocated_objective(::anduril::tasks::v2::Objective* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.objective_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.objective_ = reinterpret_cast<::anduril::tasks::v2::Objective*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.tasks.v2.Marshal.objective)
}

// -------------------------------------------------------------------

// Transit

// .anduril.tasks.v2.RoutePlan plan = 1 [json_name = "plan"];
inline bool Transit::has_plan() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.plan_ != nullptr);
  return value;
}
inline void Transit::clear_plan() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.plan_ != nullptr) _impl_.plan_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::anduril::tasks::v2::RoutePlan& Transit::_internal_plan() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::anduril::tasks::v2::RoutePlan* p = _impl_.plan_;
  return p != nullptr ? *p : reinterpret_cast<const ::anduril::tasks::v2::RoutePlan&>(::anduril::tasks::v2::_RoutePlan_default_instance_);
}
inline const ::anduril::tasks::v2::RoutePlan& Transit::plan() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.tasks.v2.Transit.plan)
  return _internal_plan();
}
inline void Transit::unsafe_arena_set_allocated_plan(::anduril::tasks::v2::RoutePlan* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.plan_);
  }
  _impl_.plan_ = reinterpret_cast<::anduril::tasks::v2::RoutePlan*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.tasks.v2.Transit.plan)
}
inline ::anduril::tasks::v2::RoutePlan* Transit::release_plan() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::tasks::v2::RoutePlan* released = _impl_.plan_;
  _impl_.plan_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::anduril::tasks::v2::RoutePlan* Transit::unsafe_arena_release_plan() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.tasks.v2.Transit.plan)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::tasks::v2::RoutePlan* temp = _impl_.plan_;
  _impl_.plan_ = nullptr;
  return temp;
}
inline ::anduril::tasks::v2::RoutePlan* Transit::_internal_mutable_plan() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.plan_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::anduril::tasks::v2::RoutePlan>(GetArena());
    _impl_.plan_ = reinterpret_cast<::anduril::tasks::v2::RoutePlan*>(p);
  }
  return _impl_.plan_;
}
inline ::anduril::tasks::v2::RoutePlan* Transit::mutable_plan() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::anduril::tasks::v2::RoutePlan* _msg = _internal_mutable_plan();
  // @@protoc_insertion_point(field_mutable:anduril.tasks.v2.Transit.plan)
  return _msg;
}
inline void Transit::set_allocated_plan(::anduril::tasks::v2::RoutePlan* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.plan_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.plan_ = reinterpret_cast<::anduril::tasks::v2::RoutePlan*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.tasks.v2.Transit.plan)
}

// -------------------------------------------------------------------

// RoutePlan

// .anduril.tasks.v2.Route route = 1 [json_name = "route"];
inline bool RoutePlan::has_route() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.route_ != nullptr);
  return value;
}
inline void RoutePlan::clear_route() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.route_ != nullptr) _impl_.route_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::anduril::tasks::v2::Route& RoutePlan::_internal_route() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::anduril::tasks::v2::Route* p = _impl_.route_;
  return p != nullptr ? *p : reinterpret_cast<const ::anduril::tasks::v2::Route&>(::anduril::tasks::v2::_Route_default_instance_);
}
inline const ::anduril::tasks::v2::Route& RoutePlan::route() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.tasks.v2.RoutePlan.route)
  return _internal_route();
}
inline void RoutePlan::unsafe_arena_set_allocated_route(::anduril::tasks::v2::Route* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.route_);
  }
  _impl_.route_ = reinterpret_cast<::anduril::tasks::v2::Route*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.tasks.v2.RoutePlan.route)
}
inline ::anduril::tasks::v2::Route* RoutePlan::release_route() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::tasks::v2::Route* released = _impl_.route_;
  _impl_.route_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::anduril::tasks::v2::Route* RoutePlan::unsafe_arena_release_route() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.tasks.v2.RoutePlan.route)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::tasks::v2::Route* temp = _impl_.route_;
  _impl_.route_ = nullptr;
  return temp;
}
inline ::anduril::tasks::v2::Route* RoutePlan::_internal_mutable_route() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.route_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::anduril::tasks::v2::Route>(GetArena());
    _impl_.route_ = reinterpret_cast<::anduril::tasks::v2::Route*>(p);
  }
  return _impl_.route_;
}
inline ::anduril::tasks::v2::Route* RoutePlan::mutable_route() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::anduril::tasks::v2::Route* _msg = _internal_mutable_route();
  // @@protoc_insertion_point(field_mutable:anduril.tasks.v2.RoutePlan.route)
  return _msg;
}
inline void RoutePlan::set_allocated_route(::anduril::tasks::v2::Route* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.route_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.route_ = reinterpret_cast<::anduril::tasks::v2::Route*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.tasks.v2.RoutePlan.route)
}

// -------------------------------------------------------------------

// Route

// repeated .anduril.tasks.v2.PathSegment path = 1 [json_name = "path"];
inline int Route::_internal_path_size() const {
  return _internal_path().size();
}
inline int Route::path_size() const {
  return _internal_path_size();
}
inline void Route::clear_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.Clear();
}
inline ::anduril::tasks::v2::PathSegment* Route::mutable_path(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:anduril.tasks.v2.Route.path)
  return _internal_mutable_path()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::anduril::tasks::v2::PathSegment>* Route::mutable_path()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:anduril.tasks.v2.Route.path)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_path();
}
inline const ::anduril::tasks::v2::PathSegment& Route::path(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.tasks.v2.Route.path)
  return _internal_path().Get(index);
}
inline ::anduril::tasks::v2::PathSegment* Route::add_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::anduril::tasks::v2::PathSegment* _add = _internal_mutable_path()->Add();
  // @@protoc_insertion_point(field_add:anduril.tasks.v2.Route.path)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::anduril::tasks::v2::PathSegment>& Route::path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:anduril.tasks.v2.Route.path)
  return _internal_path();
}
inline const ::google::protobuf::RepeatedPtrField<::anduril::tasks::v2::PathSegment>&
Route::_internal_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.path_;
}
inline ::google::protobuf::RepeatedPtrField<::anduril::tasks::v2::PathSegment>*
Route::_internal_mutable_path() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.path_;
}

// -------------------------------------------------------------------

// PathSegment

// .anduril.tasks.v2.Waypoint waypoint = 1 [json_name = "waypoint"];
inline bool PathSegment::has_waypoint() const {
  return end_point_case() == kWaypoint;
}
inline bool PathSegment::_internal_has_waypoint() const {
  return end_point_case() == kWaypoint;
}
inline void PathSegment::set_has_waypoint() {
  _impl_._oneof_case_[0] = kWaypoint;
}
inline void PathSegment::clear_waypoint() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (end_point_case() == kWaypoint) {
    if (GetArena() == nullptr) {
      delete _impl_.end_point_.waypoint_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.end_point_.waypoint_);
    }
    clear_has_end_point();
  }
}
inline ::anduril::tasks::v2::Waypoint* PathSegment::release_waypoint() {
  // @@protoc_insertion_point(field_release:anduril.tasks.v2.PathSegment.waypoint)
  if (end_point_case() == kWaypoint) {
    clear_has_end_point();
    auto* temp = _impl_.end_point_.waypoint_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.end_point_.waypoint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::anduril::tasks::v2::Waypoint& PathSegment::_internal_waypoint() const {
  return end_point_case() == kWaypoint ? *_impl_.end_point_.waypoint_ : reinterpret_cast<::anduril::tasks::v2::Waypoint&>(::anduril::tasks::v2::_Waypoint_default_instance_);
}
inline const ::anduril::tasks::v2::Waypoint& PathSegment::waypoint() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.tasks.v2.PathSegment.waypoint)
  return _internal_waypoint();
}
inline ::anduril::tasks::v2::Waypoint* PathSegment::unsafe_arena_release_waypoint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:anduril.tasks.v2.PathSegment.waypoint)
  if (end_point_case() == kWaypoint) {
    clear_has_end_point();
    auto* temp = _impl_.end_point_.waypoint_;
    _impl_.end_point_.waypoint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PathSegment::unsafe_arena_set_allocated_waypoint(::anduril::tasks::v2::Waypoint* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_end_point();
  if (value) {
    set_has_waypoint();
    _impl_.end_point_.waypoint_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.tasks.v2.PathSegment.waypoint)
}
inline ::anduril::tasks::v2::Waypoint* PathSegment::_internal_mutable_waypoint() {
  if (end_point_case() != kWaypoint) {
    clear_end_point();
    set_has_waypoint();
    _impl_.end_point_.waypoint_ =
        ::google::protobuf::Message::DefaultConstruct<::anduril::tasks::v2::Waypoint>(GetArena());
  }
  return _impl_.end_point_.waypoint_;
}
inline ::anduril::tasks::v2::Waypoint* PathSegment::mutable_waypoint() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::anduril::tasks::v2::Waypoint* _msg = _internal_mutable_waypoint();
  // @@protoc_insertion_point(field_mutable:anduril.tasks.v2.PathSegment.waypoint)
  return _msg;
}

// .anduril.tasks.v2.Loiter loiter = 2 [json_name = "loiter"];
inline bool PathSegment::has_loiter() const {
  return end_point_case() == kLoiter;
}
inline bool PathSegment::_internal_has_loiter() const {
  return end_point_case() == kLoiter;
}
inline void PathSegment::set_has_loiter() {
  _impl_._oneof_case_[0] = kLoiter;
}
inline ::anduril::tasks::v2::Loiter* PathSegment::release_loiter() {
  // @@protoc_insertion_point(field_release:anduril.tasks.v2.PathSegment.loiter)
  if (end_point_case() == kLoiter) {
    clear_has_end_point();
    auto* temp = _impl_.end_point_.loiter_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.end_point_.loiter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::anduril::tasks::v2::Loiter& PathSegment::_internal_loiter() const {
  return end_point_case() == kLoiter ? *_impl_.end_point_.loiter_ : reinterpret_cast<::anduril::tasks::v2::Loiter&>(::anduril::tasks::v2::_Loiter_default_instance_);
}
inline const ::anduril::tasks::v2::Loiter& PathSegment::loiter() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.tasks.v2.PathSegment.loiter)
  return _internal_loiter();
}
inline ::anduril::tasks::v2::Loiter* PathSegment::unsafe_arena_release_loiter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:anduril.tasks.v2.PathSegment.loiter)
  if (end_point_case() == kLoiter) {
    clear_has_end_point();
    auto* temp = _impl_.end_point_.loiter_;
    _impl_.end_point_.loiter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PathSegment::unsafe_arena_set_allocated_loiter(::anduril::tasks::v2::Loiter* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_end_point();
  if (value) {
    set_has_loiter();
    _impl_.end_point_.loiter_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.tasks.v2.PathSegment.loiter)
}
inline ::anduril::tasks::v2::Loiter* PathSegment::_internal_mutable_loiter() {
  if (end_point_case() != kLoiter) {
    clear_end_point();
    set_has_loiter();
    _impl_.end_point_.loiter_ =
        ::google::protobuf::Message::DefaultConstruct<::anduril::tasks::v2::Loiter>(GetArena());
  }
  return _impl_.end_point_.loiter_;
}
inline ::anduril::tasks::v2::Loiter* PathSegment::mutable_loiter() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::anduril::tasks::v2::Loiter* _msg = _internal_mutable_loiter();
  // @@protoc_insertion_point(field_mutable:anduril.tasks.v2.PathSegment.loiter)
  return _msg;
}

inline bool PathSegment::has_end_point() const {
  return end_point_case() != END_POINT_NOT_SET;
}
inline void PathSegment::clear_has_end_point() {
  _impl_._oneof_case_[0] = END_POINT_NOT_SET;
}
inline PathSegment::EndPointCase PathSegment::end_point_case() const {
  return PathSegment::EndPointCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Waypoint

// .anduril.tasks.v2.Point lla_point = 1 [json_name = "llaPoint"];
inline bool Waypoint::has_lla_point() const {
  return point_case() == kLlaPoint;
}
inline bool Waypoint::_internal_has_lla_point() const {
  return point_case() == kLlaPoint;
}
inline void Waypoint::set_has_lla_point() {
  _impl_._oneof_case_[0] = kLlaPoint;
}
inline ::anduril::tasks::v2::Point* Waypoint::release_lla_point() {
  // @@protoc_insertion_point(field_release:anduril.tasks.v2.Waypoint.lla_point)
  if (point_case() == kLlaPoint) {
    clear_has_point();
    auto* temp = _impl_.point_.lla_point_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.point_.lla_point_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::anduril::tasks::v2::Point& Waypoint::_internal_lla_point() const {
  return point_case() == kLlaPoint ? *_impl_.point_.lla_point_ : reinterpret_cast<::anduril::tasks::v2::Point&>(::anduril::tasks::v2::_Point_default_instance_);
}
inline const ::anduril::tasks::v2::Point& Waypoint::lla_point() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.tasks.v2.Waypoint.lla_point)
  return _internal_lla_point();
}
inline ::anduril::tasks::v2::Point* Waypoint::unsafe_arena_release_lla_point() {
  // @@protoc_insertion_point(field_unsafe_arena_release:anduril.tasks.v2.Waypoint.lla_point)
  if (point_case() == kLlaPoint) {
    clear_has_point();
    auto* temp = _impl_.point_.lla_point_;
    _impl_.point_.lla_point_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Waypoint::unsafe_arena_set_allocated_lla_point(::anduril::tasks::v2::Point* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_point();
  if (value) {
    set_has_lla_point();
    _impl_.point_.lla_point_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.tasks.v2.Waypoint.lla_point)
}
inline ::anduril::tasks::v2::Point* Waypoint::_internal_mutable_lla_point() {
  if (point_case() != kLlaPoint) {
    clear_point();
    set_has_lla_point();
    _impl_.point_.lla_point_ =
        ::google::protobuf::Message::DefaultConstruct<::anduril::tasks::v2::Point>(GetArena());
  }
  return _impl_.point_.lla_point_;
}
inline ::anduril::tasks::v2::Point* Waypoint::mutable_lla_point() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::anduril::tasks::v2::Point* _msg = _internal_mutable_lla_point();
  // @@protoc_insertion_point(field_mutable:anduril.tasks.v2.Waypoint.lla_point)
  return _msg;
}

inline bool Waypoint::has_point() const {
  return point_case() != POINT_NOT_SET;
}
inline void Waypoint::clear_has_point() {
  _impl_._oneof_case_[0] = POINT_NOT_SET;
}
inline Waypoint::PointCase Waypoint::point_case() const {
  return Waypoint::PointCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// SetLaunchRoute

// .anduril.tasks.v2.RoutePlan plan = 1 [json_name = "plan"];
inline bool SetLaunchRoute::has_plan() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.plan_ != nullptr);
  return value;
}
inline void SetLaunchRoute::clear_plan() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.plan_ != nullptr) _impl_.plan_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::anduril::tasks::v2::RoutePlan& SetLaunchRoute::_internal_plan() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::anduril::tasks::v2::RoutePlan* p = _impl_.plan_;
  return p != nullptr ? *p : reinterpret_cast<const ::anduril::tasks::v2::RoutePlan&>(::anduril::tasks::v2::_RoutePlan_default_instance_);
}
inline const ::anduril::tasks::v2::RoutePlan& SetLaunchRoute::plan() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:anduril.tasks.v2.SetLaunchRoute.plan)
  return _internal_plan();
}
inline void SetLaunchRoute::unsafe_arena_set_allocated_plan(::anduril::tasks::v2::RoutePlan* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.plan_);
  }
  _impl_.plan_ = reinterpret_cast<::anduril::tasks::v2::RoutePlan*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:anduril.tasks.v2.SetLaunchRoute.plan)
}
inline ::anduril::tasks::v2::RoutePlan* SetLaunchRoute::release_plan() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::tasks::v2::RoutePlan* released = _impl_.plan_;
  _impl_.plan_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::anduril::tasks::v2::RoutePlan* SetLaunchRoute::unsafe_arena_release_plan() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:anduril.tasks.v2.SetLaunchRoute.plan)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::anduril::tasks::v2::RoutePlan* temp = _impl_.plan_;
  _impl_.plan_ = nullptr;
  return temp;
}
inline ::anduril::tasks::v2::RoutePlan* SetLaunchRoute::_internal_mutable_plan() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.plan_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::anduril::tasks::v2::RoutePlan>(GetArena());
    _impl_.plan_ = reinterpret_cast<::anduril::tasks::v2::RoutePlan*>(p);
  }
  return _impl_.plan_;
}
inline ::anduril::tasks::v2::RoutePlan* SetLaunchRoute::mutable_plan() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::anduril::tasks::v2::RoutePlan* _msg = _internal_mutable_plan();
  // @@protoc_insertion_point(field_mutable:anduril.tasks.v2.SetLaunchRoute.plan)
  return _msg;
}
inline void SetLaunchRoute::set_allocated_plan(::anduril::tasks::v2::RoutePlan* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.plan_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.plan_ = reinterpret_cast<::anduril::tasks::v2::RoutePlan*>(value);
  // @@protoc_insertion_point(field_set_allocated:anduril.tasks.v2.SetLaunchRoute.plan)
}

// .anduril.tasks.v2.LaunchTrackingMode tracking_mode = 2 [json_name = "trackingMode"];
inline void SetLaunchRoute::clear_tracking_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tracking_mode_ = 0;
}
inline ::anduril::tasks::v2::LaunchTrackingMode SetLaunchRoute::tracking_mode() const {
  // @@protoc_insertion_point(field_get:anduril.tasks.v2.SetLaunchRoute.tracking_mode)
  return _internal_tracking_mode();
}
inline void SetLaunchRoute::set_tracking_mode(::anduril::tasks::v2::LaunchTrackingMode value) {
  _internal_set_tracking_mode(value);
  // @@protoc_insertion_point(field_set:anduril.tasks.v2.SetLaunchRoute.tracking_mode)
}
inline ::anduril::tasks::v2::LaunchTrackingMode SetLaunchRoute::_internal_tracking_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::anduril::tasks::v2::LaunchTrackingMode>(_impl_.tracking_mode_);
}
inline void SetLaunchRoute::_internal_set_tracking_mode(::anduril::tasks::v2::LaunchTrackingMode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tracking_mode_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace tasks
}  // namespace anduril


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::anduril::tasks::v2::LaunchTrackingMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::anduril::tasks::v2::LaunchTrackingMode>() {
  return ::anduril::tasks::v2::LaunchTrackingMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // anduril_2ftasks_2fv2_2fshared_2fmaneuver_2epub_2eproto_2epb_2eh
