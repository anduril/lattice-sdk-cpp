// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: anduril/type/color.pub.proto

#include "anduril/type/color.pub.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace anduril {
namespace type {

inline constexpr Color::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        alpha_{nullptr},
        red_{0},
        green_{0},
        blue_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Color::Color(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ColorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColorDefaultTypeInternal() {}
  union {
    Color _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColorDefaultTypeInternal _Color_default_instance_;
}  // namespace type
}  // namespace anduril
static ::_pb::Metadata file_level_metadata_anduril_2ftype_2fcolor_2epub_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_anduril_2ftype_2fcolor_2epub_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_anduril_2ftype_2fcolor_2epub_2eproto = nullptr;
const ::uint32_t TableStruct_anduril_2ftype_2fcolor_2epub_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::anduril::type::Color, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::anduril::type::Color, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::anduril::type::Color, _impl_.red_),
    PROTOBUF_FIELD_OFFSET(::anduril::type::Color, _impl_.green_),
    PROTOBUF_FIELD_OFFSET(::anduril::type::Color, _impl_.blue_),
    PROTOBUF_FIELD_OFFSET(::anduril::type::Color, _impl_.alpha_),
    ~0u,
    ~0u,
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 12, -1, sizeof(::anduril::type::Color)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::anduril::type::_Color_default_instance_._instance,
};
const char descriptor_table_protodef_anduril_2ftype_2fcolor_2epub_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\034anduril/type/color.pub.proto\022\014anduril."
    "type\032\036google/protobuf/wrappers.proto\"v\n\005"
    "Color\022\020\n\003red\030\001 \001(\002R\003red\022\024\n\005green\030\002 \001(\002R\005"
    "green\022\022\n\004blue\030\003 \001(\002R\004blue\0221\n\005alpha\030\004 \001(\013"
    "2\033.google.protobuf.FloatValueR\005alphaB\256\001\n"
    "\020com.anduril.typeB\rColorPubProtoP\001Z:ghe."
    "anduril.dev/anduril/andurilapis-go/andur"
    "il/type;atypes\242\002\003ATX\252\002\014Anduril.Type\312\002\014An"
    "duril\\Type\342\002\030Anduril\\Type\\GPBMetadata\352\002\r"
    "Anduril::Typeb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_anduril_2ftype_2fcolor_2epub_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::absl::once_flag descriptor_table_anduril_2ftype_2fcolor_2epub_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_anduril_2ftype_2fcolor_2epub_2eproto = {
    false,
    false,
    381,
    descriptor_table_protodef_anduril_2ftype_2fcolor_2epub_2eproto,
    "anduril/type/color.pub.proto",
    &descriptor_table_anduril_2ftype_2fcolor_2epub_2eproto_once,
    descriptor_table_anduril_2ftype_2fcolor_2epub_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_anduril_2ftype_2fcolor_2epub_2eproto::offsets,
    file_level_metadata_anduril_2ftype_2fcolor_2epub_2eproto,
    file_level_enum_descriptors_anduril_2ftype_2fcolor_2epub_2eproto,
    file_level_service_descriptors_anduril_2ftype_2fcolor_2epub_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_anduril_2ftype_2fcolor_2epub_2eproto_getter() {
  return &descriptor_table_anduril_2ftype_2fcolor_2epub_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_anduril_2ftype_2fcolor_2epub_2eproto(&descriptor_table_anduril_2ftype_2fcolor_2epub_2eproto);
namespace anduril {
namespace type {
// ===================================================================

class Color::_Internal {
 public:
  using HasBits = decltype(std::declval<Color>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Color, _impl_._has_bits_);
  static const ::google::protobuf::FloatValue& alpha(const Color* msg);
  static void set_has_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::google::protobuf::FloatValue& Color::_Internal::alpha(const Color* msg) {
  return *msg->_impl_.alpha_;
}
void Color::clear_alpha() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.alpha_ != nullptr) _impl_.alpha_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Color::Color(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:anduril.type.Color)
}
inline PROTOBUF_NDEBUG_INLINE Color::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Color::Color(
    ::google::protobuf::Arena* arena,
    const Color& from)
    : ::google::protobuf::Message(arena) {
  Color* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.alpha_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::FloatValue>(arena, *from._impl_.alpha_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, red_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, red_),
           offsetof(Impl_, blue_) -
               offsetof(Impl_, red_) +
               sizeof(Impl_::blue_));

  // @@protoc_insertion_point(copy_constructor:anduril.type.Color)
}
inline PROTOBUF_NDEBUG_INLINE Color::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Color::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, alpha_),
           0,
           offsetof(Impl_, blue_) -
               offsetof(Impl_, alpha_) +
               sizeof(Impl_::blue_));
}
Color::~Color() {
  // @@protoc_insertion_point(destructor:anduril.type.Color)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Color::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.alpha_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:anduril.type.Color)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.alpha_ != nullptr);
    _impl_.alpha_->Clear();
  }
  ::memset(&_impl_.red_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.blue_) -
      reinterpret_cast<char*>(&_impl_.red_)) + sizeof(_impl_.blue_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Color::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 0, 2> Color::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Color, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Color_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .google.protobuf.FloatValue alpha = 4 [json_name = "alpha"];
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(Color, _impl_.alpha_)}},
    // float red = 1 [json_name = "red"];
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Color, _impl_.red_)}},
    // float green = 2 [json_name = "green"];
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Color, _impl_.green_)}},
    // float blue = 3 [json_name = "blue"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Color, _impl_.blue_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float red = 1 [json_name = "red"];
    {PROTOBUF_FIELD_OFFSET(Color, _impl_.red_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float green = 2 [json_name = "green"];
    {PROTOBUF_FIELD_OFFSET(Color, _impl_.green_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float blue = 3 [json_name = "blue"];
    {PROTOBUF_FIELD_OFFSET(Color, _impl_.blue_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .google.protobuf.FloatValue alpha = 4 [json_name = "alpha"];
    {PROTOBUF_FIELD_OFFSET(Color, _impl_.alpha_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::FloatValue>()},
  }}, {{
  }},
};

::uint8_t* Color::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:anduril.type.Color)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float red = 1 [json_name = "red"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_red = this->_internal_red();
  ::uint32_t raw_red;
  memcpy(&raw_red, &tmp_red, sizeof(tmp_red));
  if (raw_red != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_red(), target);
  }

  // float green = 2 [json_name = "green"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_green = this->_internal_green();
  ::uint32_t raw_green;
  memcpy(&raw_green, &tmp_green, sizeof(tmp_green));
  if (raw_green != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_green(), target);
  }

  // float blue = 3 [json_name = "blue"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_blue = this->_internal_blue();
  ::uint32_t raw_blue;
  memcpy(&raw_blue, &tmp_blue, sizeof(tmp_blue));
  if (raw_blue != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_blue(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.FloatValue alpha = 4 [json_name = "alpha"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::alpha(this),
        _Internal::alpha(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anduril.type.Color)
  return target;
}

::size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anduril.type.Color)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.FloatValue alpha = 4 [json_name = "alpha"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.alpha_);
  }

  // float red = 1 [json_name = "red"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_red = this->_internal_red();
  ::uint32_t raw_red;
  memcpy(&raw_red, &tmp_red, sizeof(tmp_red));
  if (raw_red != 0) {
    total_size += 5;
  }

  // float green = 2 [json_name = "green"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_green = this->_internal_green();
  ::uint32_t raw_green;
  memcpy(&raw_green, &tmp_green, sizeof(tmp_green));
  if (raw_green != 0) {
    total_size += 5;
  }

  // float blue = 3 [json_name = "blue"];
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_blue = this->_internal_blue();
  ::uint32_t raw_blue;
  memcpy(&raw_blue, &tmp_blue, sizeof(tmp_blue));
  if (raw_blue != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Color::_class_data_ = {
    Color::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Color::GetClassData() const {
  return &_class_data_;
}

void Color::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Color*>(&to_msg);
  auto& from = static_cast<const Color&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:anduril.type.Color)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_alpha()->::google::protobuf::FloatValue::MergeFrom(
        from._internal_alpha());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_red = from._internal_red();
  ::uint32_t raw_red;
  memcpy(&raw_red, &tmp_red, sizeof(tmp_red));
  if (raw_red != 0) {
    _this->_internal_set_red(from._internal_red());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_green = from._internal_green();
  ::uint32_t raw_green;
  memcpy(&raw_green, &tmp_green, sizeof(tmp_green));
  if (raw_green != 0) {
    _this->_internal_set_green(from._internal_green());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_blue = from._internal_blue();
  ::uint32_t raw_blue;
  memcpy(&raw_blue, &tmp_blue, sizeof(tmp_blue));
  if (raw_blue != 0) {
    _this->_internal_set_blue(from._internal_blue());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anduril.type.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Color::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Color::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Color::InternalSwap(Color* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Color, _impl_.blue_)
      + sizeof(Color::_impl_.blue_)
      - PROTOBUF_FIELD_OFFSET(Color, _impl_.alpha_)>(
          reinterpret_cast<char*>(&_impl_.alpha_),
          reinterpret_cast<char*>(&other->_impl_.alpha_));
}

::google::protobuf::Metadata Color::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_anduril_2ftype_2fcolor_2epub_2eproto_getter, &descriptor_table_anduril_2ftype_2fcolor_2epub_2eproto_once,
      file_level_metadata_anduril_2ftype_2fcolor_2epub_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace type
}  // namespace anduril
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
